<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
  <id>https://brysonlin.github.io/blog/blog/</id>
  <title>林初笔墨</title>
  <subtitle>林初笔墨,林初笔墨的博客,Web前端博客,前端博客,Web全栈技术博客,前端工程师博客</subtitle>
  <updated>2022-07-31T09:26:53.668Z</updated>
  <generator>vuepress-plugin-feed2</generator>
  <link rel="self" href="https://brysonlin.github.io/blog/blog/atom.xml"/>
  <link rel="alternate" href="https://brysonlin.github.io/blog/blog/"/>
  <category term="Markdown"/>
  <category term="书籍"/>
  <entry>
    <title type="html">TypeScirpt中的类</title>
    <id>https://brysonlin.github.io/blog/blog/code/language/typescript/class.html</id>
    <link href="https://brysonlin.github.io/blog/blog/code/language/typescript/class.html"/>
    <updated>2022-07-31T09:25:53.000Z</updated>
    <content type="html"><![CDATA[<div><pre><code> // 构造函数

  function Person(name,age){

   this.name = name;

    this.age = age;*

   this.sayHei=function(){

    console.log(`我的名字叫${this.name}，今年：${this.age}`);

   }*

  }

 // 原型上增加方法

   Person.prototype.sex = function(){

    console.log('我正在被共享！');

   }

   // 静态方法

  Person.printName = function(){*

    console.log(this.name);*

   }

  // let person1 = new Person('linxing',18);



  // 对象冒充继承  可以继承属性和方法传参 没法继承原型链和静态方法

   function Web(){

   Person.call(this，传参)

   }

   // 原型链继承 可以继承属性和方法也可以继承原型链上的属性和方法  没法传参

   Web.prototype = new Person();*

   let v = new Web();

   v.sayHei();

  // 原型链和对象冒充函数继承属性和方法

   function Web(name,age){

    Person.call(this,name,age)

  }

  // Webj.prototype = Person.prototype;

  

   // 用对象冒充（盗用构造函数）去继承父类的属性和方法 Person.call(thsi, params)

   // 用原型链去继承父类的原型上的方法  web.prototype = new Person    web.prototype = Person.prototype
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="一、typescript-中的类" tabindex="-1"> 一、TypeScript 中的类</h2>
<div><pre><code><span>class</span> <span>Person</span><span>{</span>
	name<span>:</span><span>string</span><span>;</span>
	<span>constructor</span><span>(</span>name<span>:</span> <span>string</span><span>)</span><span>{</span>			<span>// 构造函数  实例化类的时候触发的方法</span>
		<span>this</span><span>.</span>name <span>=</span> name<span>;</span>
	<span>}</span>
    <span>getName</span><span>(</span><span>)</span><span>:</span> <span>string</span><span>{</span>
        <span>return</span> <span>this</span><span>.</span>name
    <span>}</span>
    <span>setName</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>:</span>viod <span>{</span>
        <span>this</span><span>.</span>name <span>=</span> name<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="二、typescript-中类继承-extends、super" tabindex="-1"> 二、TypeScript 中类继承：extends、super</h2>
<div><pre><code><span>class</span> <span>Person</span><span>{</span>
	name<span>:</span><span>string</span><span>;</span>
	<span>constructor</span><span>(</span>name<span>:</span> <span>string</span><span>)</span><span>{</span>			<span>// 构造函数  实例化类的时候触发的方法</span>
		<span>this</span><span>.</span>name <span>=</span> name<span>;</span>
	<span>}</span>
    <span>getName</span><span>(</span><span>)</span><span>:</span> <span>string</span><span>{</span>
        <span>return</span> <span>this</span><span>.</span>name
    <span>}</span>
    <span>setName</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>:</span>viod <span>{</span>
        <span>this</span><span>.</span>name <span>=</span> name<span>;</span>
    <span>}</span>
<span>}</span>
定义 web 类来继承 Person 类
<span>class</span> <span>Web</span> <span>extends</span> <span>Person</span><span>{</span>
	<span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>
		<span>super</span><span>(</span>name<span>)</span>						<span>// 初始化父类的构造函数				</span>
	<span>}</span>
<span>}</span>
<span>let</span> w <span>=</span> <span>new</span> <span>Web</span><span>(</span><span>'李四'</span><span>)</span>；
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="三、typescript类里面的修饰符" tabindex="-1"> 三、TypeScript类里面的修饰符</h2>
<ol>
<li>TypeScript 里面定义了属性的时候给我们提供了三种修饰符
<ol>
<li>public：公有         											在类里面、子类、类外都可以访问</li>
<li>protected：保护类型  									在类里面、子类里面可以访问，在类外部没法访问</li>
<li>private：私有		                                           在类里面可以访问，子类、类外部都没法访问</li>
</ol>
</li>
<li>属性不加修饰符：默认代表共有属性，public</li>
</ol>
<div><pre><code>class Person{
	public name:string;
	constructor(name: string){			// 构造函数  实例化类的时候触发的方法
		this.name = name;
	}
    getName(): string{
        return this.name
    }
    setName(name:string):viod {
        this.name = name;
    }
}
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="一、typescript中类的静态属性、静态方法、抽象类、多态" tabindex="-1"> 一、TypeScript中类的静态属性、静态方法、抽象类、多态</h2>
<ol>
<li>
<p>es5中的静态属性、静态方法</p>
<div><pre><code><span>function</span> <span>Person</span><span>(</span><span>)</span><span>{</span><span>}</span>
Person<span>.</span>name <span>=</span> <span>'linxing'</span><span>;</span>		<span>// 静态属性</span>
Person<span>.</span><span>sayName</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span> console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>name<span>)</span> <span>}</span>  <span>// 静态方法</span>


Jquery
<span>$</span><span>(</span><span>.</span>box<span>)</span><span>.</span><span>css</span><span>(</span><span>)</span><span>;</span>
<span>function</span> <span>$</span><span>(</span><span>el</span><span>)</span><span>{</span>    <span>return</span> <span>Base</span><span>(</span>el<span>)</span><span>}</span>
<span>Base</span><span>(</span><span>)</span><span>{</span>   <span>this</span><span>.</span>css <span>=</span> <span>'获取DOM节点'</span><span>}</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
<li>
<p>TypeScript中静态属性、静态方法</p>
<div><pre><code><span>class</span> <span>Person</span><span>{</span>
	<span>public</span> name<span>:</span> <span>string</span>
	<span>static</span> age<span>:</span> <span>number</span>
	<span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>
		<span>this</span><span>.</span>name <span>=</span> name
	<span>}</span>
	<span>sayName</span><span>(</span><span>)</span><span>{</span>		<span>// 实例方法</span>
		
	<span>}</span>
	<span>static</span> <span>print</span><span>(</span><span>)</span><span>{</span>		<span>// 在静态方法里面不能使用this</span>
		<span>console</span><span>.</span><span>log</span><span>(</span><span>'我这是静态方法'</span><span>)</span>
	<span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
<li>
<p>多态方法</p>
<ol>
<li>父类定义一个方法不去实现，让继承它的子类去实现  每一个子类有不同的表现</li>
<li>多态属于继承</li>
</ol>
<div><pre><code><span>class</span> <span>Animal</span><span>{</span>
	name<span>:</span> <span>string</span>
	<span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>
		<span>this</span><span>.</span>name <span>=</span> name
	<span>}</span>
	<span>eat</span><span>(</span><span>)</span><span>{</span>							<span>// 定义了一个方法不去实现，让子类去实现</span>
		<span>console</span><span>.</span><span>log</span><span>(</span><span>'我是吃的方法'</span><span>)</span>
	<span>}</span>
<span>}</span>
<span>class</span> <span>Dog</span> <span>extends</span> <span>Animal</span><span>{</span>
	<span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>
		<span>super</span><span>(</span>name<span>)</span>
	<span>}</span>
	<span>eat</span><span>(</span><span>)</span><span>{</span>							<span>// 这就是多态， 继承重写了父类方法</span>
		<span>console</span><span>.</span><span>log</span><span>(</span><span>'小狗吃粮食'</span><span>)</span>
	<span>}</span>
<span>}</span>
<span>class</span> <span>Cat</span> <span>extends</span> <span>Animal</span> <span>{</span>
	<span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>
		<span>super</span><span>(</span>name<span>)</span>
	<span>}</span>
	<span>eat</span><span>(</span><span>)</span><span>{</span>
		<span>console</span><span>.</span><span>log</span><span>(</span><span>'吃老鼠'</span><span>)</span>
	<span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
<li>
<p>抽象方法</p>
<ol>
<li>typeScript 中的抽象类：它是提供其他类继承的基类，不能直接被实例化。</li>
<li>用 abstract 关键字定义抽象类和抽象方法，抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。</li>
<li>abstract 方法只能放在抽象类里面</li>
<li>抽象类和抽象方法用来定义标准，标准：Animal 这个类要求它的子类必须包含 eat 方法</li>
</ol>
<div><pre><code><span>abstract</span> <span>class</span> <span>Animal</span><span>{</span>				<span>// 父类定义，子类必须实现</span>
    <span>public</span> names<span>:</span> <span>string</span>
    <span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span> <span>{</span> 
        <span>this</span><span>.</span>names <span>=</span> name<span>;</span>
    <span>}</span>
	<span>abstract</span> <span>eat</span><span>(</span><span>)</span><span>:</span><span>any</span><span>;</span>
<span>}</span>
<span>// let p = new Animal()  错误：无法定义抽象类</span>

<span>class</span> <span>Dog</span> <span>extends</span> <span>Animal</span><span>{</span>
  <span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>
    <span>super</span><span>(</span>name<span>)</span>
  <span>}</span>
  <span>eat</span><span>(</span><span>)</span><span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>names <span>+</span> <span>'吃'</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ol>
]]></content>
    <published>2022-07-31T09:25:53.000Z</published>
  </entry>
  <entry>
    <title type="html">TypeScirpt的数据类型</title>
    <id>https://brysonlin.github.io/blog/blog/code/language/typescript/data-type.html</id>
    <link href="https://brysonlin.github.io/blog/blog/code/language/typescript/data-type.html"/>
    <updated>2022-07-31T09:25:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一、typescript-中为了使编写的代码更规范-更有利于维护-增加了类型校验。" tabindex="-1"> 一、TypeScript 中为了使编写的代码更规范，更有利于维护，增加了类型校验。</h2>
<ul>
<li>
<p>布尔类型（boolean）</p>
</li>
<li>
<p>数字类型（number）</p>
</li>
<li>
<p>字符串类型（string）</p>
</li>
<li>
<p>数组类型（array）</p>
</li>
<li>
<p>元组类型（tuple）</p>
</li>
<li>
<p>枚举类型（enum）</p>
</li>
<li>
<p>任意类型（any）</p>
</li>
<li>
<p>null 和 undefined</p>
</li>
<li>
<p>void 类型</p>
</li>
<li>
<p>never 类型</p>
</li>
<li>
<p>对象</p>
</li>
<li>
<p>unknown(一种保护类型的any)</p>
</li>
<li>
<p>类型的别名</p>
<div><pre><code><span>// 类型的别名</span>
<span>type</span> <span>Mytype</span> <span>=</span> <span>1</span><span>|</span><span>2</span><span>|</span><span>3</span><span>|</span><span>4</span><span>|</span><span>5</span><span>;</span>
<span>let</span> num<span>:</span>Mytype
<span>let</span> num1<span>:</span>Mytype
<span>let</span> num2<span>:</span>Mytype


num <span>=</span> <span>8</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ul>
<h2 id="二、定义类型示例" tabindex="-1"> 二、定义类型示例</h2>
<ol>
<li>
<p>布尔类型（boolean）</p>
<div><pre><code><span>let</span> bool<span>:</span> <span>boolean</span> <span>=</span> <span>true</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div></div></div></li>
<li>
<p>数字类型 （number）</p>
<div><pre><code><span>let</span> num<span>:</span> <span>number</span> <span>=</span> <span>11</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div></div></div></li>
<li>
<p>字符串类型（string）</p>
<div><pre><code><span>let</span> str<span>:</span> <span>string</span> <span>=</span> <span>'lin'</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div></div></div></li>
<li>
<p>数组类型(Array)</p>
<div><pre><code><span>// 第一种定义方式</span>
<span>let</span> arr<span>:</span> <span>string</span><span>[</span><span>]</span> <span>=</span> <span>[</span><span>'lin'</span><span>,</span><span>'xing'</span><span>]</span><span>;</span>
<span>// 第二种定义方式: 泛型</span>
<span>let</span> arr<span>:</span> <span>Array</span><span>&lt;</span><span>string</span><span>></span> <span>=</span> <span>[</span><span>'lin'</span><span>,</span><span>'xing'</span><span>]</span><span>;</span>
<span>// 第三种类型：</span>
<span>let</span> arr<span>:</span> <span>any</span><span>[</span><span>]</span> <span>=</span> <span>[</span><span>'linxing'</span><span>,</span> <span>123</span><span>,</span> <span>false</span><span>]</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
<li>
<p>元组类型 (tuple)</p>
<div><pre><code><span>let</span> tup<span>:</span> <span>[</span><span>string</span><span>,</span> <span>number</span><span>,</span> <span>boolean</span><span>]</span> <span>=</span> <span>[</span><span>'JavaScript'</span><span>,</span> <span>110</span><span>,</span> <span>true</span><span>]</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div></div></div></li>
<li>
<p>枚举类型 (enum)</p>
<div><pre><code><span>enum</span> 枚举名<span>{</span>
	标识符<span>[</span><span>=</span> 整型常数<span>]</span>，
	标识符<span>[</span><span>=</span> 整型常数<span>]</span>，
	<span>...</span><span>.</span>
	标识符<span>[</span><span>=</span> 整型常数<span>]</span>，
<span>}</span>
<span>enum</span> Flag<span>{</span> success <span>=</span> <span>1</span><span>,</span> error <span>=</span> <span>2</span><span>}</span><span>;</span>
<span>let</span> f<span>:</span>Flag <span>=</span> Flag<span>.</span>success<span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span>f<span>)</span><span>;</span>   <span>// 结果1</span>

<span>// 默认是数字 ， 如果修改其中的一个类型不为数字，后面则必须定义，否则报错</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
<li>
<p>任意类型 (any)</p>
<div><pre><code><span>let</span> anyType<span>:</span> <span>any</span> <span>=</span> <span>'string'</span>			<span>// 什么类型都能放</span>
</code></pre><div aria-hidden="true"><div></div></div></div></li>
<li>
<p>null 和 undefined 类型</p>
<div><pre><code><span>let</span> age<span>:</span> <span>number</span> <span>|</span> <span>undefined</span><span>;</span>			<span>// | 或者的意思</span>
<span>let</span> num<span>:</span> <span>number</span> <span>|</span> <span>null</span> <span>|</span> <span>undefined</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div></li>
<li>
<p>void 类型</p>
<div><pre><code><span>// void 表示没有任何类型，一般用于执行方法没有返回值</span>
<span>function</span> <span>sum</span><span>(</span>x<span>,</span> y<span>,</span><span>)</span><span>:</span> <span>void</span><span>{</span>
    <span>let</span> num<span>:</span> <span>number</span> <span>=</span> x<span>+</span>y<span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div></li>
<li>
<p>never 类型</p>
<div><pre><code><span>// never类型：是其他类型（包括 null 和 undefined ）的子类型，代表从不会出现的值。</span>
<span>// 这意味着声明never的变量只能被never类型所赋值。</span>

<span>var</span> a<span>:</span><span>undefined</span><span>;</span>
a<span>=</span><span>undefined</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ol>
]]></content>
    <published>2022-07-31T09:25:53.000Z</published>
  </entry>
  <entry>
    <title type="html">装饰器</title>
    <id>https://brysonlin.github.io/blog/blog/code/language/typescript/decorator.html</id>
    <link href="https://brysonlin.github.io/blog/blog/code/language/typescript/decorator.html"/>
    <updated>2022-07-31T09:25:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一、typescript中的装饰" tabindex="-1"> 一、TypeScript中的装饰</h2>
<div><p>提示</p>
<ol>
<li>装饰器：装饰器是一种特殊类型1的声明，它能够被附加到类声明，方法，属性或传参上，可以修改类的行为。</li>
<li>通俗的讲 装饰器就是一个方法，可以注入到类、方法、属性参数上来扩展类、属性、方法、参数的功能。</li>
<li>常见的装饰器有：类装饰器、属性装饰器、方法装饰器、参数装饰器</li>
<li>装饰器的写法：普通装饰器（无法传参）、装饰器工厂（可传参）</li>
<li>装饰器是过去几年中 JS 最大的成就之一，已是 es7 的标准特性之一</li>
</ol>
</div>
<h2 id="二、类装饰器" tabindex="-1"> 二、类装饰器</h2>
<h3 id="_1-类装饰器-类装饰器在类声明之前被声明-紧靠着类声明-。类装饰器应用于类构造函数-可以用来监视-修改或替换类定义。传入一个参数" tabindex="-1"> 1. 类装饰器：类装饰器在类声明之前被声明（紧靠着类声明）。类装饰器应用于类构造函数，可以用来监视，修改或替换类定义。传入一个参数</h3>
<h3 id="_2-普通装饰器-没有参数" tabindex="-1"> 2. 普通装饰器（没有参数）</h3>
<div><pre><code><span>function</span> <span>logclass</span><span>(</span>parms<span>:</span><span>any</span><span>)</span><span>{</span>
  parms<span>.</span>prototype<span>.</span><span>sayName</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>name<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
<span><span>@</span><span>logclass</span></span>
<span>class</span> <span>Web</span> <span>{</span>
  <span>public</span> name<span>:</span><span>string</span><span>;</span>
  <span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>
    <span>this</span><span>.</span>name <span>=</span> name
  <span>}</span>
<span>}</span>
<span>let</span> person<span>:</span><span>any</span>  <span>=</span> <span>new</span> <span>Web</span><span>(</span><span>'linxing'</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span>person<span>)</span><span>;</span>
person<span>.</span><span>sayName</span><span>(</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="_3-装饰器工厂-带参" tabindex="-1"> 3. 装饰器工厂（带参）</h3>
<div><pre><code><span>// 装饰器</span>
<span>function</span> <span>logclass</span><span>(</span>params<span>:</span><span>string</span><span>)</span><span>{</span>
  <span>return</span> <span>function</span><span>(</span>target<span>:</span><span>any</span><span>)</span><span>{</span>
q    target<span>.</span>prototype<span>.</span>apiUrl <span>=</span> params<span>;</span>
  <span>}</span>
<span>}</span>
<span><span>@</span><span>logclass</span></span><span>(</span><span>'http://www.itying.com/api'</span><span>)</span>
<span>class</span> <span>Web</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span><span>{</span><span>}</span>
<span>}</span>
<span>let</span> person<span>:</span><span>any</span>  <span>=</span> <span>new</span> <span>Web</span><span>(</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span>apiUrl<span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="_4-类装饰器重载-类的构造函数" tabindex="-1"> 4. 类装饰器重载 类的构造函数</h3>
<div><pre><code><span>// 装饰器</span>
<span>function</span> <span>logclass</span><span>(</span>target<span>:</span><span>any</span><span>)</span><span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span>target<span>)</span><span>;</span>
  <span>return</span> <span>class</span> <span><span>extends</span></span> target<span>{</span>
    apiUlr<span>:</span><span>any</span> <span>=</span> <span>'我是修改过后的数据'</span><span>;</span>
    <span>getData</span><span>(</span><span>)</span><span>{</span>
      <span>console</span><span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>apiUlr<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
<span><span>@</span><span>logclass</span></span>
<span>class</span> <span>Web</span> <span>{</span>
  <span>public</span> apiUlr<span>:</span> <span>string</span> <span>|</span> <span>undefined</span><span>;</span>
  <span>constructor</span><span>(</span><span>)</span><span>{</span>
    <span>this</span><span>.</span>apiUlr <span>=</span> <span>'我是构造函数里的apiurl'</span>
  <span>}</span>
  <span>getData</span><span>(</span><span>)</span><span>{</span><span>}</span>
<span>}</span>
<span>let</span> person<span>:</span><span>any</span>  <span>=</span> <span>new</span> <span>Web</span><span>(</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span>apiUlr<span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="三、属性装饰器" tabindex="-1"> 三、属性装饰器</h2>
<blockquote>
<p><strong>内容正在创建中……</strong></p>
</blockquote>
]]></content>
    <published>2022-07-31T09:25:53.000Z</published>
  </entry>
  <entry>
    <title type="html">TypeScript函数</title>
    <id>https://brysonlin.github.io/blog/blog/code/language/typescript/fn.html</id>
    <link href="https://brysonlin.github.io/blog/blog/code/language/typescript/fn.html"/>
    <updated>2022-07-31T09:25:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一、typescript函数" tabindex="-1"> 一、TypeScript函数</h2>
<ol>
<li>
<p>es5中定义方法</p>
<div><pre><code><span>// 函数声明式</span>
<span>function</span> <span>sun</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>;</span>
<span>// 匿名函数</span>
<span>let</span> <span>person</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span><span>}</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div></li>
<li>
<p>TypeScript中定义方法</p>
<div><pre><code><span>// 函数声明式</span>
<span>function</span> <span>sun</span><span>(</span><span>)</span><span>:</span>viod<span>{</span><span>}</span><span>;</span>
<span>// 匿名函数</span>
<span>let</span> person <span>=</span> <span>funciton</span><span>(</span><span>)</span><span>:</span><span>string</span><span>{</span> <span>return</span>  <span>''</span><span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div></li>
</ol>
<h2 id="二、函数方法传参" tabindex="-1"> 二、函数方法传参</h2>
<ol>
<li>
<p>函数声明</p>
<div><pre><code><span>function</span> <span>getInfo</span><span>(</span>name<span>:</span> <span>string</span><span>,</span> age<span>:</span> <span>number</span><span>)</span><span>:</span> <span>string</span><span>{</span> 
	<span>return</span> <span><span>`</span><span>我的名字叫</span><span><span>${</span>name<span>}</span></span><span>,今年</span><span><span>${</span>age<span>}</span></span><span>岁</span><span>`</span></span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div></li>
<li>
<p>匿名函数</p>
<div><pre><code><span>let</span> <span>getInfo</span> <span>=</span> <span>function</span><span>(</span>name<span>:</span> <span>string</span><span>,</span> age<span>:</span> <span>number</span><span>)</span><span>:</span> viod<span>{</span> 
	<span>console</span><span>.</span><span>log</span><span>(</span><span><span>`</span><span>我的名字叫</span><span><span>${</span>name<span>}</span></span><span>,今年</span><span><span>${</span>age<span>}</span></span><span>岁</span><span>`</span></span><span>)</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div></li>
</ol>
<h2 id="三、方法的可选参数" tabindex="-1"> 三、方法的可选参数</h2>
<ol>
<li>
<p>es5 里面方法的实参和形参可以不一样，但是 ts 中必须一样，如果不一样就需要配置可选参数</p>
</li>
<li>
<p>注意！可选参数必须配到参数的最后面</p>
<div><pre><code><span>let</span> <span>getInfo</span> <span>=</span> <span>function</span><span>(</span>name<span>:</span> <span>string</span><span>,</span> age<span>?</span><span>:</span> <span>number</span><span>)</span><span>:</span> viod<span>{</span> 
	<span>if</span><span>(</span>age<span>)</span><span>{</span>
		<span>console</span><span>.</span><span>log</span><span>(</span><span><span>`</span><span>我的名字叫</span><span><span>${</span>name<span>}</span></span><span>,今年</span><span><span>${</span>age<span>}</span></span><span>岁</span><span>`</span></span><span>)</span>
	<span>}</span><span>else</span><span>{</span>
		<span>console</span><span>.</span><span>log</span><span>(</span><span>'哈哈哈'</span><span>)</span>
	<span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ol>
<h2 id="四、方法的默认参数" tabindex="-1"> 四、方法的默认参数</h2>
<ol>
<li>
<p>es5 中是不能配置默认传参的，es6 和 ts 可配置默认参数</p>
<div><pre><code>
<span>let</span> <span>getInfo</span> <span>=</span> <span>function</span><span>(</span>name<span>:</span> <span>string</span><span>,</span> age<span>:</span> <span>number</span> <span>=</span> <span>23</span><span>)</span><span>:</span> viod<span>{</span> 
	<span>if</span><span>(</span>age<span>)</span><span>{</span>
		<span>console</span><span>.</span><span>log</span><span>(</span><span><span>`</span><span>我的名字叫</span><span><span>${</span>name<span>}</span></span><span>,今年</span><span><span>${</span>age<span>}</span></span><span>岁</span><span>`</span></span><span>)</span>
	<span>}</span><span>else</span><span>{</span>
		<span>console</span><span>.</span><span>log</span><span>(</span><span>'哈哈哈'</span><span>)</span>
	<span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ol>
<h2 id="五、函数剩余参数" tabindex="-1"> 五、函数剩余参数</h2>
<ol>
<li>
<p>三点运算符 接收传递过来的所有参数</p>
<div><pre><code><span>function</span> <span>sum</span><span>(</span>a<span>:</span><span>number</span><span>,</span> <span>...</span>result<span>:</span> <span>number</span><span>[</span><span>]</span><span>)</span><span>:</span> <span>number</span><span>{</span>
	<span>var</span> sum <span>=</span> <span>0</span><span>;</span>
	<span>for</span><span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i<span>&lt;</span>result<span>.</span>lenght<span>;</span>i<span>++</span><span>)</span><span>{</span>
		sum<span>+=</span>result<span>[</span>i<span>]</span><span>;</span>
	<span>}</span>
	<span>return</span> sum
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ol>
<h2 id="六、函数重载" tabindex="-1"> 六、函数重载</h2>
<ol>
<li>
<p>java 中方法的重载：重载指的是两个或者两个以上同名函数，但它们的参数不一样，这时会出现函数重载的情况。</p>
</li>
<li>
<p>typescript 中的重载：通过为同一个函数提供多个函数类型定义来试下各种功能的目的。</p>
</li>
<li>
<p>为了兼容es5，以及es6中重载的写法和java有区别</p>
<div><pre><code><span>function</span> <span>getInfo</span><span>(</span>names<span>:</span> <span>string</span><span>)</span><span>:</span> <span>string</span><span>;</span>
<span>function</span> <span>getInfo</span><span>(</span>age<span>:</span><span>number</span> <span>)</span><span>:</span> <span>string</span><span>;</span>
<span>function</span> <span>getInfo</span><span>(</span>str<span>:</span><span>any</span><span>)</span><span>:</span><span>any</span> <span>{</span>
	<span>if</span><span>(</span><span>typeof</span> str <span>===</span> <span>'string'</span><span>)</span><span>{</span>
		<span>return</span> <span><span>`</span><span>我叫：</span><span><span>${</span>str<span>}</span></span><span>`</span></span>
	<span>}</span><span>else</span><span>{</span>
		<span>return</span> <span><span>`</span><span>我的年龄是</span><span><span>${</span>str<span>}</span></span><span>`</span></span>
	<span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ol>
]]></content>
    <published>2022-07-31T09:25:53.000Z</published>
  </entry>
  <entry>
    <title type="html">泛型</title>
    <id>https://brysonlin.github.io/blog/blog/code/language/typescript/genericity.html</id>
    <link href="https://brysonlin.github.io/blog/blog/code/language/typescript/genericity.html"/>
    <updated>2022-07-31T09:25:53.000Z</updated>
    <content type="html"><![CDATA[<p>一、泛型的概念：</p>
<div><p>提示</p>
<ul>
<li>
<p>软件工程中，我们不仅要创建一致的定义良好的 API，同时也要考虑可重用性。组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。</p>
</li>
<li>
<p>在像 C# 和 Java 这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类的数据。这样用户就可以以自己的数据类型来使用组件。</p>
</li>
<li>
<p>通俗理解：<strong>泛型就是解决 类 接口 方法的复用性、以及对不特定数据类型的支持。</strong></p>
</li>
</ul>
</div>
<h2 id="二、泛型函数" tabindex="-1"> 二、泛型函数</h2>
<ol>
<li>
<div><pre><code><span>// 泛型：可以支持不特定的数据类型  要求：传入的参数和返回的的参数一致</span>
<span>// T表示泛型，具体什么类型是调用这个方法的时候决定的</span>
	<span>function</span> <span><span>getData</span><span><span>&lt;</span><span>T</span><span>></span></span></span><span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>T</span><span>{</span>
		<span>return</span> value<span>;</span>
	<span>}</span>
	<span><span>getData</span><span><span>&lt;</span><span>number</span><span>></span></span></span><span>(</span><span>123</span><span>)</span>

	<span>function</span> <span><span>getData</span><span><span>&lt;</span><span>T</span><span>></span></span></span><span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>any</span><span>{</span>
		<span>return</span> value<span>;</span>
	<span>}</span>
	<span><span>getData</span><span><span>&lt;</span><span>number</span><span>></span></span></span><span>(</span><span>123</span><span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ol>
<h2 id="三、泛型类" tabindex="-1"> 三、泛型类</h2>
<ol>
<li>
<p>泛型类：比如有个最小堆算法，需要同时支持返回数字和字符串你两种类型。通过类的泛型来实现</p>
<div><pre><code><span>class</span> <span>MinClass<span>&lt;</span><span>T</span><span>></span></span> <span>{</span>
  <span>public</span> list<span>:</span> <span>T</span><span>[</span><span>]</span> <span>=</span> <span>[</span><span>]</span><span>;</span>
  <span>add</span><span>(</span>num<span>:</span> <span>T</span><span>)</span><span>:</span> <span>T</span><span>[</span><span>]</span><span>{</span>
    <span>this</span><span>.</span>list<span>.</span><span>push</span><span>(</span>num<span>)</span>
    <span>return</span> <span>this</span><span>.</span>list
  <span>}</span>
  <span>minNum</span><span>(</span><span>)</span><span>:</span><span>T</span><span>{</span>
    <span>let</span> min <span>=</span> <span>this</span><span>.</span>list<span>[</span><span>0</span><span>]</span><span>;</span>
    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>this</span><span>.</span>list<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      <span>const</span> element <span>=</span> <span>this</span><span>.</span>list<span>[</span>i<span>]</span><span>;</span>
      <span>if</span> <span>(</span>min <span>></span> element<span>)</span> <span>{</span>
        min <span>=</span> element
      <span>}</span>
    <span>}</span>
    <span>return</span> min
  <span>}</span>
<span>}</span>
<span>let</span> person <span>=</span> <span>new</span> <span>MinClass<span>&lt;</span><span>string</span><span>></span></span><span>(</span><span>)</span><span>;</span>		<span>// 实例化类，并且证明类的泛型是number </span>
<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span><span>add</span><span>(</span><span>'a'</span><span>)</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span><span>add</span><span>(</span><span>'c'</span><span>)</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span><span>add</span><span>(</span><span>'e'</span><span>)</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span><span>minNum</span><span>(</span><span>)</span><span>)</span><span>;</span>			
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ol>
<h2 id="四、泛型接口" tabindex="-1"> 四、泛型接口</h2>
<ol>
<li>
<div><pre><code><span>// 泛型接口</span>
<span>interface</span> <span>ConfigFn</span><span>{</span>
	<span>&lt;</span><span>T</span><span>></span><span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>T</span><span>;</span>
<span>}</span>
<span>let</span> getData<span>:</span><span>ConfigFn</span> <span>=</span> <span>function</span><span>&lt;</span><span>T</span><span>></span><span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>T</span><span>{</span>
	<span>return</span> value<span>;</span>
<span>}</span>
<span><span>getData</span><span><span>&lt;</span><span>string</span><span>></span></span></span><span>(</span><span>'张三'</span><span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
<li>
<div><pre><code><span>// 泛型接口</span>
<span>interface</span> <span>ConfigFn<span>&lt;</span><span>T</span><span>></span></span><span>{</span>
	<span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>T</span><span>;</span>
<span>}</span>
<span>function</span> <span><span>getData</span><span><span>&lt;</span><span>T</span><span>></span></span></span><span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>T</span><span>{</span>
	<span>return</span> value<span>;</span>
<span>}</span>
<span>let</span> myGetData<span>:</span>ConfigFn<span>&lt;</span><span>string</span><span>></span> <span>=</span> getData<span>;</span>
<span>myGetData</span><span>(</span><span>'张三'</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ol>
<h2 id="五、typescript-泛型类-把类作为参数类型的泛型类" tabindex="-1"> 五、TypeScript 泛型类 把类作为参数类型的泛型类</h2>
<div><pre><code><span>// 操作数据库的泛型类</span>
calss MysqlDb<span>&lt;</span><span>T</span><span>></span><span>{</span>
	<span>add</span><span>(</span>info<span>:</span><span>T</span><span>)</span><span>:</span><span>boolean</span><span>{</span>
		<span>console</span><span>.</span><span>log</span><span>(</span>info<span>)</span><span>;</span>
		<span>return</span> <span>true</span>
	<span>}</span>
<span>}</span>

<span>//1、定义一个User类和数据库进行映射</span>

<span>class</span> <span>User</span><span>{</span>
    username<span>:</span><span>string</span> <span>|</span> <span>undefined</span><span>;</span>
    pasword<span>:</span><span>string</span> <span>|</span> <span>undefined</span><span>;</span>
<span>}</span>
<span>var</span> u <span>=</span> <span>new</span> <span>User</span><span>(</span><span>)</span><span>;</span>
u<span>.</span>username <span>=</span> <span>'张三'</span>；
u<span>.</span>password <span>=</span> <span>'123456'</span><span>;</span>
<span>var</span> Db <span>=</span> <span>new</span> <span>MysqlDb<span>&lt;</span>User<span>></span></span><span>(</span><span>)</span><span>;</span>
Db<span>.</span><span>add</span><span>(</span>u<span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="六、统一封装-mysql、mssql、mongodb" tabindex="-1"> 六、统一封装 Mysql、Mssql、mongodb</h2>
<ol>
<li>功能：定义一个操作数据库的库  支持 Mysql Mssql MongoDb</li>
<li>要求：Mysql Mssql MongoDb 功能一样 都有 add  update delete get方法</li>
<li>注意：约束统一的规范、以及代码重用</li>
<li>解决方案：需要约束规范所以要定义接口，需要代码重用所以用到泛型
<ol>
<li>接口：在面向对象的编程中，接口时一种规范的定义，它定义了行为和动作的归覅能否</li>
<li>泛型 通俗理解：泛型就是解决 类 接口 方法的复用性。</li>
</ol>
</li>
</ol>
<div><pre><code><span>interface</span> <span><span>DBI</span><span>&lt;</span><span>T</span><span>></span></span><span>{</span>
    <span>add</span><span>(</span>info<span>:</span><span>T</span><span>)</span><span>:</span><span>boolean</span><span>;</span>
    <span>update</span><span>(</span>info<span>:</span><span>T</span><span>,</span>di<span>:</span><span>number</span><span>)</span><span>:</span><span>boolean</span><span>;</span>
    <span>delete</span><span>(</span>id<span>:</span><span>number</span><span>)</span><span>:</span><span>boolean</span><span>;</span>
    <span>get</span><span>(</span>id<span>:</span><span>number</span><span>)</span><span>:</span><span>any</span><span>[</span><span>]</span><span>;</span>
<span>}</span>
<span>// 定义一个操作mysql数据库的类     注意：要实现泛型接口 这个类也应该是一个泛型类</span>
<span>class</span> <span>MysqlDb<span>&lt;</span><span>T</span><span>></span></span> <span>implements</span> <span><span>DBI</span><span>&lt;</span><span>T</span><span>></span></span><span>{</span>
  <span>add</span><span>(</span>info<span>:</span> <span>T</span><span>)</span><span>:</span> <span>boolean</span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span>info<span>)</span>
    <span>return</span> <span>true</span>
  <span>}</span>
  <span>update</span><span>(</span>info<span>:</span> <span>T</span><span>,</span> di<span>:</span> <span>number</span><span>)</span><span>:</span> <span>boolean</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>"Method not implemented."</span><span>)</span><span>;</span>
  <span>}</span>
  <span>delete</span><span>(</span>id<span>:</span> <span>number</span><span>)</span><span>:</span> <span>boolean</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>"Method not implemented."</span><span>)</span><span>;</span>
  <span>}</span>
  <span>get</span><span>(</span>id<span>:</span> <span>number</span><span>)</span><span>:</span> <span>any</span><span>[</span><span>]</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>"Method not implemented."</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
<span>class</span> <span>User</span><span>{</span>
    userName<span>:</span> <span>string</span> <span>|</span> <span>undefined</span><span>;</span>
    password<span>:</span> <span>string</span> <span>|</span> <span>undefined</span><span>;</span>
<span>}</span>
<span>let</span> person <span>=</span> <span>new</span> <span>User</span><span>(</span><span>)</span><span>;</span>
person<span>.</span>userName <span>=</span> <span>'linxing'</span><span>;</span>
person<span>.</span>password <span>=</span> <span>'123456'</span>

<span>let</span> OMysqlDb <span>=</span> <span>new</span> <span>MysqlDb<span>&lt;</span>User<span>></span></span><span>(</span><span>)</span>
OMysqlDb<span>.</span><span>add</span><span>(</span>person<span>)</span><span>;</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>]]></content>
    <published>2022-07-31T09:25:53.000Z</published>
  </entry>
  <entry>
    <title type="html">接口</title>
    <id>https://brysonlin.github.io/blog/blog/code/language/typescript/interface.html</id>
    <link href="https://brysonlin.github.io/blog/blog/code/language/typescript/interface.html"/>
    <updated>2022-07-31T09:25:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一、typescrip中的接口" tabindex="-1"> 一、TypeScrip中的接口</h2>
<div><p>提示</p>
<ul>
<li>
<ol>
<li>接口的作用：<code>在面向对象的编程中，接口时一种规范的定义，它定义了行为和动作的规范，在程序设计里面，接口起到一种限制和规范的作用。</code>接口定义了某一批类所需要遵守的规范，接口不关心这些类的内部状态数据，也不关心这些类里方法的实现细节，它只规定这批类里必须提供某些方法，提供这些方法的类就可以满足实际需要。typescript 中的接口类似于 java ，同时还增加了更灵活的接口类型，包括 <strong>属性、函数、可索引、和类</strong> 等。</li>
</ol>
</li>
<li>
<ol start="2">
<li>定义行为和动作的规范。对批量方法进行约束  interface</li>
</ol>
</li>
</ul>
</div>
<h2 id="二、属性类接口" tabindex="-1"> 二、属性类接口</h2>
<h3 id="_1-就是传入对象的约束-属性接口" tabindex="-1"> 1. 就是传入对象的约束  属性接口</h3>
<div><pre><code><span>interface</span> <span>FullName</span><span>{</span>
	firstName<span>:</span> <span>string</span><span>;</span>		<span>// 注意，分号结束</span>
	secondName<span>:</span> <span>string</span><span>;</span>
<span>}</span>
<span>function</span> <span>printName</span><span>(</span>name<span>:</span>FullName<span>)</span><span>{</span>
	<span>// 必须传入firstName  secondName</span>
    <span>console</span><span>.</span><span>log</span><span>(</span>name<span>.</span>firstName <span>+</span> name<span>.</span>secondName<span>)</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="_2-可选接口" tabindex="-1"> 2. 可选接口</h3>
<div><pre><code><span>interface</span> <span>FullName</span><span>(</span><span>)</span><span>{</span>
	firstName<span>:</span> <span>string</span><span>;</span>
	secondName<span>?</span><span>:</span><span>string</span>
<span>}</span>
<span>function</span> <span>getName</span><span>(</span>name<span>:</span>FullName<span>)</span><span>{</span>
	<span>console</span><span>.</span><span>log</span><span>(</span>name<span>)</span>
<span>}</span>
<span>// 参数的顺序可以不一样</span>
<span>getName</span><span>(</span><span>{</span>
	firstName<span>:</span><span>'linxing'</span><span>;</span>
	secondName<span>:</span><span>'liner'</span>
<span>}</span><span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="_3-示例" tabindex="-1"> 3. 示例</h3>
<div><pre><code><span>interface</span> <span>Config</span><span>{</span>
	type<span>:</span> <span>string</span><span>;</span>
	url<span>:</span> <span>string</span><span>;</span>
	data<span>?</span><span>:</span> <span>string</span><span>;</span>
	dataType<span>:</span> <span>string</span>
<span>}</span>
<span>function</span> <span>ajax</span><span>(</span> config<span>:</span> Config <span>)</span><span>{</span>
    <span>var</span> xhr <span>=</span> <span>new</span> <span>XMLHttpRequest</span><span>(</span><span>)</span><span>;</span>
    xhr<span>.</span><span>open</span><span>(</span> config<span>.</span>get<span>,</span> config<span>.</span>url<span>,</span> <span>true</span><span>)</span><span>;</span>
    xhr<span>.</span><span>send</span><span>(</span>config<span>.</span>data<span>)</span><span>;</span>
    xhr<span>.</span><span>onreadystatechange</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span>
        <span>if</span><span>(</span>xhr<span>.</span>readyState <span>===</span> <span>4</span> <span>&amp;&amp;</span> xhr<span>.</span>status <span>==</span> <span>200</span><span>)</span><span>{</span>
            <span>if</span><span>(</span>confiig<span>.</span>dataType <span>==</span> <span>'json'</span><span>)</span><span>{</span>
                <span>JSON</span><span>.</span><span>perse</span><span>(</span>xhr<span>.</span>responseText<span>)</span>
            <span>}</span><span>else</span><span>{</span>
                <span>console</span><span>.</span><span>log</span><span>(</span>xhr<span>.</span>reponseText<span>)</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
<span>ajax</span><span>(</span><span>{</span>
    type<span>:</span><span>'get'</span><span>,</span>
    data<span>:</span><span>'name:zhang'</span><span>,</span>
    url<span>:</span> <span>'http://www.baidu.com'</span><span>,</span>
    dataType<span>:</span><span>'json'</span>
<span>}</span><span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="三、函数类接口" tabindex="-1"> 三、函数类接口</h2>
<h3 id="_1-函数类型接口-对方法传入的参数-以及返回值进行约束-批量约束" tabindex="-1"> 1. 函数类型接口：对方法传入的参数 以及返回值进行约束  批量约束</h3>
<h3 id="_2-加密的函数类型接口" tabindex="-1"> 2. 加密的函数类型接口</h3>
<div><pre><code><span>interface</span> <span>encrypt</span><span>{</span>
	<span>(</span>key<span>:</span><span>string</span><span>,</span>value<span>:</span><span>string</span><span>)</span><span>:</span><span>string</span><span>;</span>
<span>}</span>
<span>var</span> md5<span>:</span><span>encrypt</span> <span>=</span> <span>function</span> <span>(</span>key<span>:</span><span>string</span><span>,</span>value<span>:</span><span>string</span><span>)</span><span>:</span> <span>string</span><span>{</span>
	<span>// 模拟操作</span>
	<span>return</span> key <span>+</span> name
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="四、可索引接口" tabindex="-1"> 四、可索引接口</h2>
<h3 id="_1-可索引接口-对数组、对象的约束-不常用" tabindex="-1"> 1. 可索引接口：对数组、对象的约束（不常用）</h3>
<h3 id="_2-数组的约束" tabindex="-1"> 2. 数组的约束</h3>
<div><pre><code><span>interface</span> <span>UserArr</span><span>{</span>
	<span>[</span>index<span>:</span><span>number</span><span>]</span><span>:</span><span>string</span>
<span>}</span>
<span>let</span> arr<span>:</span>UserArr <span>=</span> <span>[</span><span>'lixing'</span><span>]</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><h3 id="_3-对象的约束" tabindex="-1"> 3. 对象的约束</h3>
<div><pre><code><span>interface</span> <span>UserArr</span><span>{</span>
	<span>[</span>index<span>:</span><span>string</span><span>]</span><span>:</span><span>any</span>
<span>}</span>
<span>let</span> arr<span>:</span>UserArr <span>=</span> <span>{</span>
	name<span>:</span> <span>'张三'</span>，
	age<span>:</span> <span>23</span>	
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="五、类类型接口" tabindex="-1"> 五、类类型接口</h2>
<h3 id="_1-类类型接口-对类的约束-和-抽象类比较相似" tabindex="-1"> 1. 类类型接口：对类的约束 和 抽象类比较相似</h3>
<div><pre><code><span>interface</span> <span>Animal</span><span>{</span>
  name<span>:</span><span>string</span><span>;</span>
  <span>eat</span><span>(</span>str<span>:</span><span>string</span><span>)</span><span>:</span><span>void</span>
<span>}</span>

<span>class</span> <span>Dog</span> <span>implements</span> <span>Animal</span><span>{</span>
  name<span>:</span><span>string</span><span>;</span>
  <span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>
    <span>this</span><span>.</span>name <span>=</span> name
  <span>}</span>
  <span>eat</span><span>(</span><span>)</span><span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>'小黑吃粮食！'</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
<span>let</span> p <span>=</span> <span>new</span> <span>Dog</span><span>(</span><span>'小黑'</span><span>)</span><span>;</span>
p<span>.</span><span>eat</span><span>(</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="六、接口扩展-接口可继承接口" tabindex="-1"> 六、接口扩展 接口可继承接口</h2>
<div><pre><code><span>interface</span> <span>Animal</span><span>{</span>
  <span>eat</span><span>(</span>foot<span>:</span><span>string</span><span>)</span><span>:</span><span>string</span><span>;</span>
<span>}</span>
<span>interface</span> <span>Web</span> <span>extends</span> <span>Animal</span><span>{</span>
  <span>work</span><span>(</span><span>)</span><span>:</span><span>void</span><span>;</span>
<span>}</span>

<span>class</span> <span>Person</span> <span>implements</span> <span>Web</span><span>{</span>
  <span>public</span> name<span>:</span><span>string</span><span>;</span>
  <span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>
    <span>this</span><span>.</span>name <span>=</span> name
  <span>}</span>
  <span>eat</span><span>(</span>foot<span>:</span><span>string</span><span>)</span><span>{</span>
    <span>return</span> <span><span>`</span><span><span>${</span><span>this</span><span>.</span>name<span>}</span></span><span>吃</span><span><span>${</span>foot<span>}</span></span><span>`</span></span>
  <span>}</span>
  <span>work</span><span>(</span><span>)</span><span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span><span>`</span><span><span>${</span><span>this</span><span>.</span>name<span>}</span></span><span>敲代码</span><span>`</span></span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
<span>let</span> p <span>=</span> <span>new</span> <span>Person</span><span>(</span><span>'小林'</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span>p<span>.</span><span>eat</span><span>(</span><span>'粮食'</span><span>)</span><span>)</span><span>;</span>
p<span>.</span><span>work</span><span>(</span><span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>]]></content>
    <published>2022-07-31T09:25:53.000Z</published>
  </entry>
  <entry>
    <title type="html">Markdown</title>
    <id>https://brysonlin.github.io/blog/blog/code/language/markdown/</id>
    <link href="https://brysonlin.github.io/blog/blog/code/language/markdown/"/>
    <updated>2022-07-31T03:44:49.000Z</updated>
    <summary type="html"><![CDATA[<p>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
]]></summary>
    <content type="html"><![CDATA[<p>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>

<p>Markdown 的目标是实现「易读易写」。</p>
<p>Markdown 的主要目的是用来作为一种网络内容的<strong>写作用语言</strong>。</p>
]]></content>
    <category term="Markdown" scheme=""/>
    <published>2022-07-31T03:23:32.000Z</published>
  </entry>
  <entry>
    <title type="html">Markdown Emoji 列表</title>
    <id>https://brysonlin.github.io/blog/blog/code/language/markdown/emoji/</id>
    <link href="https://brysonlin.github.io/blog/blog/code/language/markdown/emoji/"/>
    <updated>2022-07-31T03:44:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="人物" tabindex="-1"> 人物</h2>
<ul>
<li><a href="/code/language/markdown/emoji/people.html">点击前往</a></li>
</ul>
<h2 id="自然" tabindex="-1"> 自然</h2>
<ul>
<li><a href="/code/language/markdown/emoji/nature.html">点击前往</a></li>
</ul>
<h2 id="对象" tabindex="-1"> 对象</h2>
<ul>
<li><a href="/code/language/markdown/emoji/object.html">点击前往</a></li>
</ul>
<h2 id="地点" tabindex="-1"> 地点</h2>
<ul>
<li><a href="/code/language/markdown/emoji/place.html">点击前往</a></li>
</ul>
<h2 id="符号" tabindex="-1"> 符号</h2>
<ul>
<li><a href="/code/language/markdown/emoji/symbol.html">点击前往</a></li>
</ul>
]]></content>
    <category term="Markdown" scheme=""/>
    <published>2022-07-31T03:23:32.000Z</published>
  </entry>
  <entry>
    <title type="html">书籍文档</title>
    <id>https://brysonlin.github.io/blog/blog/books/</id>
    <link href="https://brysonlin.github.io/blog/blog/books/"/>
    <updated>2022-07-24T08:04:21.000Z</updated>
    <summary type="html"><![CDATA[<p>前端程序员必看书籍</p>
]]></summary>
    <content type="html"><![CDATA[<p>前端程序员必看书籍</p>

<h2 id="书籍列表" tabindex="-1"> 书籍列表</h2>
<h3 id="javascript" tabindex="-1"> JavaScript</h3>
<ul>
<li>
<p><a href="/books/little-red-book(v4).html">JavaScript高级程序设计（第4版）</a></p>
</li>
<li>
<p><a href="/books/js-object-oriented.html">JavaScrip面向对象编程指南（第二版）</a></p>
</li>
<li>
<p><a href="/books/js-dom-programming-art.html">JavaScript DOM编程艺术(第2版)</a></p>
</li>
<li>
<p><a href="/books/js-definitive-guide.html">JavaScript 权威指南（第四版）</a></p>
</li>
</ul>
<h3 id="css" tabindex="-1"> CSS</h3>
<ul>
<li><a href="/books/css-definitive-guide.html">CSS权威指南 （第3版）</a></li>
</ul>
]]></content>
    <category term="书籍" scheme=""/>
    <published>2020-10-05T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">代码笔记</title>
    <id>https://brysonlin.github.io/blog/blog/code/</id>
    <link href="https://brysonlin.github.io/blog/blog/code/"/>
    <updated>2022-07-22T07:01:38.000Z</updated>
    <summary type="html"><![CDATA[<p>此处是 Mr.BrysonLin 存放的一些代码笔记。</p>
]]></summary>
    <content type="html"><![CDATA[<p>此处是 Mr.BrysonLin 存放的一些代码笔记。</p>

<h2 id="目录" tabindex="-1"> 目录</h2>
<h3 id="基础" tabindex="-1"> 基础</h3>
<ul>
<li>
<p><a href="/code/basic/">基础知识</a></p>
</li>
<li>
<p><a href="/code/github/">GitHub 介绍</a></p>
</li>
</ul>
<h3 id="前端开发" tabindex="-1"> 前端开发</h3>
<ul>
<li>
<p><a href="/code/vue/">Vue 相关</a></p>
</li>
<li>
<p><a href="/code/react/">React</a></p>
</li>
<li>
<p><a href="/code/nodejs/">NodeJS</a></p>
</li>
</ul>
<h3 id="代码学习" tabindex="-1"> 代码学习</h3>
<ul>
<li>
<p><a href="/code/language/js/">JavaScript 教程</a></p>
</li>
<li>
<p><a href="/code/language/typescript/">TypeScript 教程</a></p>
</li>
<li>
<p><a href="/code/language/markdown/">Markdown 教程</a></p>
</li>
</ul>
<h3 id="代码学习网站" tabindex="-1"> 代码学习网站</h3>
<h3 id="优质网站" tabindex="-1"> 优质网站</h3>
<ul>
<li>
<p><a href="https://www.code-nav.cn/" target="_blank" rel="noopener noreferrer">编程导航</a></p>
</li>
<li>
<p><a href="http://nav.poetries.top/" target="_blank" rel="noopener noreferrer">前端导航</a></p>
</li>
<li>
<p><a href="https://www.frontendjs.com/" target="_blank" rel="noopener noreferrer">前站导航</a></p>
</li>
<li>
<p><a href="https://www.cxy521.com/" target="_blank" rel="noopener noreferrer">CXY521</a></p>
</li>
<li>
<p><a href="http://www.atguigu.com/download.shtml" target="_blank" rel="noopener noreferrer">尚硅谷</a></p>
</li>
<li>
<p><a href="https://wangdoc.com/" target="_blank" rel="noopener noreferrer">网道</a></p>
</li>
<li>
<p><a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener noreferrer">廖雪峰的网站</a></p>
</li>
<li>
<p><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener noreferrer">MDN</a></p>
</li>
</ul>
]]></content>
    <published>2022-07-22T07:01:38.000Z</published>
  </entry>
</feed>