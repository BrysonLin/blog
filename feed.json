{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "林初笔墨",
  "home_page_url": "https://brysonlin.github.io/blog/blog/",
  "feed_url": "https://brysonlin.github.io/blog/blog/feed.json",
  "description": "林初笔墨,林初笔墨的博客,Web前端博客,前端博客,Web全栈技术博客,前端工程师博客",
  "items": [
    {
      "title": "TypeScirpt中的类",
      "url": "https://brysonlin.github.io/blog/blog/code/language/typescript/class.html",
      "id": "https://brysonlin.github.io/blog/blog/code/language/typescript/class.html",
      "content_html": "<div><pre><code> // 构造函数\n\n  function Person(name,age){\n\n   this.name = name;\n\n    this.age = age;*\n\n   this.sayHei=function(){\n\n    console.log(`我的名字叫${this.name}，今年：${this.age}`);\n\n   }*\n\n  }\n\n // 原型上增加方法\n\n   Person.prototype.sex = function(){\n\n    console.log('我正在被共享！');\n\n   }\n\n   // 静态方法\n\n  Person.printName = function(){*\n\n    console.log(this.name);*\n\n   }\n\n  // let person1 = new Person('linxing',18);\n\n\n\n  // 对象冒充继承  可以继承属性和方法传参 没法继承原型链和静态方法\n\n   function Web(){\n\n   Person.call(this，传参)\n\n   }\n\n   // 原型链继承 可以继承属性和方法也可以继承原型链上的属性和方法  没法传参\n\n   Web.prototype = new Person();*\n\n   let v = new Web();\n\n   v.sayHei();\n\n  // 原型链和对象冒充函数继承属性和方法\n\n   function Web(name,age){\n\n    Person.call(this,name,age)\n\n  }\n\n  // Webj.prototype = Person.prototype;\n\n  \n\n   // 用对象冒充（盗用构造函数）去继承父类的属性和方法 Person.call(thsi, params)\n\n   // 用原型链去继承父类的原型上的方法  web.prototype = new Person    web.prototype = Person.prototype\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"一、typescript-中的类\" tabindex=\"-1\"> 一、TypeScript 中的类</h2>\n<div><pre><code><span>class</span> <span>Person</span><span>{</span>\n\tname<span>:</span><span>string</span><span>;</span>\n\t<span>constructor</span><span>(</span>name<span>:</span> <span>string</span><span>)</span><span>{</span>\t\t\t<span>// 构造函数  实例化类的时候触发的方法</span>\n\t\t<span>this</span><span>.</span>name <span>=</span> name<span>;</span>\n\t<span>}</span>\n    <span>getName</span><span>(</span><span>)</span><span>:</span> <span>string</span><span>{</span>\n        <span>return</span> <span>this</span><span>.</span>name\n    <span>}</span>\n    <span>setName</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>:</span>viod <span>{</span>\n        <span>this</span><span>.</span>name <span>=</span> name<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"二、typescript-中类继承-extends、super\" tabindex=\"-1\"> 二、TypeScript 中类继承：extends、super</h2>\n<div><pre><code><span>class</span> <span>Person</span><span>{</span>\n\tname<span>:</span><span>string</span><span>;</span>\n\t<span>constructor</span><span>(</span>name<span>:</span> <span>string</span><span>)</span><span>{</span>\t\t\t<span>// 构造函数  实例化类的时候触发的方法</span>\n\t\t<span>this</span><span>.</span>name <span>=</span> name<span>;</span>\n\t<span>}</span>\n    <span>getName</span><span>(</span><span>)</span><span>:</span> <span>string</span><span>{</span>\n        <span>return</span> <span>this</span><span>.</span>name\n    <span>}</span>\n    <span>setName</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>:</span>viod <span>{</span>\n        <span>this</span><span>.</span>name <span>=</span> name<span>;</span>\n    <span>}</span>\n<span>}</span>\n定义 web 类来继承 Person 类\n<span>class</span> <span>Web</span> <span>extends</span> <span>Person</span><span>{</span>\n\t<span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>\n\t\t<span>super</span><span>(</span>name<span>)</span>\t\t\t\t\t\t<span>// 初始化父类的构造函数\t\t\t\t</span>\n\t<span>}</span>\n<span>}</span>\n<span>let</span> w <span>=</span> <span>new</span> <span>Web</span><span>(</span><span>'李四'</span><span>)</span>；\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"三、typescript类里面的修饰符\" tabindex=\"-1\"> 三、TypeScript类里面的修饰符</h2>\n<ol>\n<li>TypeScript 里面定义了属性的时候给我们提供了三种修饰符\n<ol>\n<li>public：公有         \t\t\t\t\t\t\t\t\t\t\t在类里面、子类、类外都可以访问</li>\n<li>protected：保护类型  \t\t\t\t\t\t\t\t\t在类里面、子类里面可以访问，在类外部没法访问</li>\n<li>private：私有\t\t                                           在类里面可以访问，子类、类外部都没法访问</li>\n</ol>\n</li>\n<li>属性不加修饰符：默认代表共有属性，public</li>\n</ol>\n<div><pre><code>class Person{\n\tpublic name:string;\n\tconstructor(name: string){\t\t\t// 构造函数  实例化类的时候触发的方法\n\t\tthis.name = name;\n\t}\n    getName(): string{\n        return this.name\n    }\n    setName(name:string):viod {\n        this.name = name;\n    }\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"一、typescript中类的静态属性、静态方法、抽象类、多态\" tabindex=\"-1\"> 一、TypeScript中类的静态属性、静态方法、抽象类、多态</h2>\n<ol>\n<li>\n<p>es5中的静态属性、静态方法</p>\n<div><pre><code><span>function</span> <span>Person</span><span>(</span><span>)</span><span>{</span><span>}</span>\nPerson<span>.</span>name <span>=</span> <span>'linxing'</span><span>;</span>\t\t<span>// 静态属性</span>\nPerson<span>.</span><span>sayName</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span> console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>name<span>)</span> <span>}</span>  <span>// 静态方法</span>\n\n\nJquery\n<span>$</span><span>(</span><span>.</span>box<span>)</span><span>.</span><span>css</span><span>(</span><span>)</span><span>;</span>\n<span>function</span> <span>$</span><span>(</span><span>el</span><span>)</span><span>{</span>    <span>return</span> <span>Base</span><span>(</span>el<span>)</span><span>}</span>\n<span>Base</span><span>(</span><span>)</span><span>{</span>   <span>this</span><span>.</span>css <span>=</span> <span>'获取DOM节点'</span><span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n<li>\n<p>TypeScript中静态属性、静态方法</p>\n<div><pre><code><span>class</span> <span>Person</span><span>{</span>\n\t<span>public</span> name<span>:</span> <span>string</span>\n\t<span>static</span> age<span>:</span> <span>number</span>\n\t<span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>\n\t\t<span>this</span><span>.</span>name <span>=</span> name\n\t<span>}</span>\n\t<span>sayName</span><span>(</span><span>)</span><span>{</span>\t\t<span>// 实例方法</span>\n\t\t\n\t<span>}</span>\n\t<span>static</span> <span>print</span><span>(</span><span>)</span><span>{</span>\t\t<span>// 在静态方法里面不能使用this</span>\n\t\t<span>console</span><span>.</span><span>log</span><span>(</span><span>'我这是静态方法'</span><span>)</span>\n\t<span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n<li>\n<p>多态方法</p>\n<ol>\n<li>父类定义一个方法不去实现，让继承它的子类去实现  每一个子类有不同的表现</li>\n<li>多态属于继承</li>\n</ol>\n<div><pre><code><span>class</span> <span>Animal</span><span>{</span>\n\tname<span>:</span> <span>string</span>\n\t<span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>\n\t\t<span>this</span><span>.</span>name <span>=</span> name\n\t<span>}</span>\n\t<span>eat</span><span>(</span><span>)</span><span>{</span>\t\t\t\t\t\t\t<span>// 定义了一个方法不去实现，让子类去实现</span>\n\t\t<span>console</span><span>.</span><span>log</span><span>(</span><span>'我是吃的方法'</span><span>)</span>\n\t<span>}</span>\n<span>}</span>\n<span>class</span> <span>Dog</span> <span>extends</span> <span>Animal</span><span>{</span>\n\t<span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>\n\t\t<span>super</span><span>(</span>name<span>)</span>\n\t<span>}</span>\n\t<span>eat</span><span>(</span><span>)</span><span>{</span>\t\t\t\t\t\t\t<span>// 这就是多态， 继承重写了父类方法</span>\n\t\t<span>console</span><span>.</span><span>log</span><span>(</span><span>'小狗吃粮食'</span><span>)</span>\n\t<span>}</span>\n<span>}</span>\n<span>class</span> <span>Cat</span> <span>extends</span> <span>Animal</span> <span>{</span>\n\t<span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>\n\t\t<span>super</span><span>(</span>name<span>)</span>\n\t<span>}</span>\n\t<span>eat</span><span>(</span><span>)</span><span>{</span>\n\t\t<span>console</span><span>.</span><span>log</span><span>(</span><span>'吃老鼠'</span><span>)</span>\n\t<span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n<li>\n<p>抽象方法</p>\n<ol>\n<li>typeScript 中的抽象类：它是提供其他类继承的基类，不能直接被实例化。</li>\n<li>用 abstract 关键字定义抽象类和抽象方法，抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。</li>\n<li>abstract 方法只能放在抽象类里面</li>\n<li>抽象类和抽象方法用来定义标准，标准：Animal 这个类要求它的子类必须包含 eat 方法</li>\n</ol>\n<div><pre><code><span>abstract</span> <span>class</span> <span>Animal</span><span>{</span>\t\t\t\t<span>// 父类定义，子类必须实现</span>\n    <span>public</span> names<span>:</span> <span>string</span>\n    <span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span> <span>{</span> \n        <span>this</span><span>.</span>names <span>=</span> name<span>;</span>\n    <span>}</span>\n\t<span>abstract</span> <span>eat</span><span>(</span><span>)</span><span>:</span><span>any</span><span>;</span>\n<span>}</span>\n<span>// let p = new Animal()  错误：无法定义抽象类</span>\n\n<span>class</span> <span>Dog</span> <span>extends</span> <span>Animal</span><span>{</span>\n  <span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>\n    <span>super</span><span>(</span>name<span>)</span>\n  <span>}</span>\n  <span>eat</span><span>(</span><span>)</span><span>{</span>\n    <span>console</span><span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>names <span>+</span> <span>'吃'</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n</ol>\n",
      "date_published": "2022-07-31T09:25:53.000Z",
      "date_modified": "2022-07-31T09:25:53.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "TypeScirpt的数据类型",
      "url": "https://brysonlin.github.io/blog/blog/code/language/typescript/data-type.html",
      "id": "https://brysonlin.github.io/blog/blog/code/language/typescript/data-type.html",
      "content_html": "<h2 id=\"一、typescript-中为了使编写的代码更规范-更有利于维护-增加了类型校验。\" tabindex=\"-1\"> 一、TypeScript 中为了使编写的代码更规范，更有利于维护，增加了类型校验。</h2>\n<ul>\n<li>\n<p>布尔类型（boolean）</p>\n</li>\n<li>\n<p>数字类型（number）</p>\n</li>\n<li>\n<p>字符串类型（string）</p>\n</li>\n<li>\n<p>数组类型（array）</p>\n</li>\n<li>\n<p>元组类型（tuple）</p>\n</li>\n<li>\n<p>枚举类型（enum）</p>\n</li>\n<li>\n<p>任意类型（any）</p>\n</li>\n<li>\n<p>null 和 undefined</p>\n</li>\n<li>\n<p>void 类型</p>\n</li>\n<li>\n<p>never 类型</p>\n</li>\n<li>\n<p>对象</p>\n</li>\n<li>\n<p>unknown(一种保护类型的any)</p>\n</li>\n<li>\n<p>类型的别名</p>\n<div><pre><code><span>// 类型的别名</span>\n<span>type</span> <span>Mytype</span> <span>=</span> <span>1</span><span>|</span><span>2</span><span>|</span><span>3</span><span>|</span><span>4</span><span>|</span><span>5</span><span>;</span>\n<span>let</span> num<span>:</span>Mytype\n<span>let</span> num1<span>:</span>Mytype\n<span>let</span> num2<span>:</span>Mytype\n\n\nnum <span>=</span> <span>8</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n</ul>\n<h2 id=\"二、定义类型示例\" tabindex=\"-1\"> 二、定义类型示例</h2>\n<ol>\n<li>\n<p>布尔类型（boolean）</p>\n<div><pre><code><span>let</span> bool<span>:</span> <span>boolean</span> <span>=</span> <span>true</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div></li>\n<li>\n<p>数字类型 （number）</p>\n<div><pre><code><span>let</span> num<span>:</span> <span>number</span> <span>=</span> <span>11</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div></li>\n<li>\n<p>字符串类型（string）</p>\n<div><pre><code><span>let</span> str<span>:</span> <span>string</span> <span>=</span> <span>'lin'</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div></li>\n<li>\n<p>数组类型(Array)</p>\n<div><pre><code><span>// 第一种定义方式</span>\n<span>let</span> arr<span>:</span> <span>string</span><span>[</span><span>]</span> <span>=</span> <span>[</span><span>'lin'</span><span>,</span><span>'xing'</span><span>]</span><span>;</span>\n<span>// 第二种定义方式: 泛型</span>\n<span>let</span> arr<span>:</span> <span>Array</span><span>&lt;</span><span>string</span><span>></span> <span>=</span> <span>[</span><span>'lin'</span><span>,</span><span>'xing'</span><span>]</span><span>;</span>\n<span>// 第三种类型：</span>\n<span>let</span> arr<span>:</span> <span>any</span><span>[</span><span>]</span> <span>=</span> <span>[</span><span>'linxing'</span><span>,</span> <span>123</span><span>,</span> <span>false</span><span>]</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n<li>\n<p>元组类型 (tuple)</p>\n<div><pre><code><span>let</span> tup<span>:</span> <span>[</span><span>string</span><span>,</span> <span>number</span><span>,</span> <span>boolean</span><span>]</span> <span>=</span> <span>[</span><span>'JavaScript'</span><span>,</span> <span>110</span><span>,</span> <span>true</span><span>]</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div></li>\n<li>\n<p>枚举类型 (enum)</p>\n<div><pre><code><span>enum</span> 枚举名<span>{</span>\n\t标识符<span>[</span><span>=</span> 整型常数<span>]</span>，\n\t标识符<span>[</span><span>=</span> 整型常数<span>]</span>，\n\t<span>...</span><span>.</span>\n\t标识符<span>[</span><span>=</span> 整型常数<span>]</span>，\n<span>}</span>\n<span>enum</span> Flag<span>{</span> success <span>=</span> <span>1</span><span>,</span> error <span>=</span> <span>2</span><span>}</span><span>;</span>\n<span>let</span> f<span>:</span>Flag <span>=</span> Flag<span>.</span>success<span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>f<span>)</span><span>;</span>   <span>// 结果1</span>\n\n<span>// 默认是数字 ， 如果修改其中的一个类型不为数字，后面则必须定义，否则报错</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n<li>\n<p>任意类型 (any)</p>\n<div><pre><code><span>let</span> anyType<span>:</span> <span>any</span> <span>=</span> <span>'string'</span>\t\t\t<span>// 什么类型都能放</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div></li>\n<li>\n<p>null 和 undefined 类型</p>\n<div><pre><code><span>let</span> age<span>:</span> <span>number</span> <span>|</span> <span>undefined</span><span>;</span>\t\t\t<span>// | 或者的意思</span>\n<span>let</span> num<span>:</span> <span>number</span> <span>|</span> <span>null</span> <span>|</span> <span>undefined</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div></li>\n<li>\n<p>void 类型</p>\n<div><pre><code><span>// void 表示没有任何类型，一般用于执行方法没有返回值</span>\n<span>function</span> <span>sum</span><span>(</span>x<span>,</span> y<span>,</span><span>)</span><span>:</span> <span>void</span><span>{</span>\n    <span>let</span> num<span>:</span> <span>number</span> <span>=</span> x<span>+</span>y<span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div></li>\n<li>\n<p>never 类型</p>\n<div><pre><code><span>// never类型：是其他类型（包括 null 和 undefined ）的子类型，代表从不会出现的值。</span>\n<span>// 这意味着声明never的变量只能被never类型所赋值。</span>\n\n<span>var</span> a<span>:</span><span>undefined</span><span>;</span>\na<span>=</span><span>undefined</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div></li>\n</ol>\n",
      "date_published": "2022-07-31T09:25:53.000Z",
      "date_modified": "2022-07-31T09:25:53.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "装饰器",
      "url": "https://brysonlin.github.io/blog/blog/code/language/typescript/decorator.html",
      "id": "https://brysonlin.github.io/blog/blog/code/language/typescript/decorator.html",
      "content_html": "<h2 id=\"一、typescript中的装饰\" tabindex=\"-1\"> 一、TypeScript中的装饰</h2>\n<div><p>提示</p>\n<ol>\n<li>装饰器：装饰器是一种特殊类型1的声明，它能够被附加到类声明，方法，属性或传参上，可以修改类的行为。</li>\n<li>通俗的讲 装饰器就是一个方法，可以注入到类、方法、属性参数上来扩展类、属性、方法、参数的功能。</li>\n<li>常见的装饰器有：类装饰器、属性装饰器、方法装饰器、参数装饰器</li>\n<li>装饰器的写法：普通装饰器（无法传参）、装饰器工厂（可传参）</li>\n<li>装饰器是过去几年中 JS 最大的成就之一，已是 es7 的标准特性之一</li>\n</ol>\n</div>\n<h2 id=\"二、类装饰器\" tabindex=\"-1\"> 二、类装饰器</h2>\n<h3 id=\"_1-类装饰器-类装饰器在类声明之前被声明-紧靠着类声明-。类装饰器应用于类构造函数-可以用来监视-修改或替换类定义。传入一个参数\" tabindex=\"-1\"> 1. 类装饰器：类装饰器在类声明之前被声明（紧靠着类声明）。类装饰器应用于类构造函数，可以用来监视，修改或替换类定义。传入一个参数</h3>\n<h3 id=\"_2-普通装饰器-没有参数\" tabindex=\"-1\"> 2. 普通装饰器（没有参数）</h3>\n<div><pre><code><span>function</span> <span>logclass</span><span>(</span>parms<span>:</span><span>any</span><span>)</span><span>{</span>\n  parms<span>.</span>prototype<span>.</span><span>sayName</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n    <span>console</span><span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>name<span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n<span><span>@</span><span>logclass</span></span>\n<span>class</span> <span>Web</span> <span>{</span>\n  <span>public</span> name<span>:</span><span>string</span><span>;</span>\n  <span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>\n    <span>this</span><span>.</span>name <span>=</span> name\n  <span>}</span>\n<span>}</span>\n<span>let</span> person<span>:</span><span>any</span>  <span>=</span> <span>new</span> <span>Web</span><span>(</span><span>'linxing'</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>person<span>)</span><span>;</span>\nperson<span>.</span><span>sayName</span><span>(</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"_3-装饰器工厂-带参\" tabindex=\"-1\"> 3. 装饰器工厂（带参）</h3>\n<div><pre><code><span>// 装饰器</span>\n<span>function</span> <span>logclass</span><span>(</span>params<span>:</span><span>string</span><span>)</span><span>{</span>\n  <span>return</span> <span>function</span><span>(</span>target<span>:</span><span>any</span><span>)</span><span>{</span>\nq    target<span>.</span>prototype<span>.</span>apiUrl <span>=</span> params<span>;</span>\n  <span>}</span>\n<span>}</span>\n<span><span>@</span><span>logclass</span></span><span>(</span><span>'http://www.itying.com/api'</span><span>)</span>\n<span>class</span> <span>Web</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>)</span><span>{</span><span>}</span>\n<span>}</span>\n<span>let</span> person<span>:</span><span>any</span>  <span>=</span> <span>new</span> <span>Web</span><span>(</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span>apiUrl<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"_4-类装饰器重载-类的构造函数\" tabindex=\"-1\"> 4. 类装饰器重载 类的构造函数</h3>\n<div><pre><code><span>// 装饰器</span>\n<span>function</span> <span>logclass</span><span>(</span>target<span>:</span><span>any</span><span>)</span><span>{</span>\n  <span>console</span><span>.</span><span>log</span><span>(</span>target<span>)</span><span>;</span>\n  <span>return</span> <span>class</span> <span><span>extends</span></span> target<span>{</span>\n    apiUlr<span>:</span><span>any</span> <span>=</span> <span>'我是修改过后的数据'</span><span>;</span>\n    <span>getData</span><span>(</span><span>)</span><span>{</span>\n      <span>console</span><span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>apiUlr<span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n<span><span>@</span><span>logclass</span></span>\n<span>class</span> <span>Web</span> <span>{</span>\n  <span>public</span> apiUlr<span>:</span> <span>string</span> <span>|</span> <span>undefined</span><span>;</span>\n  <span>constructor</span><span>(</span><span>)</span><span>{</span>\n    <span>this</span><span>.</span>apiUlr <span>=</span> <span>'我是构造函数里的apiurl'</span>\n  <span>}</span>\n  <span>getData</span><span>(</span><span>)</span><span>{</span><span>}</span>\n<span>}</span>\n<span>let</span> person<span>:</span><span>any</span>  <span>=</span> <span>new</span> <span>Web</span><span>(</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span>apiUlr<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"三、属性装饰器\" tabindex=\"-1\"> 三、属性装饰器</h2>\n<blockquote>\n<p><strong>内容正在创建中……</strong></p>\n</blockquote>\n",
      "date_published": "2022-07-31T09:25:53.000Z",
      "date_modified": "2022-07-31T09:25:53.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "TypeScript函数",
      "url": "https://brysonlin.github.io/blog/blog/code/language/typescript/fn.html",
      "id": "https://brysonlin.github.io/blog/blog/code/language/typescript/fn.html",
      "content_html": "<h2 id=\"一、typescript函数\" tabindex=\"-1\"> 一、TypeScript函数</h2>\n<ol>\n<li>\n<p>es5中定义方法</p>\n<div><pre><code><span>// 函数声明式</span>\n<span>function</span> <span>sun</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>;</span>\n<span>// 匿名函数</span>\n<span>let</span> <span>person</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span><span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div></li>\n<li>\n<p>TypeScript中定义方法</p>\n<div><pre><code><span>// 函数声明式</span>\n<span>function</span> <span>sun</span><span>(</span><span>)</span><span>:</span>viod<span>{</span><span>}</span><span>;</span>\n<span>// 匿名函数</span>\n<span>let</span> person <span>=</span> <span>funciton</span><span>(</span><span>)</span><span>:</span><span>string</span><span>{</span> <span>return</span>  <span>''</span><span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div></li>\n</ol>\n<h2 id=\"二、函数方法传参\" tabindex=\"-1\"> 二、函数方法传参</h2>\n<ol>\n<li>\n<p>函数声明</p>\n<div><pre><code><span>function</span> <span>getInfo</span><span>(</span>name<span>:</span> <span>string</span><span>,</span> age<span>:</span> <span>number</span><span>)</span><span>:</span> <span>string</span><span>{</span> \n\t<span>return</span> <span><span>`</span><span>我的名字叫</span><span><span>${</span>name<span>}</span></span><span>,今年</span><span><span>${</span>age<span>}</span></span><span>岁</span><span>`</span></span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div></li>\n<li>\n<p>匿名函数</p>\n<div><pre><code><span>let</span> <span>getInfo</span> <span>=</span> <span>function</span><span>(</span>name<span>:</span> <span>string</span><span>,</span> age<span>:</span> <span>number</span><span>)</span><span>:</span> viod<span>{</span> \n\t<span>console</span><span>.</span><span>log</span><span>(</span><span><span>`</span><span>我的名字叫</span><span><span>${</span>name<span>}</span></span><span>,今年</span><span><span>${</span>age<span>}</span></span><span>岁</span><span>`</span></span><span>)</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div></li>\n</ol>\n<h2 id=\"三、方法的可选参数\" tabindex=\"-1\"> 三、方法的可选参数</h2>\n<ol>\n<li>\n<p>es5 里面方法的实参和形参可以不一样，但是 ts 中必须一样，如果不一样就需要配置可选参数</p>\n</li>\n<li>\n<p>注意！可选参数必须配到参数的最后面</p>\n<div><pre><code><span>let</span> <span>getInfo</span> <span>=</span> <span>function</span><span>(</span>name<span>:</span> <span>string</span><span>,</span> age<span>?</span><span>:</span> <span>number</span><span>)</span><span>:</span> viod<span>{</span> \n\t<span>if</span><span>(</span>age<span>)</span><span>{</span>\n\t\t<span>console</span><span>.</span><span>log</span><span>(</span><span><span>`</span><span>我的名字叫</span><span><span>${</span>name<span>}</span></span><span>,今年</span><span><span>${</span>age<span>}</span></span><span>岁</span><span>`</span></span><span>)</span>\n\t<span>}</span><span>else</span><span>{</span>\n\t\t<span>console</span><span>.</span><span>log</span><span>(</span><span>'哈哈哈'</span><span>)</span>\n\t<span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n</ol>\n<h2 id=\"四、方法的默认参数\" tabindex=\"-1\"> 四、方法的默认参数</h2>\n<ol>\n<li>\n<p>es5 中是不能配置默认传参的，es6 和 ts 可配置默认参数</p>\n<div><pre><code>\n<span>let</span> <span>getInfo</span> <span>=</span> <span>function</span><span>(</span>name<span>:</span> <span>string</span><span>,</span> age<span>:</span> <span>number</span> <span>=</span> <span>23</span><span>)</span><span>:</span> viod<span>{</span> \n\t<span>if</span><span>(</span>age<span>)</span><span>{</span>\n\t\t<span>console</span><span>.</span><span>log</span><span>(</span><span><span>`</span><span>我的名字叫</span><span><span>${</span>name<span>}</span></span><span>,今年</span><span><span>${</span>age<span>}</span></span><span>岁</span><span>`</span></span><span>)</span>\n\t<span>}</span><span>else</span><span>{</span>\n\t\t<span>console</span><span>.</span><span>log</span><span>(</span><span>'哈哈哈'</span><span>)</span>\n\t<span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n</ol>\n<h2 id=\"五、函数剩余参数\" tabindex=\"-1\"> 五、函数剩余参数</h2>\n<ol>\n<li>\n<p>三点运算符 接收传递过来的所有参数</p>\n<div><pre><code><span>function</span> <span>sum</span><span>(</span>a<span>:</span><span>number</span><span>,</span> <span>...</span>result<span>:</span> <span>number</span><span>[</span><span>]</span><span>)</span><span>:</span> <span>number</span><span>{</span>\n\t<span>var</span> sum <span>=</span> <span>0</span><span>;</span>\n\t<span>for</span><span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i<span>&lt;</span>result<span>.</span>lenght<span>;</span>i<span>++</span><span>)</span><span>{</span>\n\t\tsum<span>+=</span>result<span>[</span>i<span>]</span><span>;</span>\n\t<span>}</span>\n\t<span>return</span> sum\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n</ol>\n<h2 id=\"六、函数重载\" tabindex=\"-1\"> 六、函数重载</h2>\n<ol>\n<li>\n<p>java 中方法的重载：重载指的是两个或者两个以上同名函数，但它们的参数不一样，这时会出现函数重载的情况。</p>\n</li>\n<li>\n<p>typescript 中的重载：通过为同一个函数提供多个函数类型定义来试下各种功能的目的。</p>\n</li>\n<li>\n<p>为了兼容es5，以及es6中重载的写法和java有区别</p>\n<div><pre><code><span>function</span> <span>getInfo</span><span>(</span>names<span>:</span> <span>string</span><span>)</span><span>:</span> <span>string</span><span>;</span>\n<span>function</span> <span>getInfo</span><span>(</span>age<span>:</span><span>number</span> <span>)</span><span>:</span> <span>string</span><span>;</span>\n<span>function</span> <span>getInfo</span><span>(</span>str<span>:</span><span>any</span><span>)</span><span>:</span><span>any</span> <span>{</span>\n\t<span>if</span><span>(</span><span>typeof</span> str <span>===</span> <span>'string'</span><span>)</span><span>{</span>\n\t\t<span>return</span> <span><span>`</span><span>我叫：</span><span><span>${</span>str<span>}</span></span><span>`</span></span>\n\t<span>}</span><span>else</span><span>{</span>\n\t\t<span>return</span> <span><span>`</span><span>我的年龄是</span><span><span>${</span>str<span>}</span></span><span>`</span></span>\n\t<span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n</ol>\n",
      "date_published": "2022-07-31T09:25:53.000Z",
      "date_modified": "2022-07-31T09:25:53.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "泛型",
      "url": "https://brysonlin.github.io/blog/blog/code/language/typescript/genericity.html",
      "id": "https://brysonlin.github.io/blog/blog/code/language/typescript/genericity.html",
      "content_html": "<p>一、泛型的概念：</p>\n<div><p>提示</p>\n<ul>\n<li>\n<p>软件工程中，我们不仅要创建一致的定义良好的 API，同时也要考虑可重用性。组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。</p>\n</li>\n<li>\n<p>在像 C# 和 Java 这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类的数据。这样用户就可以以自己的数据类型来使用组件。</p>\n</li>\n<li>\n<p>通俗理解：<strong>泛型就是解决 类 接口 方法的复用性、以及对不特定数据类型的支持。</strong></p>\n</li>\n</ul>\n</div>\n<h2 id=\"二、泛型函数\" tabindex=\"-1\"> 二、泛型函数</h2>\n<ol>\n<li>\n<div><pre><code><span>// 泛型：可以支持不特定的数据类型  要求：传入的参数和返回的的参数一致</span>\n<span>// T表示泛型，具体什么类型是调用这个方法的时候决定的</span>\n\t<span>function</span> <span><span>getData</span><span><span>&lt;</span><span>T</span><span>></span></span></span><span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>T</span><span>{</span>\n\t\t<span>return</span> value<span>;</span>\n\t<span>}</span>\n\t<span><span>getData</span><span><span>&lt;</span><span>number</span><span>></span></span></span><span>(</span><span>123</span><span>)</span>\n\n\t<span>function</span> <span><span>getData</span><span><span>&lt;</span><span>T</span><span>></span></span></span><span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>any</span><span>{</span>\n\t\t<span>return</span> value<span>;</span>\n\t<span>}</span>\n\t<span><span>getData</span><span><span>&lt;</span><span>number</span><span>></span></span></span><span>(</span><span>123</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n</ol>\n<h2 id=\"三、泛型类\" tabindex=\"-1\"> 三、泛型类</h2>\n<ol>\n<li>\n<p>泛型类：比如有个最小堆算法，需要同时支持返回数字和字符串你两种类型。通过类的泛型来实现</p>\n<div><pre><code><span>class</span> <span>MinClass<span>&lt;</span><span>T</span><span>></span></span> <span>{</span>\n  <span>public</span> list<span>:</span> <span>T</span><span>[</span><span>]</span> <span>=</span> <span>[</span><span>]</span><span>;</span>\n  <span>add</span><span>(</span>num<span>:</span> <span>T</span><span>)</span><span>:</span> <span>T</span><span>[</span><span>]</span><span>{</span>\n    <span>this</span><span>.</span>list<span>.</span><span>push</span><span>(</span>num<span>)</span>\n    <span>return</span> <span>this</span><span>.</span>list\n  <span>}</span>\n  <span>minNum</span><span>(</span><span>)</span><span>:</span><span>T</span><span>{</span>\n    <span>let</span> min <span>=</span> <span>this</span><span>.</span>list<span>[</span><span>0</span><span>]</span><span>;</span>\n    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>this</span><span>.</span>list<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n      <span>const</span> element <span>=</span> <span>this</span><span>.</span>list<span>[</span>i<span>]</span><span>;</span>\n      <span>if</span> <span>(</span>min <span>></span> element<span>)</span> <span>{</span>\n        min <span>=</span> element\n      <span>}</span>\n    <span>}</span>\n    <span>return</span> min\n  <span>}</span>\n<span>}</span>\n<span>let</span> person <span>=</span> <span>new</span> <span>MinClass<span>&lt;</span><span>string</span><span>></span></span><span>(</span><span>)</span><span>;</span>\t\t<span>// 实例化类，并且证明类的泛型是number </span>\n<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span><span>add</span><span>(</span><span>'a'</span><span>)</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span><span>add</span><span>(</span><span>'c'</span><span>)</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span><span>add</span><span>(</span><span>'e'</span><span>)</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span><span>minNum</span><span>(</span><span>)</span><span>)</span><span>;</span>\t\t\t\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n</ol>\n<h2 id=\"四、泛型接口\" tabindex=\"-1\"> 四、泛型接口</h2>\n<ol>\n<li>\n<div><pre><code><span>// 泛型接口</span>\n<span>interface</span> <span>ConfigFn</span><span>{</span>\n\t<span>&lt;</span><span>T</span><span>></span><span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>T</span><span>;</span>\n<span>}</span>\n<span>let</span> getData<span>:</span><span>ConfigFn</span> <span>=</span> <span>function</span><span>&lt;</span><span>T</span><span>></span><span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>T</span><span>{</span>\n\t<span>return</span> value<span>;</span>\n<span>}</span>\n<span><span>getData</span><span><span>&lt;</span><span>string</span><span>></span></span></span><span>(</span><span>'张三'</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n<li>\n<div><pre><code><span>// 泛型接口</span>\n<span>interface</span> <span>ConfigFn<span>&lt;</span><span>T</span><span>></span></span><span>{</span>\n\t<span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>T</span><span>;</span>\n<span>}</span>\n<span>function</span> <span><span>getData</span><span><span>&lt;</span><span>T</span><span>></span></span></span><span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>T</span><span>{</span>\n\t<span>return</span> value<span>;</span>\n<span>}</span>\n<span>let</span> myGetData<span>:</span>ConfigFn<span>&lt;</span><span>string</span><span>></span> <span>=</span> getData<span>;</span>\n<span>myGetData</span><span>(</span><span>'张三'</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n</ol>\n<h2 id=\"五、typescript-泛型类-把类作为参数类型的泛型类\" tabindex=\"-1\"> 五、TypeScript 泛型类 把类作为参数类型的泛型类</h2>\n<div><pre><code><span>// 操作数据库的泛型类</span>\ncalss MysqlDb<span>&lt;</span><span>T</span><span>></span><span>{</span>\n\t<span>add</span><span>(</span>info<span>:</span><span>T</span><span>)</span><span>:</span><span>boolean</span><span>{</span>\n\t\t<span>console</span><span>.</span><span>log</span><span>(</span>info<span>)</span><span>;</span>\n\t\t<span>return</span> <span>true</span>\n\t<span>}</span>\n<span>}</span>\n\n<span>//1、定义一个User类和数据库进行映射</span>\n\n<span>class</span> <span>User</span><span>{</span>\n    username<span>:</span><span>string</span> <span>|</span> <span>undefined</span><span>;</span>\n    pasword<span>:</span><span>string</span> <span>|</span> <span>undefined</span><span>;</span>\n<span>}</span>\n<span>var</span> u <span>=</span> <span>new</span> <span>User</span><span>(</span><span>)</span><span>;</span>\nu<span>.</span>username <span>=</span> <span>'张三'</span>；\nu<span>.</span>password <span>=</span> <span>'123456'</span><span>;</span>\n<span>var</span> Db <span>=</span> <span>new</span> <span>MysqlDb<span>&lt;</span>User<span>></span></span><span>(</span><span>)</span><span>;</span>\nDb<span>.</span><span>add</span><span>(</span>u<span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"六、统一封装-mysql、mssql、mongodb\" tabindex=\"-1\"> 六、统一封装 Mysql、Mssql、mongodb</h2>\n<ol>\n<li>功能：定义一个操作数据库的库  支持 Mysql Mssql MongoDb</li>\n<li>要求：Mysql Mssql MongoDb 功能一样 都有 add  update delete get方法</li>\n<li>注意：约束统一的规范、以及代码重用</li>\n<li>解决方案：需要约束规范所以要定义接口，需要代码重用所以用到泛型\n<ol>\n<li>接口：在面向对象的编程中，接口时一种规范的定义，它定义了行为和动作的归覅能否</li>\n<li>泛型 通俗理解：泛型就是解决 类 接口 方法的复用性。</li>\n</ol>\n</li>\n</ol>\n<div><pre><code><span>interface</span> <span><span>DBI</span><span>&lt;</span><span>T</span><span>></span></span><span>{</span>\n    <span>add</span><span>(</span>info<span>:</span><span>T</span><span>)</span><span>:</span><span>boolean</span><span>;</span>\n    <span>update</span><span>(</span>info<span>:</span><span>T</span><span>,</span>di<span>:</span><span>number</span><span>)</span><span>:</span><span>boolean</span><span>;</span>\n    <span>delete</span><span>(</span>id<span>:</span><span>number</span><span>)</span><span>:</span><span>boolean</span><span>;</span>\n    <span>get</span><span>(</span>id<span>:</span><span>number</span><span>)</span><span>:</span><span>any</span><span>[</span><span>]</span><span>;</span>\n<span>}</span>\n<span>// 定义一个操作mysql数据库的类     注意：要实现泛型接口 这个类也应该是一个泛型类</span>\n<span>class</span> <span>MysqlDb<span>&lt;</span><span>T</span><span>></span></span> <span>implements</span> <span><span>DBI</span><span>&lt;</span><span>T</span><span>></span></span><span>{</span>\n  <span>add</span><span>(</span>info<span>:</span> <span>T</span><span>)</span><span>:</span> <span>boolean</span> <span>{</span>\n    <span>console</span><span>.</span><span>log</span><span>(</span>info<span>)</span>\n    <span>return</span> <span>true</span>\n  <span>}</span>\n  <span>update</span><span>(</span>info<span>:</span> <span>T</span><span>,</span> di<span>:</span> <span>number</span><span>)</span><span>:</span> <span>boolean</span> <span>{</span>\n    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>\"Method not implemented.\"</span><span>)</span><span>;</span>\n  <span>}</span>\n  <span>delete</span><span>(</span>id<span>:</span> <span>number</span><span>)</span><span>:</span> <span>boolean</span> <span>{</span>\n    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>\"Method not implemented.\"</span><span>)</span><span>;</span>\n  <span>}</span>\n  <span>get</span><span>(</span>id<span>:</span> <span>number</span><span>)</span><span>:</span> <span>any</span><span>[</span><span>]</span> <span>{</span>\n    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>\"Method not implemented.\"</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n<span>class</span> <span>User</span><span>{</span>\n    userName<span>:</span> <span>string</span> <span>|</span> <span>undefined</span><span>;</span>\n    password<span>:</span> <span>string</span> <span>|</span> <span>undefined</span><span>;</span>\n<span>}</span>\n<span>let</span> person <span>=</span> <span>new</span> <span>User</span><span>(</span><span>)</span><span>;</span>\nperson<span>.</span>userName <span>=</span> <span>'linxing'</span><span>;</span>\nperson<span>.</span>password <span>=</span> <span>'123456'</span>\n\n<span>let</span> OMysqlDb <span>=</span> <span>new</span> <span>MysqlDb<span>&lt;</span>User<span>></span></span><span>(</span><span>)</span>\nOMysqlDb<span>.</span><span>add</span><span>(</span>person<span>)</span><span>;</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-07-31T09:25:53.000Z",
      "date_modified": "2022-07-31T09:25:53.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "接口",
      "url": "https://brysonlin.github.io/blog/blog/code/language/typescript/interface.html",
      "id": "https://brysonlin.github.io/blog/blog/code/language/typescript/interface.html",
      "content_html": "<h2 id=\"一、typescrip中的接口\" tabindex=\"-1\"> 一、TypeScrip中的接口</h2>\n<div><p>提示</p>\n<ul>\n<li>\n<ol>\n<li>接口的作用：<code>在面向对象的编程中，接口时一种规范的定义，它定义了行为和动作的规范，在程序设计里面，接口起到一种限制和规范的作用。</code>接口定义了某一批类所需要遵守的规范，接口不关心这些类的内部状态数据，也不关心这些类里方法的实现细节，它只规定这批类里必须提供某些方法，提供这些方法的类就可以满足实际需要。typescript 中的接口类似于 java ，同时还增加了更灵活的接口类型，包括 <strong>属性、函数、可索引、和类</strong> 等。</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>定义行为和动作的规范。对批量方法进行约束  interface</li>\n</ol>\n</li>\n</ul>\n</div>\n<h2 id=\"二、属性类接口\" tabindex=\"-1\"> 二、属性类接口</h2>\n<h3 id=\"_1-就是传入对象的约束-属性接口\" tabindex=\"-1\"> 1. 就是传入对象的约束  属性接口</h3>\n<div><pre><code><span>interface</span> <span>FullName</span><span>{</span>\n\tfirstName<span>:</span> <span>string</span><span>;</span>\t\t<span>// 注意，分号结束</span>\n\tsecondName<span>:</span> <span>string</span><span>;</span>\n<span>}</span>\n<span>function</span> <span>printName</span><span>(</span>name<span>:</span>FullName<span>)</span><span>{</span>\n\t<span>// 必须传入firstName  secondName</span>\n    <span>console</span><span>.</span><span>log</span><span>(</span>name<span>.</span>firstName <span>+</span> name<span>.</span>secondName<span>)</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"_2-可选接口\" tabindex=\"-1\"> 2. 可选接口</h3>\n<div><pre><code><span>interface</span> <span>FullName</span><span>(</span><span>)</span><span>{</span>\n\tfirstName<span>:</span> <span>string</span><span>;</span>\n\tsecondName<span>?</span><span>:</span><span>string</span>\n<span>}</span>\n<span>function</span> <span>getName</span><span>(</span>name<span>:</span>FullName<span>)</span><span>{</span>\n\t<span>console</span><span>.</span><span>log</span><span>(</span>name<span>)</span>\n<span>}</span>\n<span>// 参数的顺序可以不一样</span>\n<span>getName</span><span>(</span><span>{</span>\n\tfirstName<span>:</span><span>'linxing'</span><span>;</span>\n\tsecondName<span>:</span><span>'liner'</span>\n<span>}</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"_3-示例\" tabindex=\"-1\"> 3. 示例</h3>\n<div><pre><code><span>interface</span> <span>Config</span><span>{</span>\n\ttype<span>:</span> <span>string</span><span>;</span>\n\turl<span>:</span> <span>string</span><span>;</span>\n\tdata<span>?</span><span>:</span> <span>string</span><span>;</span>\n\tdataType<span>:</span> <span>string</span>\n<span>}</span>\n<span>function</span> <span>ajax</span><span>(</span> config<span>:</span> Config <span>)</span><span>{</span>\n    <span>var</span> xhr <span>=</span> <span>new</span> <span>XMLHttpRequest</span><span>(</span><span>)</span><span>;</span>\n    xhr<span>.</span><span>open</span><span>(</span> config<span>.</span>get<span>,</span> config<span>.</span>url<span>,</span> <span>true</span><span>)</span><span>;</span>\n    xhr<span>.</span><span>send</span><span>(</span>config<span>.</span>data<span>)</span><span>;</span>\n    xhr<span>.</span><span>onreadystatechange</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span>\n        <span>if</span><span>(</span>xhr<span>.</span>readyState <span>===</span> <span>4</span> <span>&amp;&amp;</span> xhr<span>.</span>status <span>==</span> <span>200</span><span>)</span><span>{</span>\n            <span>if</span><span>(</span>confiig<span>.</span>dataType <span>==</span> <span>'json'</span><span>)</span><span>{</span>\n                <span>JSON</span><span>.</span><span>perse</span><span>(</span>xhr<span>.</span>responseText<span>)</span>\n            <span>}</span><span>else</span><span>{</span>\n                <span>console</span><span>.</span><span>log</span><span>(</span>xhr<span>.</span>reponseText<span>)</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n<span>ajax</span><span>(</span><span>{</span>\n    type<span>:</span><span>'get'</span><span>,</span>\n    data<span>:</span><span>'name:zhang'</span><span>,</span>\n    url<span>:</span> <span>'http://www.baidu.com'</span><span>,</span>\n    dataType<span>:</span><span>'json'</span>\n<span>}</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"三、函数类接口\" tabindex=\"-1\"> 三、函数类接口</h2>\n<h3 id=\"_1-函数类型接口-对方法传入的参数-以及返回值进行约束-批量约束\" tabindex=\"-1\"> 1. 函数类型接口：对方法传入的参数 以及返回值进行约束  批量约束</h3>\n<h3 id=\"_2-加密的函数类型接口\" tabindex=\"-1\"> 2. 加密的函数类型接口</h3>\n<div><pre><code><span>interface</span> <span>encrypt</span><span>{</span>\n\t<span>(</span>key<span>:</span><span>string</span><span>,</span>value<span>:</span><span>string</span><span>)</span><span>:</span><span>string</span><span>;</span>\n<span>}</span>\n<span>var</span> md5<span>:</span><span>encrypt</span> <span>=</span> <span>function</span> <span>(</span>key<span>:</span><span>string</span><span>,</span>value<span>:</span><span>string</span><span>)</span><span>:</span> <span>string</span><span>{</span>\n\t<span>// 模拟操作</span>\n\t<span>return</span> key <span>+</span> name\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"四、可索引接口\" tabindex=\"-1\"> 四、可索引接口</h2>\n<h3 id=\"_1-可索引接口-对数组、对象的约束-不常用\" tabindex=\"-1\"> 1. 可索引接口：对数组、对象的约束（不常用）</h3>\n<h3 id=\"_2-数组的约束\" tabindex=\"-1\"> 2. 数组的约束</h3>\n<div><pre><code><span>interface</span> <span>UserArr</span><span>{</span>\n\t<span>[</span>index<span>:</span><span>number</span><span>]</span><span>:</span><span>string</span>\n<span>}</span>\n<span>let</span> arr<span>:</span>UserArr <span>=</span> <span>[</span><span>'lixing'</span><span>]</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><h3 id=\"_3-对象的约束\" tabindex=\"-1\"> 3. 对象的约束</h3>\n<div><pre><code><span>interface</span> <span>UserArr</span><span>{</span>\n\t<span>[</span>index<span>:</span><span>string</span><span>]</span><span>:</span><span>any</span>\n<span>}</span>\n<span>let</span> arr<span>:</span>UserArr <span>=</span> <span>{</span>\n\tname<span>:</span> <span>'张三'</span>，\n\tage<span>:</span> <span>23</span>\t\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"五、类类型接口\" tabindex=\"-1\"> 五、类类型接口</h2>\n<h3 id=\"_1-类类型接口-对类的约束-和-抽象类比较相似\" tabindex=\"-1\"> 1. 类类型接口：对类的约束 和 抽象类比较相似</h3>\n<div><pre><code><span>interface</span> <span>Animal</span><span>{</span>\n  name<span>:</span><span>string</span><span>;</span>\n  <span>eat</span><span>(</span>str<span>:</span><span>string</span><span>)</span><span>:</span><span>void</span>\n<span>}</span>\n\n<span>class</span> <span>Dog</span> <span>implements</span> <span>Animal</span><span>{</span>\n  name<span>:</span><span>string</span><span>;</span>\n  <span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>\n    <span>this</span><span>.</span>name <span>=</span> name\n  <span>}</span>\n  <span>eat</span><span>(</span><span>)</span><span>{</span>\n    <span>console</span><span>.</span><span>log</span><span>(</span><span>'小黑吃粮食！'</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n<span>let</span> p <span>=</span> <span>new</span> <span>Dog</span><span>(</span><span>'小黑'</span><span>)</span><span>;</span>\np<span>.</span><span>eat</span><span>(</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"六、接口扩展-接口可继承接口\" tabindex=\"-1\"> 六、接口扩展 接口可继承接口</h2>\n<div><pre><code><span>interface</span> <span>Animal</span><span>{</span>\n  <span>eat</span><span>(</span>foot<span>:</span><span>string</span><span>)</span><span>:</span><span>string</span><span>;</span>\n<span>}</span>\n<span>interface</span> <span>Web</span> <span>extends</span> <span>Animal</span><span>{</span>\n  <span>work</span><span>(</span><span>)</span><span>:</span><span>void</span><span>;</span>\n<span>}</span>\n\n<span>class</span> <span>Person</span> <span>implements</span> <span>Web</span><span>{</span>\n  <span>public</span> name<span>:</span><span>string</span><span>;</span>\n  <span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>\n    <span>this</span><span>.</span>name <span>=</span> name\n  <span>}</span>\n  <span>eat</span><span>(</span>foot<span>:</span><span>string</span><span>)</span><span>{</span>\n    <span>return</span> <span><span>`</span><span><span>${</span><span>this</span><span>.</span>name<span>}</span></span><span>吃</span><span><span>${</span>foot<span>}</span></span><span>`</span></span>\n  <span>}</span>\n  <span>work</span><span>(</span><span>)</span><span>{</span>\n    <span>console</span><span>.</span><span>log</span><span>(</span><span><span>`</span><span><span>${</span><span>this</span><span>.</span>name<span>}</span></span><span>敲代码</span><span>`</span></span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n<span>let</span> p <span>=</span> <span>new</span> <span>Person</span><span>(</span><span>'小林'</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>p<span>.</span><span>eat</span><span>(</span><span>'粮食'</span><span>)</span><span>)</span><span>;</span>\np<span>.</span><span>work</span><span>(</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-07-31T09:25:53.000Z",
      "date_modified": "2022-07-31T09:25:53.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Markdown",
      "url": "https://brysonlin.github.io/blog/blog/code/language/markdown/",
      "id": "https://brysonlin.github.io/blog/blog/code/language/markdown/",
      "summary": "Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。\n",
      "content_html": "<p>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>\n\n<p>Markdown 的目标是实现「易读易写」。</p>\n<p>Markdown 的主要目的是用来作为一种网络内容的<strong>写作用语言</strong>。</p>\n",
      "date_published": "2022-07-31T03:23:32.000Z",
      "date_modified": "2022-07-31T03:44:49.000Z",
      "authors": [],
      "tags": [
        "Markdown"
      ]
    },
    {
      "title": "Markdown Emoji 列表",
      "url": "https://brysonlin.github.io/blog/blog/code/language/markdown/emoji/",
      "id": "https://brysonlin.github.io/blog/blog/code/language/markdown/emoji/",
      "content_html": "<h2 id=\"人物\" tabindex=\"-1\"> 人物</h2>\n<ul>\n<li><a href=\"/code/language/markdown/emoji/people.html\">点击前往</a></li>\n</ul>\n<h2 id=\"自然\" tabindex=\"-1\"> 自然</h2>\n<ul>\n<li><a href=\"/code/language/markdown/emoji/nature.html\">点击前往</a></li>\n</ul>\n<h2 id=\"对象\" tabindex=\"-1\"> 对象</h2>\n<ul>\n<li><a href=\"/code/language/markdown/emoji/object.html\">点击前往</a></li>\n</ul>\n<h2 id=\"地点\" tabindex=\"-1\"> 地点</h2>\n<ul>\n<li><a href=\"/code/language/markdown/emoji/place.html\">点击前往</a></li>\n</ul>\n<h2 id=\"符号\" tabindex=\"-1\"> 符号</h2>\n<ul>\n<li><a href=\"/code/language/markdown/emoji/symbol.html\">点击前往</a></li>\n</ul>\n",
      "date_published": "2022-07-31T03:23:32.000Z",
      "date_modified": "2022-07-31T03:44:49.000Z",
      "authors": [],
      "tags": [
        "Markdown"
      ]
    },
    {
      "title": "书籍文档",
      "url": "https://brysonlin.github.io/blog/blog/books/",
      "id": "https://brysonlin.github.io/blog/blog/books/",
      "summary": "前端程序员必看书籍\n",
      "content_html": "<p>前端程序员必看书籍</p>\n\n<h2 id=\"书籍列表\" tabindex=\"-1\"> 书籍列表</h2>\n<h3 id=\"javascript\" tabindex=\"-1\"> JavaScript</h3>\n<ul>\n<li>\n<p><a href=\"/books/little-red-book(v4).html\">JavaScript高级程序设计（第4版）</a></p>\n</li>\n<li>\n<p><a href=\"/books/js-object-oriented.html\">JavaScrip面向对象编程指南（第二版）</a></p>\n</li>\n<li>\n<p><a href=\"/books/js-dom-programming-art.html\">JavaScript DOM编程艺术(第2版)</a></p>\n</li>\n<li>\n<p><a href=\"/books/js-definitive-guide.html\">JavaScript 权威指南（第四版）</a></p>\n</li>\n</ul>\n<h3 id=\"css\" tabindex=\"-1\"> CSS</h3>\n<ul>\n<li><a href=\"/books/css-definitive-guide.html\">CSS权威指南 （第3版）</a></li>\n</ul>\n",
      "date_published": "2020-10-05T00:00:00.000Z",
      "date_modified": "2022-07-24T08:04:21.000Z",
      "authors": [],
      "tags": [
        "书籍"
      ]
    },
    {
      "title": "代码笔记",
      "url": "https://brysonlin.github.io/blog/blog/code/",
      "id": "https://brysonlin.github.io/blog/blog/code/",
      "summary": "此处是 Mr.BrysonLin 存放的一些代码笔记。\n",
      "content_html": "<p>此处是 Mr.BrysonLin 存放的一些代码笔记。</p>\n\n<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<h3 id=\"基础\" tabindex=\"-1\"> 基础</h3>\n<ul>\n<li>\n<p><a href=\"/code/basic/\">基础知识</a></p>\n</li>\n<li>\n<p><a href=\"/code/github/\">GitHub 介绍</a></p>\n</li>\n</ul>\n<h3 id=\"前端开发\" tabindex=\"-1\"> 前端开发</h3>\n<ul>\n<li>\n<p><a href=\"/code/vue/\">Vue 相关</a></p>\n</li>\n<li>\n<p><a href=\"/code/react/\">React</a></p>\n</li>\n<li>\n<p><a href=\"/code/nodejs/\">NodeJS</a></p>\n</li>\n</ul>\n<h3 id=\"代码学习\" tabindex=\"-1\"> 代码学习</h3>\n<ul>\n<li>\n<p><a href=\"/code/language/js/\">JavaScript 教程</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/typescript/\">TypeScript 教程</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/markdown/\">Markdown 教程</a></p>\n</li>\n</ul>\n<h3 id=\"代码学习网站\" tabindex=\"-1\"> 代码学习网站</h3>\n<h3 id=\"优质网站\" tabindex=\"-1\"> 优质网站</h3>\n<ul>\n<li>\n<p><a href=\"https://www.code-nav.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">编程导航</a></p>\n</li>\n<li>\n<p><a href=\"http://nav.poetries.top/\" target=\"_blank\" rel=\"noopener noreferrer\">前端导航</a></p>\n</li>\n<li>\n<p><a href=\"https://www.frontendjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">前站导航</a></p>\n</li>\n<li>\n<p><a href=\"https://www.cxy521.com/\" target=\"_blank\" rel=\"noopener noreferrer\">CXY521</a></p>\n</li>\n<li>\n<p><a href=\"http://www.atguigu.com/download.shtml\" target=\"_blank\" rel=\"noopener noreferrer\">尚硅谷</a></p>\n</li>\n<li>\n<p><a href=\"https://wangdoc.com/\" target=\"_blank\" rel=\"noopener noreferrer\">网道</a></p>\n</li>\n<li>\n<p><a href=\"https://www.liaoxuefeng.com/\" target=\"_blank\" rel=\"noopener noreferrer\">廖雪峰的网站</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/zh-CN/\" target=\"_blank\" rel=\"noopener noreferrer\">MDN</a></p>\n</li>\n</ul>\n",
      "date_published": "2022-07-22T07:01:38.000Z",
      "date_modified": "2022-07-22T07:01:38.000Z",
      "authors": [],
      "tags": []
    }
  ]
}