{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "林初笔墨",
  "home_page_url": "https://brysonlin.github.io/blog/blog/",
  "feed_url": "https://brysonlin.github.io/blog/blog/feed.json",
  "description": "林初笔墨,林初笔墨的博客,Web前端博客,前端博客,Web全栈技术博客,前端工程师博客",
  "items": [
    {
      "title": "学习笔记",
      "url": "https://brysonlin.github.io/blog/blog/learning/",
      "id": "https://brysonlin.github.io/blog/blog/learning/",
      "content_html": "\n<h2 id=\"该内容正在努力建设中\" tabindex=\"-1\"> 该内容正在努力建设中 ......</h2>\n<blockquote>\n<p>That's a Four-Oh-Four.</p>\n</blockquote>\n<p><a href=\"/\">Take me home.</a></p>\n",
      "date_published": "2022-08-02T13:26:11.000Z",
      "date_modified": "2022-08-02T13:26:11.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "书籍文档",
      "url": "https://brysonlin.github.io/blog/blog/learning/books/",
      "id": "https://brysonlin.github.io/blog/blog/learning/books/",
      "summary": "前端程序员必看书籍\n",
      "content_html": "<p>前端程序员必看书籍</p>\n\n<h2 id=\"书籍列表\" tabindex=\"-1\"> 书籍列表</h2>\n<h3 id=\"javascript\" tabindex=\"-1\"> JavaScript</h3>\n<ul>\n<li>\n<p><a href=\"/learning/books/little-red-book(v4).html\">JavaScript高级程序设计（第4版）</a></p>\n</li>\n<li>\n<p><a href=\"/learning/books/js-object-oriented.html\">JavaScrip面向对象编程指南（第二版）</a></p>\n</li>\n<li>\n<p><a href=\"/learning/books/js-dom-programming-art.html\">JavaScript DOM编程艺术(第2版)</a></p>\n</li>\n<li>\n<p><a href=\"/learning/books/js-definitive-guide.html\">JavaScript 权威指南（第四版）</a></p>\n</li>\n</ul>\n<h3 id=\"css\" tabindex=\"-1\"> CSS</h3>\n<ul>\n<li><a href=\"/learning/books/css-definitive-guide.html\">CSS权威指南 （第3版）</a></li>\n</ul>\n",
      "date_published": "2020-10-05T00:00:00.000Z",
      "date_modified": "2022-08-02T13:26:11.000Z",
      "authors": [],
      "tags": [
        "书籍"
      ]
    },
    {
      "title": "Web 前端",
      "url": "https://brysonlin.github.io/blog/blog/learning/web/",
      "id": "https://brysonlin.github.io/blog/blog/learning/web/",
      "content_html": "\n<h2 id=\"该内容正在努力建设中\" tabindex=\"-1\"> 该内容正在努力建设中 ......</h2>\n<blockquote>\n<p>That's a Four-Oh-Four.</p>\n</blockquote>\n<p><a href=\"/\">Take me home.</a></p>\n",
      "date_published": "2022-08-02T13:26:11.000Z",
      "date_modified": "2022-08-02T13:26:11.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "泛应用",
      "url": "https://brysonlin.github.io/blog/blog/generic-application/",
      "id": "https://brysonlin.github.io/blog/blog/generic-application/",
      "summary": "\n主要介绍目前前端技术在主流的互联网应用形式上的开发，其中包括小程序、快应用、H5、移动 App，甚至是桌面应用，同时我们也会介绍 uni-app 这种多端统一开发框架，一份代码解决多端需求。帮你快速掌握多端开发，从容应对不同的客户端载体，向一名多端前端开发者进阶。\n\n",
      "content_html": "<blockquote>\n<p>主要介绍目前前端技术在主流的互联网应用形式上的开发，其中包括小程序、快应用、H5、移动 App，甚至是桌面应用，同时我们也会介绍 uni-app 这种多端统一开发框架，一份代码解决多端需求。帮你快速掌握多端开发，从容应对不同的客户端载体，向一名多端前端开发者进阶。</p>\n</blockquote>\n\n<ul>\n<li>\n<p>小程序</p>\n</li>\n<li>\n<p>React Native</p>\n</li>\n<li>\n<p>Flutter 原生 App 开发</p>\n</li>\n<li>\n<p>Electron 桌面应用开发</p>\n</li>\n<li>\n<p>Hybrid App 开发</p>\n</li>\n</ul>\n",
      "date_published": "2022-08-02T13:08:47.000Z",
      "date_modified": "2022-08-02T13:08:47.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "全栈开发",
      "url": "https://brysonlin.github.io/blog/blog/whole-stack/",
      "id": "https://brysonlin.github.io/blog/blog/whole-stack/",
      "content_html": "\n<h2 id=\"该内容正在努力建设中\" tabindex=\"-1\"> 该内容正在努力建设中 ......</h2>\n<blockquote>\n<p>That's a Four-Oh-Four.</p>\n</blockquote>\n<p><a href=\"/\">Take me home.</a></p>\n",
      "date_published": "2022-08-02T13:08:47.000Z",
      "date_modified": "2022-08-02T13:08:47.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "语言",
      "url": "https://brysonlin.github.io/blog/blog/code/language/",
      "id": "https://brysonlin.github.io/blog/blog/code/language/",
      "summary": "Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。\n",
      "content_html": "<p>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>\n\n<ul>\n<li>\n<p>TypeScript</p>\n</li>\n<li>\n<p>Markdown</p>\n</li>\n</ul>\n",
      "date_published": "2022-08-02T13:08:47.000Z",
      "date_modified": "2022-08-02T13:08:47.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "前端进阶",
      "url": "https://brysonlin.github.io/blog/blog/core-foundation/advanced/",
      "id": "https://brysonlin.github.io/blog/blog/core-foundation/advanced/",
      "content_html": "\n<h2 id=\"该内容正在努力建设中\" tabindex=\"-1\"> 该内容正在努力建设中 ......</h2>\n<blockquote>\n<p>That's a Four-Oh-Four.</p>\n</blockquote>\n<p><a href=\"/\">Take me home.</a></p>\n",
      "date_published": "2022-08-02T13:08:47.000Z",
      "date_modified": "2022-08-02T13:08:47.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "项目实战",
      "url": "https://brysonlin.github.io/blog/blog/core-foundation/project-training/",
      "id": "https://brysonlin.github.io/blog/blog/core-foundation/project-training/",
      "content_html": "\n<h2 id=\"该内容正在努力建设中\" tabindex=\"-1\"> 该内容正在努力建设中 ......</h2>\n<blockquote>\n<p>That's a Four-Oh-Four.</p>\n</blockquote>\n<p><a href=\"/\">Take me home.</a></p>\n",
      "date_published": "2022-08-02T13:08:47.000Z",
      "date_modified": "2022-08-02T13:08:47.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Electron 桌面应用开发",
      "url": "https://brysonlin.github.io/blog/blog/generic-application/electron/",
      "id": "https://brysonlin.github.io/blog/blog/generic-application/electron/",
      "content_html": "\n<h2 id=\"该内容正在努力建设中\" tabindex=\"-1\"> 该内容正在努力建设中 ......</h2>\n<blockquote>\n<p>That's a Four-Oh-Four.</p>\n</blockquote>\n<p><a href=\"/\">Take me home.</a></p>\n",
      "date_published": "2022-08-02T13:08:47.000Z",
      "date_modified": "2022-08-02T13:08:47.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Flutter 原生 App 开发",
      "url": "https://brysonlin.github.io/blog/blog/generic-application/flutter/",
      "id": "https://brysonlin.github.io/blog/blog/generic-application/flutter/",
      "content_html": "\n<h2 id=\"该内容正在努力建设中\" tabindex=\"-1\"> 该内容正在努力建设中 ......</h2>\n<blockquote>\n<p>That's a Four-Oh-Four.</p>\n</blockquote>\n<p><a href=\"/\">Take me home.</a></p>\n",
      "date_published": "2022-08-02T13:08:47.000Z",
      "date_modified": "2022-08-02T13:08:47.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Hybrid App 开发",
      "url": "https://brysonlin.github.io/blog/blog/generic-application/hybrid-app/",
      "id": "https://brysonlin.github.io/blog/blog/generic-application/hybrid-app/",
      "content_html": "\n<h2 id=\"该内容正在努力建设中\" tabindex=\"-1\"> 该内容正在努力建设中 ......</h2>\n<blockquote>\n<p>That's a Four-Oh-Four.</p>\n</blockquote>\n<p><a href=\"/\">Take me home.</a></p>\n",
      "date_published": "2022-08-02T13:08:47.000Z",
      "date_modified": "2022-08-02T13:08:47.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "React Native",
      "url": "https://brysonlin.github.io/blog/blog/generic-application/react-native/",
      "id": "https://brysonlin.github.io/blog/blog/generic-application/react-native/",
      "content_html": "\n<h2 id=\"该内容正在努力建设中\" tabindex=\"-1\"> 该内容正在努力建设中 ......</h2>\n<blockquote>\n<p>That's a Four-Oh-Four.</p>\n</blockquote>\n<p><a href=\"/\">Take me home.</a></p>\n",
      "date_published": "2022-08-02T13:08:47.000Z",
      "date_modified": "2022-08-02T13:08:47.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "小程序开发",
      "url": "https://brysonlin.github.io/blog/blog/generic-application/small-program/",
      "id": "https://brysonlin.github.io/blog/blog/generic-application/small-program/",
      "content_html": "\n<h2 id=\"该内容正在努力建设中\" tabindex=\"-1\"> 该内容正在努力建设中 ......</h2>\n<blockquote>\n<p>That's a Four-Oh-Four.</p>\n</blockquote>\n<p><a href=\"/\">Take me home.</a></p>\n",
      "date_published": "2022-08-02T13:08:47.000Z",
      "date_modified": "2022-08-02T13:08:47.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Vue-Route 路由",
      "url": "https://brysonlin.github.io/blog/blog/code/vue-family-meals/vue-router/",
      "id": "https://brysonlin.github.io/blog/blog/code/vue-family-meals/vue-router/",
      "content_html": "<h2 id=\"vue-route-路由\" tabindex=\"-1\"> Vue-Route 路由</h2>\n",
      "date_published": "2022-08-02T13:08:47.000Z",
      "date_modified": "2022-08-02T13:08:47.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Markdown扩展语法",
      "url": "https://brysonlin.github.io/blog/blog/code/language/markdown/extension.html",
      "id": "https://brysonlin.github.io/blog/blog/code/language/markdown/extension.html",
      "content_html": "<h2 id=\"表格\" tabindex=\"-1\"> 表格</h2>\n<blockquote>\n<p>要添加表格，请使用三个或更多连字符 ( <code>---</code>) 来创建每一列的标题，并使用竖线 ( <code>|</code>) 分隔每一列。为了兼容性，您还应该在行的任一端添加一个管道。</p>\n</blockquote>\n<div><pre><code><span><span><span>|</span><span> Syntax    </span><span>|</span><span> Description </span><span>|</span>\n</span><span><span>|</span> <span>---------</span> <span>|</span> <span>-----------</span> <span>|</span>\n</span><span><span>|</span><span> Header    </span><span>|</span><span> Title       </span><span>|</span>\n<span>|</span><span> Paragraph </span><span>|</span><span> Text        </span><span>|</span>\n</span></span></code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>渲染的输出如下所示:</p>\n<table>\n<thead>\n<tr>\n<th>Syntax</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Header</td>\n<td>Title</td>\n</tr>\n<tr>\n<td>Paragraph</td>\n<td>Text</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>单元格宽度可以变化，如下所示。渲染的输出看起来是一样的。</p>\n</blockquote>\n<div><pre><code><span><span><span>|</span><span> Syntax    </span><span>|</span><span> Description </span><span>|</span>\n</span><span><span>|</span> <span>---------</span> <span>|</span> <span>-----------</span> <span>|</span>\n</span><span><span>|</span><span> Header    </span><span>|</span><span> Title       </span><span>|</span>\n<span>|</span><span> Paragraph </span><span>|</span><span> Text        </span><span>|</span>\n</span></span></code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><h3 id=\"表格内的对齐方式用\" tabindex=\"-1\"> 表格内的对齐方式用</h3>\n<blockquote>\n<p>您可以通过在标题行内连字符的<code>左侧、右侧或两侧添加冒号 (:) 来将列中的文本向左、向右或居中对齐</code>。</p>\n</blockquote>\n<div><pre><code><span><span><span>|</span><span> 左对齐    </span><span>|</span><span> 居中对齐 </span><span>|</span><span>      右对齐 </span><span>|</span>\n</span><span><span>|</span> <span>:--------</span> <span>|</span> <span>:------:</span> <span>|</span> <span>----------:</span> <span>|</span>\n</span><span><span>|</span><span> Header    </span><span>|</span><span>  Title   </span><span>|</span><span> Here's this </span><span>|</span>\n<span>|</span><span> Paragraph </span><span>|</span><span>   Text   </span><span>|</span><span>    And more </span><span>|</span>\n</span></span></code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>渲染的输出如下所示:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">左对齐</th>\n<th style=\"text-align:center\">居中对齐</th>\n<th style=\"text-align:right\">右对齐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Header</td>\n<td style=\"text-align:center\">Title</td>\n<td style=\"text-align:right\">Here's this</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Paragraph</td>\n<td style=\"text-align:center\">Text</td>\n<td style=\"text-align:right\">And more</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"格式化表格中的文本\" tabindex=\"-1\"> 格式化表格中的文本</h3>\n<blockquote>\n<p>您可以格式化表格中的文本。例如，您可以添加<code>链接</code>、<code>代码</code>（仅在反引号 ( `) 中的单词或短语，而不是<strong>代码块</strong>）和<code>强调</code>。</p>\n<blockquote>\n<p>您不能使用标题、块引用、列表、水平线、图像或大多数 HTML 标记。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"围栏代码块\" tabindex=\"-1\"> 围栏代码块</h2>\n<blockquote>\n<p>基本的 Markdown 语法允许您通过将行<code>缩进四个空格</code>或<code>一个制表符</code>来创建代码块。如果您觉得不方便，请尝试使用围栏代码块。根据您的 Markdown 处理器或编辑器，您将在代码块前后的行上使用三个反引号 ( ```) 或三个波浪号 ( )。~~~最好的部分？您不必缩进任何行！</p>\n</blockquote>\n<div><pre><code>{\n\"firstName\": \"John\",\n\"lastName\": \"Smith\",\n\"age\": 25\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>渲染的输出如下所示:</p>\n<p>{\n&quot;firstName&quot;: &quot;John&quot;,\n&quot;lastName&quot;: &quot;Smith&quot;,\n&quot;age&quot;: 25\n}</p>\n<h3 id=\"语法高亮\" tabindex=\"-1\"> 语法高亮</h3>\n<blockquote>\n<p>许多 Markdown 处理器支持对受保护的代码块进行语法高亮显示。此功能允许您为编写代码的任何语言添加颜色突出显示。要添加语法突出显示，请在受保护的代码块之前的反引号旁边指定一种语言。</p>\n</blockquote>\n<div><pre><code><span><span>```</span><span>json</span>\n<span>{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}</span>\n<span>```</span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>渲染的输出如下所示:</p>\n<div><pre><code><span>{</span>\n  <span>\"firstName\"</span><span>:</span> <span>\"John\"</span><span>,</span>\n  <span>\"lastName\"</span><span>:</span> <span>\"Smith\"</span><span>,</span>\n  <span>\"age\"</span><span>:</span> <span>25</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"脚注\" tabindex=\"-1\"> 脚注</h2>\n<blockquote>\n<ul>\n<li>\n<p>脚注允许您添加注释和参考，而不会弄乱文档的正文。当您创建脚注时，带有链接的上标编号会出现在您添加脚注引用的位置。读者可以点击链接跳转到页面底部脚注的内容。</p>\n</li>\n<li>\n<p><sup></sup>要创建脚注引用，请在方括号 ( )内添加插入符号和标识符。标识符可以是数字或单词，但不能包含空格或制表符。标识符仅将脚注引用与脚注本身相关联——在输出中，脚注按顺序编号。</p>\n</li>\n<li>\n<p>在带有冒号和文本 ( <strong><sup></sup>:</strong> My footnote.) 的括号内使用另一个插入符号和数字添加脚注。您不必在文档末尾添加脚注。除了列表、块引号和表格等其他元素之外，您可以将它们放在任何地方。</p>\n</li>\n</ul>\n</blockquote>\n<div><pre><code>这是一个简单的脚注[^1]，这是一个更长的脚注。[^bignote]\n\n<span><span>[</span><span>^1</span><span>]</span><span>:</span> 这是第一个脚注。</span> ↩\n<span><span>[</span><span>^bignote</span><span>]</span><span>:</span> 这是一个有多个段落和代码的。缩进段落以将它们包含在脚注中。{</span> my code }添加尽可能多的段落。 ↩\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>渲染的输出如下所示:</p>\n<p>这是一个简单的脚注<sup></sup>，这是一个更长的脚注。<sup></sup></p>\n<h2 id=\"标题-id\" tabindex=\"-1\"> 标题 ID</h2>\n<blockquote>\n<p>许多 Markdown 处理器支持<strong>标题</strong>的自定义 ID——一些 Markdown 处理器会自动添加它们。添加自定义 ID 允许您直接链接到标题并使用 CSS 修改它们。要添加自定义标题 ID，请将自定义 ID 括在与标题相同的行上的花括号中。</p>\n<blockquote>\n<p>Markdown 官网自定义标题设置锚点是错误的(Typor 亲测)\n正确的写法两种 name 只能为英文,中文不能跳转:</p>\n<blockquote>\n<p><a name=\"divtop\">表</a></p>\n<h3 id=\"custom-id\">我是自定义标题</h3>\n</blockquote>\n</blockquote>\n</blockquote>\n<div><pre><code><span><span>###</span> 我是自定义标题 {#custom-id}</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>渲染的输出如下所示:</p>\n<h3 id=\"custom-id\">我是自定义标题</h3>\n<h3 id=\"链接到标题-id\" tabindex=\"-1\"> 链接到标题 ID</h3>\n<blockquote>\n<p>您可以通过创建带有<code>数字符号</code> ( ) 后跟自<code>定义标题 ID的标准链接</code>来链接到文件中具有<code>自定义 ID 的标题</code>。#这些通常称为<code>锚链接</code>。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Markdown 写法</th>\n<th style=\"text-align:center\">HTML</th>\n<th style=\"text-align:right\">渲染输出</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>[标题 ID](#divtop)</code></td>\n<td style=\"text-align:center\"><code>&lt;a href=&quot;#divtop&quot;&gt;标题 ID&lt;/a&gt;</code></td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>## contom</code></td>\n<td style=\"text-align:center\"><code>&lt;h2 id='contom'&gt;contom&lt;/h2&gt;</code></td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>## custom-id</code></td>\n<td style=\"text-align:center\"><code>&lt;h2 id='custom-id'&gt;custom-id&lt;/h2&gt;</code></td>\n<td style=\"text-align:right\"></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"定义列表\" tabindex=\"-1\"> 定义列表</h2>\n<blockquote>\n<p>一些 Markdown 处理器允许您创建术语的定义列表及其相应的定义。要创建定义列表，请在第一行键入术语。在下一行，键入一个冒号，后跟一个空格和定义。</p>\n</blockquote>\n<div><pre><code>第一学期\n: 这是第一项的定义。\n第二期\n: 这是第二个术语的一个定义。\n: 这是第二个术语的另一个定义。\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code><span><span><span>&lt;</span>dl</span><span>></span></span>\n  <span><span><span>&lt;</span>dt</span><span>></span></span>第一学期<span><span><span>&lt;/</span>dt</span><span>></span></span>\n    <span><span><span>&lt;</span>dd</span><span>></span></span>这是第一项的定义。<span><span><span>&lt;/</span>dd</span><span>></span></span>\n  <span><span><span>&lt;</span>dt</span><span>></span></span>第二期<span><span><span>&lt;/</span>dt</span><span>></span></span>\n    <span><span><span>&lt;</span>dd</span><span>></span></span>这是第二个术语的一个定义。<span><span><span>&lt;/</span>dd</span><span>></span></span>\n    <span><span><span>&lt;</span>dd</span><span>></span></span>这是第二个术语的另一个定义。<span><span><span>&lt;/</span>dd</span><span>></span></span>\n<span><span><span>&lt;</span>dl</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>渲染的输出如下所示:</p>\n<dl>\n  <dt>第一学期</dt>\n  <dd>这是第一项的定义。</dd>\n  <dt>第二期</dt>\n  <dd>这是第二个术语的一个定义。</dd>\n  <dd>这是第二个术语的另一个定义。</dd>\n  <dl></dl>\n</dl>\n<h2 id=\"删除线\" tabindex=\"-1\"> 删除线</h2>\n<blockquote>\n<p>您可以通过在单词中心放置一条水平线来删除单词。结果看起来**<s>像这样.</s>** 此功能允许您指出某些单词是错误的，不应包含在文档中。~~要删除单词，请在单词前后使用两个波浪号 (<code>~~</code> )。</p>\n</blockquote>\n<div><pre><code><span><span>~~</span><span>世界是平的</span><span>~~</span></span>。我们现在知道世界是圆的。\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>渲染的输出如下所示:</p>\n<p><s>世界是平的</s>。我们现在知道世界是圆的。</p>\n<h2 id=\"任务列表\" tabindex=\"-1\"> 任务列表</h2>\n<blockquote>\n<p>任务列表（也称为清单和待办事项列表）允许您创建带有复选框的项目列表。在支持任务列表的 Markdown 应用程序中，复选框会显示在内容旁边。<code>要创建任务列表，请在任务列表项前添加破折号 ( -) 和带空格 ( ) 的括号。[ ]要选择复选框，x请在括号 ( [x]) 之间添加一个</code>。</p>\n</blockquote>\n<div><pre><code><span>-</span> [x] JavaScript\n<span>-</span> [ ] Java\n<span>-</span> [ ] GoLang\n<span>-</span> [x] C++\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>渲染的输出如下所示:</p>\n<ul>\n<li><input type=\"checkbox\" id=\"task-item-0\" checked=\"checked\" disabled=\"disabled\"><label for=\"task-item-0\"> JavaScript</label></li>\n<li><input type=\"checkbox\" id=\"task-item-1\" disabled=\"disabled\"><label for=\"task-item-1\"> Java</label></li>\n<li><input type=\"checkbox\" id=\"task-item-2\" disabled=\"disabled\"><label for=\"task-item-2\"> GoLang</label></li>\n<li><input type=\"checkbox\" id=\"task-item-3\" checked=\"checked\" disabled=\"disabled\"><label for=\"task-item-3\"> C++</label></li>\n</ul>\n<h2 id=\"表情符号\" tabindex=\"-1\"> 表情符号😂</h2>\n<blockquote>\n<p>将表情符号添加到 Markdown 文件有两种方法：<code>将表情符号复制并粘贴到 Markdown 格式的文本中</code>，或<code>键入emoji 短代码</code>。</p>\n</blockquote>\n<h3 id=\"复制和粘贴表情符号\" tabindex=\"-1\"> 复制和粘贴表情符号</h3>\n<blockquote>\n<p><a href=\"https://emojipedia.org/\" target=\"_blank\" rel=\"noopener noreferrer\">在大多数情况下，您可以简单地从 Emojipedia</a>等来源复制表情符号并将其粘贴到您的文档中。许多 Markdown 应用程序会自动以 Markdown 格式的文本显示表情符号。您从 Markdown 应用程序导出的 HTML 和 PDF 文件应显示表情符号。</p>\n<blockquote>\n<p>提示：如果您使用的是静态网站生成器，请确保将 HTML 页面编码为 UTF-8。</p>\n</blockquote>\n</blockquote>\n<h3 id=\"使用表情符号简码\" tabindex=\"-1\"> 使用表情符号简码</h3>\n<blockquote>\n<p>一些 Markdown 应用程序允许您通过输入<code>表情符号短代码</code>来插入表情符号。这些以冒号开头和结尾，并包含表情符号的名称。</p>\n</blockquote>\n<div><pre><code>去露营了！:tent: 快回来。\n\n太搞笑了！:joy:\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>渲染的输出如下所示:</p>\n<p>去露营了！⛺ 快回来。</p>\n<p>太搞笑了！😂</p>\n<h2 id=\"强调\" tabindex=\"-1\"> 强调</h2>\n<blockquote>\n<p>这并不常见，但一些 Markdown 处理器允许您突出<mark>显示文本</mark>。结果看起来像这样. 要突出显示单词，请在<code>单词前后使用两个等号(==)</code>。</p>\n</blockquote>\n<div><pre><code>我需要强调这些==很重要的话.==\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>渲染的输出如下所示:</p>\n<p>我需要强调这些<mark>很重要的话.</mark></p>\n<h2 id=\"下标\" tabindex=\"-1\"> 下标</h2>\n<blockquote>\n<p>这并不常见，但一些 Markdown 处理器允许您使用下标将一个或多个字符定位在略低于正常类型行的位置。要创建下标，请在字符前后使用一个波浪号<code>(~)</code>。</p>\n</blockquote>\n<div><pre><code>H<span><span>~</span><span>2</span><span>~</span></span>O\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>渲染的输出如下所示:</p>\n<p>H<sub>2</sub>O</p>\n<p>HTML 语法</p>\n<div><pre><code>H&lt;sub&gt;2&lt;/sub&gt;O\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h2 id=\"上标\" tabindex=\"-1\"> 上标</h2>\n<blockquote>\n<p>这并不常见，但一些 Markdown 处理器允许您使用上标将一个或多个字符定位在略高于正常类型行的位置。要创建上标，请在字符前后使用一个插入符号 <code>(^)</code>。</p>\n</blockquote>\n<div><pre><code>X^2^\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>渲染的输出如下所示:</p>\n<p>X<sup>2</sup></p>\n<p>HTML 语法</p>\n<div><pre><code>X&lt;sup&gt;2&lt;/sup&gt;\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h2 id=\"自动-url-链接\" tabindex=\"-1\"> 自动 URL 链接</h2>\n<blockquote>\n<p>许多 Markdown 处理器会<code>自动将 URL 转换为链接。</code>这意味着如果您键入 http://www.example.com，即使您没有使用括号，您的 Markdown 处理器也会自动将其转换为链接。</p>\n</blockquote>\n<div><pre><code>http://www.example.com\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>渲染的输出如下所示:</p>\n<p>http://www.example.com</p>\n<h2 id=\"禁用自动-url-链接\" tabindex=\"-1\"> 禁用自动 URL 链接</h2>\n<blockquote>\n<p>如果您不希望自动链接 URL，可以通过将 URL 表示为带有<code>反引号</code>的代码来删除链接。</p>\n</blockquote>\n<div><pre><code><span>`http://www.example.com`</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>渲染的输出如下所示：</p>\n<p><code>http://www.example.com</code></p>\n<hr>\n<section>\n<ol>\n<li id=\"footnote1\"><p>这是第一个脚注。   </p>\n</li>\n<li id=\"footnote2\"><p>这是一个有多个段落和代码的。缩进段落以将它们包含在脚注中。{ my code }添加尽可能多的段落。 </p>\n</li>\n</ol>\n</section>\n",
      "date_published": "2022-08-01T14:50:55.000Z",
      "date_modified": "2022-08-02T13:08:47.000Z",
      "authors": [],
      "tags": [
        "Markdown"
      ]
    },
    {
      "title": "Markdown 基本语法",
      "url": "https://brysonlin.github.io/blog/blog/code/language/markdown/basic.html",
      "id": "https://brysonlin.github.io/blog/blog/code/language/markdown/basic.html",
      "summary": "Mardown 语法提示\n\n\n几乎所有 Markdown 应用程序都支持原始 Markdown 设计文档中概述的基本语法\n\n\nMarkdown 处理器之间存在微小的区别和差异\n\n\n\n",
      "content_html": "<div><p>Mardown 语法提示</p>\n<ul>\n<li>\n<p>几乎所有 Markdown 应用程序都支持原始 Markdown 设计文档中概述的基本语法</p>\n</li>\n<li>\n<p>Markdown 处理器之间存在微小的区别和差异</p>\n</li>\n</ul>\n</div>\n\n<h2 id=\"标题\" tabindex=\"-1\"> 标题</h2>\n<div><p>标题语法</p>\n<ul>\n<li>\n<p>要创建标题，请在单词或短语前添加数字符号（<code>#</code>），您使用的数字符号的数量应与标题的级别想对应，最高到<code>六级</code>。</p>\n</li>\n<li>\n<p>例如：要创建标题级别三（<code>&lt;h3&gt;</code>）,请使用三个字符符号加空格 （列如 <code>### 我是三级标题</code>）</p>\n</li>\n</ul>\n</div>\n<table>\n<thead>\n<tr>\n<th>Markdown</th>\n<th>HTML</th>\n<th>渲染输出</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td># 一级标题</td>\n<td><code>&lt;h1&gt;一级标题&lt;/h1&gt;</code></td>\n<td><h1>一级标题</h1></td>\n</tr>\n<tr>\n<td>## 二级标题</td>\n<td><code>&lt;h2&gt;二级标题&lt;/h2&gt;</code></td>\n<td><h2>二级标题</h2></td>\n</tr>\n<tr>\n<td>### 三级标题</td>\n<td><code>&lt;h3&gt;三级标题&lt;/h3&gt;</code></td>\n<td><h3>三级标题</h3></td>\n</tr>\n<tr>\n<td>#### 四级标题</td>\n<td><code>&lt;h4&gt;四级标题&lt;/h4&gt;</code></td>\n<td><h4>四级标题</h4></td>\n</tr>\n<tr>\n<td>##### 五级标题</td>\n<td><code>&lt;h5&gt;五级标题&lt;/h5&gt;</code></td>\n<td><h5>五级标题</h5></td>\n</tr>\n<tr>\n<td>###### 六级标题</td>\n<td><code>&lt;h6&gt;六级标题&lt;/h6&gt;</code></td>\n<td><h6>六级标题</h6></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"段落\" tabindex=\"-1\"> 段落</h2>\n<div><p>段落语法</p>\n<ul>\n<li>\n<p>要创建段落，请使用空行分隔一行或多行文本。</p>\n</li>\n<li>\n<p>段落中添加<code>&lt;br&gt;</code>可以换行。</p>\n</li>\n</ul>\n</div>\n<table>\n<thead>\n<tr>\n<th>Markdown</th>\n<th>HTML</th>\n<th>渲染输出</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>我真的很喜欢使用 Markdown。我想从现在开始我会用它来格式化我的所有文档。</td>\n<td><code>&lt;p&gt;我真的很喜欢使用 Markdown。我想从现在开始我会用它来格式化我的所有文档。&lt;/p&gt;</code></td>\n<td>我真的很喜欢使用 Markdown。我想从现在开始我会用它来格式化我的所有文档。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"换行符\" tabindex=\"-1\"> 换行符</h2>\n<div><p>换行符语法</p>\n<ul>\n<li>要创建换行符或换行符（<code>&lt;br&gt;</code>）,请以两个或多个空格结束一行，然后键入 return。</li>\n</ul>\n</div>\n<table>\n<thead>\n<tr>\n<th>Markdown</th>\n<th>HTML</th>\n<th>渲染输出</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>这是第一行。&lt;br&gt;这是第二行。</code></td>\n<td><code>&lt;p&gt;这是第二行。&lt;br&gt;这是第二行。&lt;/p&gt;</code></td>\n<td>这是第二行。<br>这是第二行。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"强调-加粗\" tabindex=\"-1\"> 强调（加粗）</h2>\n<div><p>语法</p>\n<ul>\n<li>\n<p>您可以通过将文本设置为 <strong>粗体</strong> 或 <strong>斜体</strong> 来增加重点。</p>\n</li>\n<li>\n<p>要加粗文本，请在单词或短语 <code>前后</code>添加<code>**</code>或下<code>__</code>。为了强调单词的中间部分，请在字母周围添加两个<code>不带空格</code>的星号。</p>\n</li>\n</ul>\n</div>\n<table>\n<thead>\n<tr>\n<th>Markdown</th>\n<th>HTML</th>\n<th>渲染输出</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>我只是喜欢 <code>**粗体字。**</code></td>\n<td>我只是喜欢 <code>&lt;strong&gt;粗体字。&lt;/strong&gt;</code></td>\n<td>我只是喜欢<strong>粗体字。</strong></td>\n</tr>\n<tr>\n<td>我只是喜欢 <code>__粗体字。__</code></td>\n<td>我只是喜欢 <code>&lt;strong&gt;粗体字。&lt;/strong&gt;</code></td>\n<td>我只是喜欢<strong>粗体字。</strong></td>\n</tr>\n<tr>\n<td>爱<code>**是**</code>大胆的</td>\n<td>爱<code>&lt;strong&gt;是&lt;/strong&gt;</code>大胆的</td>\n<td>爱<strong>是</strong>大胆的</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"斜体\" tabindex=\"-1\"> 斜体</h2>\n<div><p>斜体</p>\n<ul>\n<li>\n<p>要使文本变为斜体，请在单词或短语前后添加<code>*</code>或<code>_</code></p>\n</li>\n<li>\n<p>为了强调单词中间的斜体，请在字母周围添加一个<code>不带空格</code>的星号(*)</p>\n</li>\n</ul>\n</div>\n<div><pre><code>我是<span><span>*</span><span>斜体</span><span>*</span></span>字\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>渲染的输出如下所示:<br></p>\n<p>我是<em>斜体</em>字</p>\n<h2 id=\"块引用\" tabindex=\"-1\"> 块引用</h2>\n<div><p>语法</p>\n<ul>\n<li>要创建块引用，请在段落前添加一个大于符号（<code>&gt;</code>）。</li>\n</ul>\n</div>\n<div><pre><code><span>></span> 我是一个块引用\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>渲染的输出如下所示：<br></p>\n<blockquote>\n<p>我是一个块引用</p>\n</blockquote>\n<h3 id=\"带有多个段落的块引用\" tabindex=\"-1\"> 带有多个段落的块引用</h3>\n<blockquote>\n<p>块引用可以包含多个段落。<code>&gt;</code>在段落之间的空白行上添加一个。</p>\n</blockquote>\n<div><pre><code><span>></span> 我是第一个块引用\n<span>></span>\n<span>></span> 我是多个段落的块引用\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>渲染的输出如下显示：</p>\n<blockquote>\n<p>我是第一个块引用</p>\n</blockquote>\n<blockquote>\n<p>我是多个段落的块引用</p>\n</blockquote>\n<h3 id=\"嵌套块引用\" tabindex=\"-1\"> 嵌套块引用</h3>\n<blockquote>\n<p>块引用可以嵌套。在要嵌套的段落前面添加一个<code>&gt;&gt;</code>。</p>\n</blockquote>\n<div><pre><code><span>></span> 我是外层块引用\n<span>></span>\n<span>> ></span> 我是内层块引用\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>渲染的输出如下所示</p>\n<blockquote>\n<p>我是外层块引用</p>\n<blockquote>\n<p>我是内层块引用</p>\n</blockquote>\n</blockquote>\n<h3 id=\"带有其他元素的块引用\" tabindex=\"-1\"> 带有其他元素的块引用</h3>\n<blockquote>\n<p>块引用可以包含其他 Markdown 格式的元素。</p>\n</blockquote>\n<div><pre><code><span>></span> <span><span>####</span> 我这是四级标题的块引用</span>\n<span>></span>\n<span>></span> <span>-</span> 列表的块引用\n<span>></span> <span>-</span> 列表的块引用\n<span>></span>\n<span>></span> 我是<span><span>*</span><span>斜体</span><span>*</span></span>和<span><span>**</span><span>加粗</span><span>**</span></span>的块引用\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>渲染的输出如下所示</p>\n<blockquote>\n<h4 id=\"我这是四级标题的块引用\" tabindex=\"-1\"> 我这是四级标题的块引用</h4>\n<ul>\n<li>列表的块引用</li>\n<li>列表的块引用</li>\n</ul>\n<p>我是<em>斜体</em>和<strong>加粗</strong>的块引用</p>\n</blockquote>\n<h2 id=\"列表\" tabindex=\"-1\"> 列表</h2>\n<blockquote>\n<p>您可以将项目组织成 <code>有序列表</code>和 <code>无序列表</code>。</p>\n</blockquote>\n<h3 id=\"有序列表\" tabindex=\"-1\"> 有序列表</h3>\n<blockquote>\n<p>要创建有序列表，请添加带有<code>数字后跟句点</code>的行项目。数字不必按数字顺序排列，但列表应以<code>数字一开头</code>。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Markdown</th>\n<th>HTML</th>\n<th>渲染输出</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1.  第一项<br>2.  第二项<br>3.  第三项<br>4.  第四项</td>\n<td><code>&lt;ol&gt;</code><br><code>&lt;li&gt;第一项&lt;/li&gt;</code><br><code>&lt;li&gt;第二项&lt;/li&gt;</code><br><code>&lt;li&gt;第三项&lt;/li&gt;</code><br> <code>&lt;li&gt;第四项&lt;/li&gt;</code><br><code>&lt;/ol&gt;</code></td>\n<td><ol><li>第一项</li><li>第二项</li><li>第三项</li><li>第四项</li></ol></td>\n</tr>\n</tbody>\n</table>\n<p>渲染的输出如下所示：</p>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n<li>第四项</li>\n</ol>\n<h3 id=\"无序列表\" tabindex=\"-1\"> 无序列表</h3>\n<blockquote>\n<p>要创建无序列表，请在行项目前添加破折号 ( <code>-</code>)、星号 ( <code>*</code>) 或加号 ( <code>+</code>)。·缩进一项或多项·以创建<code>嵌套列表</code>。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Markdown</th>\n<th>HTML</th>\n<th>渲染输出</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>- 第一项<br>- 第二项<br>- 第三项<br>- 第四项</td>\n<td><code>&lt;ul&gt;</code><br><code>&lt;li&gt;第一项&lt;/li&gt;</code><br><code>&lt;li&gt;第二项&lt;/li&gt;</code><br><code>&lt;li&gt;第三项&lt;/li&gt;</code><br><code>&lt;li&gt;第四项&lt;/li&gt;</code><br><code>&lt;/ul&gt;</code></td>\n<td><ul><li>第一项</li><li>第二项</li><li>第三项</li><li>第四项</li></ul></td>\n</tr>\n</tbody>\n</table>\n<p>渲染的输出如下所示</p>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n<li>第四项</li>\n</ul>\n<h3 id=\"在列表中添加元素\" tabindex=\"-1\"> 在列表中添加元素</h3>\n<div><pre><code><span>-</span> 第一项\n<span>-</span> 第二项\n<span>-</span> 第三项\n  > w 我是无序列表中的块引用\n<span>-</span> 第四项\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>渲染的输出如下所示</p>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项\n<blockquote>\n<p>w 我是无序列表中的块引用</p>\n</blockquote>\n</li>\n<li>第四项</li>\n</ul>\n<h2 id=\"代码\" tabindex=\"-1\"> 代码</h2>\n<blockquote>\n<p>要将单词或短语表示为代码，请将其括在反引号 <strong>`</strong> 中。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Markdown</th>\n<th>HTML</th>\n<th>渲染输出</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>在命令提示符处，键入 ` nano `.</td>\n<td>在命令提示符处，键入<code>&lt;code&gt;nano&lt;/code&gt;</code>.</td>\n<td>在命令提示符处，键入 <code>nano</code>.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"代码块\" tabindex=\"-1\"> 代码块</h3>\n<blockquote>\n<p>要创建代码块，请将块的<code>每一行缩进至少四个空格或一个制表符|</code>。</p>\n</blockquote>\n<div><pre><code>    <span><span><span>&lt;</span>html</span><span>></span></span>\n      <span><span><span>&lt;</span>head</span><span>></span></span>\n      <span><span><span>&lt;/</span>head</span><span>></span></span>\n    <span><span><span>&lt;/</span>html</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>渲染的输出如下所示</p>\n<div><pre><code><span><span><span>&lt;</span>html</span><span>></span></span>\n  <span><span><span>&lt;</span>head</span><span>></span></span> <span><span><span>&lt;/</span>head</span><span>></span></span>\n<span><span><span>&lt;/</span>html</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><h2 id=\"链接\" tabindex=\"-1\"> 链接</h2>\n<blockquote>\n<p>要创建链接，请将链接文本括在中括号中（例如，<code>[Duck Duck Go]</code>），然后紧跟在括号中的 URL（例如，<code>(https://duckduckgo.com)</code>）。</p>\n</blockquote>\n<div><pre><code>我最喜欢的搜索引擎是<span>[<span>Duck Duck Go</span>](<span>https://duckduckgo.com</span>)</span>。\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>渲染的输出如下所示</p>\n<p>我最喜欢的搜索引擎是<a href=\"https://duckduckgo.com\" target=\"_blank\" rel=\"noopener noreferrer\">Duck Duck Go</a>。</p>\n<h3 id=\"添加标题\" tabindex=\"-1\"> 添加标题</h3>\n<div><pre><code>我最喜欢的搜索引擎是<span>[<span>Duck Duck Go</span>](<span>https://duckduckgo.com</span> <span>\"我是描述性文字\"</span>)</span>。\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>渲染的输出如下所示</p>\n<p>我最喜欢的搜索引擎是<a href=\"https://duckduckgo.com\" title=\"我是描述性文字\" target=\"_blank\" rel=\"noopener noreferrer\">Duck Duck Go</a>。</p>\n<h3 id=\"url-和电子邮件地址\" tabindex=\"-1\"> URL 和电子邮件地址</h3>\n<blockquote>\n<p>要将 URL 或电子邮件地址快速转换为链接，请将其括在<code>尖括号中&lt;&gt;</code>。</p>\n</blockquote>\n<div><pre><code>&lt;https://www.markdownguide.org>\n<span><span><span>&lt;</span>fake@example.com</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>渲染的输出如下所示</p>\n<p><a href=\"https://www.markdownguide.org\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.markdownguide.org</a>\n<a href=\"mailto:fake@example.com\">fake@example.com</a></p>\n<h3 id=\"格式化链接\" tabindex=\"-1\"> 格式化链接</h3>\n<blockquote>\n<p>要<strong>强调</strong>链接，请在<code>方括号和圆括号前后添加星号</code>。要将链接表示为<strong>code</strong>，请在括号中添加<code>反引号</code>。</p>\n</blockquote>\n<div><pre><code>我喜欢支持<span><span>**</span><span><span>[<span>EFF</span>](<span>https://eff.org</span>)</span></span><span>**</span></span>。\n这是<span><span>*</span><span><span>[<span>Markdown</span>](<span>https://www.markdownguide.org/basic-syntax/#adding-titles</span>)</span></span><span>*</span></span>。\n请参阅关于的部分<span>[<span><span>`code`</span></span>](<span>#code</span>)</span>。\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>渲染的输出如下所示</p>\n<p>我喜欢支持**<a href=\"https://eff.org\" target=\"_blank\" rel=\"noopener noreferrer\">EFF</a>**。\n这是*<a href=\"https://www.markdownguide.org/basic-syntax/#adding-titles\" target=\"_blank\" rel=\"noopener noreferrer\">Markdown</a>*。\n请参阅关于的部分。</p>\n<h2 id=\"图片\" tabindex=\"-1\"> 图片</h2>\n<blockquote>\n<p>要添加图像，请添加感叹号 (<code>!</code>)，后跟<code>括号中的替代文本</code>，以及括号中的图像资源的<code>路径或 URL</code>。您可以选择在路径或 URL 后添加<code>引号中的标题</code>。</p>\n</blockquote>\n<div><pre><code><span><span>!</span>[<span>文中添加图片</span>](<span>/img/typor/image-20220714202411426.png</span> <span>\"我是标题\"</span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>渲染的输出如下所示</p>\n<p><img src=\"/img/typor/image-20220714202411426.png\" alt=\"文中添加图片\" title=\"我是标题\"></p>\n<h3 id=\"链接图像\" tabindex=\"-1\"> 链接图像</h3>\n<blockquote>\n<p>要添加指向图像的链接，请将图像的 Markdown 括在括号中，然后将链接添加到括号中。</p>\n</blockquote>\n<div><pre><code><span>[<span>![image-20220714202922210</span>](<span>/img/typor/image-20220714202922210.png</span> <span>\"按住ctrl+左键跳转百度\"</span>)</span>](http://baidu.com)\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p><a href=\"http://baidu.com\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"/img/typor/image-20220714202922210.png\" alt=\"image-20220714202922210\" title=\"按住ctrl+左键跳转百度\"></a></p>\n<h2 id=\"转义字符\" tabindex=\"-1\"> 转义字符</h2>\n<blockquote>\n<p>要显示原本用于在 Markdown 文档中格式化文本的文字字符，请在字符前面添加反斜杠 (<code>\\</code>)。</p>\n</blockquote>\n<div><pre><code>\\* 演示转义符文字\\*\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>渲染的输出如下所示</p>\n<p>* 演示转义符文字*</p>\n<h2 id=\"html\" tabindex=\"-1\"> HTML</h2>\n<blockquote>\n<p>许多 Markdown 应用程序允许您在 Markdown 格式的文本中使用 HTML 标签。如果您更喜欢某些 HTML 标记而不是 Markdown 语法，这将很有帮助。例如，有些人发现对图像使用 HTML 标记更容易。当您需要更改元素的属性（例如指定文本的颜色或更改图像的宽度）时，使用 HTML 也很有帮助。</p>\n<p>要使用 HTML，请将标签放在 Markdown 格式文件的文本中。</p>\n</blockquote>\n<div><pre><code>我是<span><span>**</span><span>粗体</span><span>**</span></span>. 我是<span><span><span>&lt;</span>em</span><span>></span></span>斜体<span><span><span>&lt;/</span>em</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>渲染的输出如下所示</p>\n<p>我是<strong>粗体</strong>. 我是<em>斜体</em></p>\n",
      "image": "https://brysonlin.github.io/blog/blog/img/typor/image-20220714202411426.png \"我是标题\"",
      "date_published": "2022-08-01T09:33:13.000Z",
      "date_modified": "2022-08-01T14:50:55.000Z",
      "authors": [],
      "tags": [
        "Markdown"
      ]
    },
    {
      "title": "TypeScirpt中的类",
      "url": "https://brysonlin.github.io/blog/blog/code/language/typescript/class.html",
      "id": "https://brysonlin.github.io/blog/blog/code/language/typescript/class.html",
      "content_html": "<div><pre><code> // 构造函数\n\n  function Person(name,age){\n\n   this.name = name;\n\n    this.age = age;*\n\n   this.sayHei=function(){\n\n    console.log(`我的名字叫${this.name}，今年：${this.age}`);\n\n   }*\n\n  }\n\n // 原型上增加方法\n\n   Person.prototype.sex = function(){\n\n    console.log('我正在被共享！');\n\n   }\n\n   // 静态方法\n\n  Person.printName = function(){*\n\n    console.log(this.name);*\n\n   }\n\n  // let person1 = new Person('linxing',18);\n\n\n\n  // 对象冒充继承  可以继承属性和方法传参 没法继承原型链和静态方法\n\n   function Web(){\n\n   Person.call(this，传参)\n\n   }\n\n   // 原型链继承 可以继承属性和方法也可以继承原型链上的属性和方法  没法传参\n\n   Web.prototype = new Person();*\n\n   let v = new Web();\n\n   v.sayHei();\n\n  // 原型链和对象冒充函数继承属性和方法\n\n   function Web(name,age){\n\n    Person.call(this,name,age)\n\n  }\n\n  // Webj.prototype = Person.prototype;\n\n  \n\n   // 用对象冒充（盗用构造函数）去继承父类的属性和方法 Person.call(thsi, params)\n\n   // 用原型链去继承父类的原型上的方法  web.prototype = new Person    web.prototype = Person.prototype\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"一、typescript-中的类\" tabindex=\"-1\"> 一、TypeScript 中的类</h2>\n<div><pre><code><span>class</span> <span>Person</span><span>{</span>\n\tname<span>:</span><span>string</span><span>;</span>\n\t<span>constructor</span><span>(</span>name<span>:</span> <span>string</span><span>)</span><span>{</span>\t\t\t<span>// 构造函数  实例化类的时候触发的方法</span>\n\t\t<span>this</span><span>.</span>name <span>=</span> name<span>;</span>\n\t<span>}</span>\n    <span>getName</span><span>(</span><span>)</span><span>:</span> <span>string</span><span>{</span>\n        <span>return</span> <span>this</span><span>.</span>name\n    <span>}</span>\n    <span>setName</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>:</span>viod <span>{</span>\n        <span>this</span><span>.</span>name <span>=</span> name<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"二、typescript-中类继承-extends、super\" tabindex=\"-1\"> 二、TypeScript 中类继承：extends、super</h2>\n<div><pre><code><span>class</span> <span>Person</span><span>{</span>\n\tname<span>:</span><span>string</span><span>;</span>\n\t<span>constructor</span><span>(</span>name<span>:</span> <span>string</span><span>)</span><span>{</span>\t\t\t<span>// 构造函数  实例化类的时候触发的方法</span>\n\t\t<span>this</span><span>.</span>name <span>=</span> name<span>;</span>\n\t<span>}</span>\n    <span>getName</span><span>(</span><span>)</span><span>:</span> <span>string</span><span>{</span>\n        <span>return</span> <span>this</span><span>.</span>name\n    <span>}</span>\n    <span>setName</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>:</span>viod <span>{</span>\n        <span>this</span><span>.</span>name <span>=</span> name<span>;</span>\n    <span>}</span>\n<span>}</span>\n定义 web 类来继承 Person 类\n<span>class</span> <span>Web</span> <span>extends</span> <span>Person</span><span>{</span>\n\t<span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>\n\t\t<span>super</span><span>(</span>name<span>)</span>\t\t\t\t\t\t<span>// 初始化父类的构造函数\t\t\t\t</span>\n\t<span>}</span>\n<span>}</span>\n<span>let</span> w <span>=</span> <span>new</span> <span>Web</span><span>(</span><span>'李四'</span><span>)</span>；\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"三、typescript类里面的修饰符\" tabindex=\"-1\"> 三、TypeScript类里面的修饰符</h2>\n<ol>\n<li>TypeScript 里面定义了属性的时候给我们提供了三种修饰符\n<ol>\n<li>public：公有         \t\t\t\t\t\t\t\t\t\t\t在类里面、子类、类外都可以访问</li>\n<li>protected：保护类型  \t\t\t\t\t\t\t\t\t在类里面、子类里面可以访问，在类外部没法访问</li>\n<li>private：私有\t\t                                           在类里面可以访问，子类、类外部都没法访问</li>\n</ol>\n</li>\n<li>属性不加修饰符：默认代表共有属性，public</li>\n</ol>\n<div><pre><code>class Person{\n\tpublic name:string;\n\tconstructor(name: string){\t\t\t// 构造函数  实例化类的时候触发的方法\n\t\tthis.name = name;\n\t}\n    getName(): string{\n        return this.name\n    }\n    setName(name:string):viod {\n        this.name = name;\n    }\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"一、typescript中类的静态属性、静态方法、抽象类、多态\" tabindex=\"-1\"> 一、TypeScript中类的静态属性、静态方法、抽象类、多态</h2>\n<ol>\n<li>\n<p>es5中的静态属性、静态方法</p>\n<div><pre><code><span>function</span> <span>Person</span><span>(</span><span>)</span><span>{</span><span>}</span>\nPerson<span>.</span>name <span>=</span> <span>'linxing'</span><span>;</span>\t\t<span>// 静态属性</span>\nPerson<span>.</span><span>sayName</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span> console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>name<span>)</span> <span>}</span>  <span>// 静态方法</span>\n\n\nJquery\n<span>$</span><span>(</span><span>.</span>box<span>)</span><span>.</span><span>css</span><span>(</span><span>)</span><span>;</span>\n<span>function</span> <span>$</span><span>(</span><span>el</span><span>)</span><span>{</span>    <span>return</span> <span>Base</span><span>(</span>el<span>)</span><span>}</span>\n<span>Base</span><span>(</span><span>)</span><span>{</span>   <span>this</span><span>.</span>css <span>=</span> <span>'获取DOM节点'</span><span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n<li>\n<p>TypeScript中静态属性、静态方法</p>\n<div><pre><code><span>class</span> <span>Person</span><span>{</span>\n\t<span>public</span> name<span>:</span> <span>string</span>\n\t<span>static</span> age<span>:</span> <span>number</span>\n\t<span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>\n\t\t<span>this</span><span>.</span>name <span>=</span> name\n\t<span>}</span>\n\t<span>sayName</span><span>(</span><span>)</span><span>{</span>\t\t<span>// 实例方法</span>\n\t\t\n\t<span>}</span>\n\t<span>static</span> <span>print</span><span>(</span><span>)</span><span>{</span>\t\t<span>// 在静态方法里面不能使用this</span>\n\t\t<span>console</span><span>.</span><span>log</span><span>(</span><span>'我这是静态方法'</span><span>)</span>\n\t<span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n<li>\n<p>多态方法</p>\n<ol>\n<li>父类定义一个方法不去实现，让继承它的子类去实现  每一个子类有不同的表现</li>\n<li>多态属于继承</li>\n</ol>\n<div><pre><code><span>class</span> <span>Animal</span><span>{</span>\n\tname<span>:</span> <span>string</span>\n\t<span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>\n\t\t<span>this</span><span>.</span>name <span>=</span> name\n\t<span>}</span>\n\t<span>eat</span><span>(</span><span>)</span><span>{</span>\t\t\t\t\t\t\t<span>// 定义了一个方法不去实现，让子类去实现</span>\n\t\t<span>console</span><span>.</span><span>log</span><span>(</span><span>'我是吃的方法'</span><span>)</span>\n\t<span>}</span>\n<span>}</span>\n<span>class</span> <span>Dog</span> <span>extends</span> <span>Animal</span><span>{</span>\n\t<span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>\n\t\t<span>super</span><span>(</span>name<span>)</span>\n\t<span>}</span>\n\t<span>eat</span><span>(</span><span>)</span><span>{</span>\t\t\t\t\t\t\t<span>// 这就是多态， 继承重写了父类方法</span>\n\t\t<span>console</span><span>.</span><span>log</span><span>(</span><span>'小狗吃粮食'</span><span>)</span>\n\t<span>}</span>\n<span>}</span>\n<span>class</span> <span>Cat</span> <span>extends</span> <span>Animal</span> <span>{</span>\n\t<span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>\n\t\t<span>super</span><span>(</span>name<span>)</span>\n\t<span>}</span>\n\t<span>eat</span><span>(</span><span>)</span><span>{</span>\n\t\t<span>console</span><span>.</span><span>log</span><span>(</span><span>'吃老鼠'</span><span>)</span>\n\t<span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n<li>\n<p>抽象方法</p>\n<ol>\n<li>typeScript 中的抽象类：它是提供其他类继承的基类，不能直接被实例化。</li>\n<li>用 abstract 关键字定义抽象类和抽象方法，抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。</li>\n<li>abstract 方法只能放在抽象类里面</li>\n<li>抽象类和抽象方法用来定义标准，标准：Animal 这个类要求它的子类必须包含 eat 方法</li>\n</ol>\n<div><pre><code><span>abstract</span> <span>class</span> <span>Animal</span><span>{</span>\t\t\t\t<span>// 父类定义，子类必须实现</span>\n    <span>public</span> names<span>:</span> <span>string</span>\n    <span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span> <span>{</span> \n        <span>this</span><span>.</span>names <span>=</span> name<span>;</span>\n    <span>}</span>\n\t<span>abstract</span> <span>eat</span><span>(</span><span>)</span><span>:</span><span>any</span><span>;</span>\n<span>}</span>\n<span>// let p = new Animal()  错误：无法定义抽象类</span>\n\n<span>class</span> <span>Dog</span> <span>extends</span> <span>Animal</span><span>{</span>\n  <span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>\n    <span>super</span><span>(</span>name<span>)</span>\n  <span>}</span>\n  <span>eat</span><span>(</span><span>)</span><span>{</span>\n    <span>console</span><span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>names <span>+</span> <span>'吃'</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n</ol>\n",
      "date_published": "2022-07-31T09:25:53.000Z",
      "date_modified": "2022-07-31T09:25:53.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "TypeScirpt的数据类型",
      "url": "https://brysonlin.github.io/blog/blog/code/language/typescript/data-type.html",
      "id": "https://brysonlin.github.io/blog/blog/code/language/typescript/data-type.html",
      "content_html": "<h2 id=\"一、typescript-中为了使编写的代码更规范-更有利于维护-增加了类型校验。\" tabindex=\"-1\"> 一、TypeScript 中为了使编写的代码更规范，更有利于维护，增加了类型校验。</h2>\n<ul>\n<li>\n<p>布尔类型（boolean）</p>\n</li>\n<li>\n<p>数字类型（number）</p>\n</li>\n<li>\n<p>字符串类型（string）</p>\n</li>\n<li>\n<p>数组类型（array）</p>\n</li>\n<li>\n<p>元组类型（tuple）</p>\n</li>\n<li>\n<p>枚举类型（enum）</p>\n</li>\n<li>\n<p>任意类型（any）</p>\n</li>\n<li>\n<p>null 和 undefined</p>\n</li>\n<li>\n<p>void 类型</p>\n</li>\n<li>\n<p>never 类型</p>\n</li>\n<li>\n<p>对象</p>\n</li>\n<li>\n<p>unknown(一种保护类型的any)</p>\n</li>\n<li>\n<p>类型的别名</p>\n<div><pre><code><span>// 类型的别名</span>\n<span>type</span> <span>Mytype</span> <span>=</span> <span>1</span><span>|</span><span>2</span><span>|</span><span>3</span><span>|</span><span>4</span><span>|</span><span>5</span><span>;</span>\n<span>let</span> num<span>:</span>Mytype\n<span>let</span> num1<span>:</span>Mytype\n<span>let</span> num2<span>:</span>Mytype\n\n\nnum <span>=</span> <span>8</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n</ul>\n<h2 id=\"二、定义类型示例\" tabindex=\"-1\"> 二、定义类型示例</h2>\n<ol>\n<li>\n<p>布尔类型（boolean）</p>\n<div><pre><code><span>let</span> bool<span>:</span> <span>boolean</span> <span>=</span> <span>true</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div></li>\n<li>\n<p>数字类型 （number）</p>\n<div><pre><code><span>let</span> num<span>:</span> <span>number</span> <span>=</span> <span>11</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div></li>\n<li>\n<p>字符串类型（string）</p>\n<div><pre><code><span>let</span> str<span>:</span> <span>string</span> <span>=</span> <span>'lin'</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div></li>\n<li>\n<p>数组类型(Array)</p>\n<div><pre><code><span>// 第一种定义方式</span>\n<span>let</span> arr<span>:</span> <span>string</span><span>[</span><span>]</span> <span>=</span> <span>[</span><span>'lin'</span><span>,</span><span>'xing'</span><span>]</span><span>;</span>\n<span>// 第二种定义方式: 泛型</span>\n<span>let</span> arr<span>:</span> <span>Array</span><span>&lt;</span><span>string</span><span>></span> <span>=</span> <span>[</span><span>'lin'</span><span>,</span><span>'xing'</span><span>]</span><span>;</span>\n<span>// 第三种类型：</span>\n<span>let</span> arr<span>:</span> <span>any</span><span>[</span><span>]</span> <span>=</span> <span>[</span><span>'linxing'</span><span>,</span> <span>123</span><span>,</span> <span>false</span><span>]</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n<li>\n<p>元组类型 (tuple)</p>\n<div><pre><code><span>let</span> tup<span>:</span> <span>[</span><span>string</span><span>,</span> <span>number</span><span>,</span> <span>boolean</span><span>]</span> <span>=</span> <span>[</span><span>'JavaScript'</span><span>,</span> <span>110</span><span>,</span> <span>true</span><span>]</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div></li>\n<li>\n<p>枚举类型 (enum)</p>\n<div><pre><code><span>enum</span> 枚举名<span>{</span>\n\t标识符<span>[</span><span>=</span> 整型常数<span>]</span>，\n\t标识符<span>[</span><span>=</span> 整型常数<span>]</span>，\n\t<span>...</span><span>.</span>\n\t标识符<span>[</span><span>=</span> 整型常数<span>]</span>，\n<span>}</span>\n<span>enum</span> Flag<span>{</span> success <span>=</span> <span>1</span><span>,</span> error <span>=</span> <span>2</span><span>}</span><span>;</span>\n<span>let</span> f<span>:</span>Flag <span>=</span> Flag<span>.</span>success<span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>f<span>)</span><span>;</span>   <span>// 结果1</span>\n\n<span>// 默认是数字 ， 如果修改其中的一个类型不为数字，后面则必须定义，否则报错</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n<li>\n<p>任意类型 (any)</p>\n<div><pre><code><span>let</span> anyType<span>:</span> <span>any</span> <span>=</span> <span>'string'</span>\t\t\t<span>// 什么类型都能放</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div></li>\n<li>\n<p>null 和 undefined 类型</p>\n<div><pre><code><span>let</span> age<span>:</span> <span>number</span> <span>|</span> <span>undefined</span><span>;</span>\t\t\t<span>// | 或者的意思</span>\n<span>let</span> num<span>:</span> <span>number</span> <span>|</span> <span>null</span> <span>|</span> <span>undefined</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div></li>\n<li>\n<p>void 类型</p>\n<div><pre><code><span>// void 表示没有任何类型，一般用于执行方法没有返回值</span>\n<span>function</span> <span>sum</span><span>(</span>x<span>,</span> y<span>,</span><span>)</span><span>:</span> <span>void</span><span>{</span>\n    <span>let</span> num<span>:</span> <span>number</span> <span>=</span> x<span>+</span>y<span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div></li>\n<li>\n<p>never 类型</p>\n<div><pre><code><span>// never类型：是其他类型（包括 null 和 undefined ）的子类型，代表从不会出现的值。</span>\n<span>// 这意味着声明never的变量只能被never类型所赋值。</span>\n\n<span>var</span> a<span>:</span><span>undefined</span><span>;</span>\na<span>=</span><span>undefined</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div></li>\n</ol>\n",
      "date_published": "2022-07-31T09:25:53.000Z",
      "date_modified": "2022-07-31T09:25:53.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "装饰器",
      "url": "https://brysonlin.github.io/blog/blog/code/language/typescript/decorator.html",
      "id": "https://brysonlin.github.io/blog/blog/code/language/typescript/decorator.html",
      "content_html": "<h2 id=\"一、typescript中的装饰\" tabindex=\"-1\"> 一、TypeScript中的装饰</h2>\n<div><p>提示</p>\n<ol>\n<li>装饰器：装饰器是一种特殊类型1的声明，它能够被附加到类声明，方法，属性或传参上，可以修改类的行为。</li>\n<li>通俗的讲 装饰器就是一个方法，可以注入到类、方法、属性参数上来扩展类、属性、方法、参数的功能。</li>\n<li>常见的装饰器有：类装饰器、属性装饰器、方法装饰器、参数装饰器</li>\n<li>装饰器的写法：普通装饰器（无法传参）、装饰器工厂（可传参）</li>\n<li>装饰器是过去几年中 JS 最大的成就之一，已是 es7 的标准特性之一</li>\n</ol>\n</div>\n<h2 id=\"二、类装饰器\" tabindex=\"-1\"> 二、类装饰器</h2>\n<h3 id=\"_1-类装饰器-类装饰器在类声明之前被声明-紧靠着类声明-。类装饰器应用于类构造函数-可以用来监视-修改或替换类定义。传入一个参数\" tabindex=\"-1\"> 1. 类装饰器：类装饰器在类声明之前被声明（紧靠着类声明）。类装饰器应用于类构造函数，可以用来监视，修改或替换类定义。传入一个参数</h3>\n<h3 id=\"_2-普通装饰器-没有参数\" tabindex=\"-1\"> 2. 普通装饰器（没有参数）</h3>\n<div><pre><code><span>function</span> <span>logclass</span><span>(</span>parms<span>:</span><span>any</span><span>)</span><span>{</span>\n  parms<span>.</span>prototype<span>.</span><span>sayName</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n    <span>console</span><span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>name<span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n<span><span>@</span><span>logclass</span></span>\n<span>class</span> <span>Web</span> <span>{</span>\n  <span>public</span> name<span>:</span><span>string</span><span>;</span>\n  <span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>\n    <span>this</span><span>.</span>name <span>=</span> name\n  <span>}</span>\n<span>}</span>\n<span>let</span> person<span>:</span><span>any</span>  <span>=</span> <span>new</span> <span>Web</span><span>(</span><span>'linxing'</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>person<span>)</span><span>;</span>\nperson<span>.</span><span>sayName</span><span>(</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"_3-装饰器工厂-带参\" tabindex=\"-1\"> 3. 装饰器工厂（带参）</h3>\n<div><pre><code><span>// 装饰器</span>\n<span>function</span> <span>logclass</span><span>(</span>params<span>:</span><span>string</span><span>)</span><span>{</span>\n  <span>return</span> <span>function</span><span>(</span>target<span>:</span><span>any</span><span>)</span><span>{</span>\nq    target<span>.</span>prototype<span>.</span>apiUrl <span>=</span> params<span>;</span>\n  <span>}</span>\n<span>}</span>\n<span><span>@</span><span>logclass</span></span><span>(</span><span>'http://www.itying.com/api'</span><span>)</span>\n<span>class</span> <span>Web</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>)</span><span>{</span><span>}</span>\n<span>}</span>\n<span>let</span> person<span>:</span><span>any</span>  <span>=</span> <span>new</span> <span>Web</span><span>(</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span>apiUrl<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"_4-类装饰器重载-类的构造函数\" tabindex=\"-1\"> 4. 类装饰器重载 类的构造函数</h3>\n<div><pre><code><span>// 装饰器</span>\n<span>function</span> <span>logclass</span><span>(</span>target<span>:</span><span>any</span><span>)</span><span>{</span>\n  <span>console</span><span>.</span><span>log</span><span>(</span>target<span>)</span><span>;</span>\n  <span>return</span> <span>class</span> <span><span>extends</span></span> target<span>{</span>\n    apiUlr<span>:</span><span>any</span> <span>=</span> <span>'我是修改过后的数据'</span><span>;</span>\n    <span>getData</span><span>(</span><span>)</span><span>{</span>\n      <span>console</span><span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>apiUlr<span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n<span><span>@</span><span>logclass</span></span>\n<span>class</span> <span>Web</span> <span>{</span>\n  <span>public</span> apiUlr<span>:</span> <span>string</span> <span>|</span> <span>undefined</span><span>;</span>\n  <span>constructor</span><span>(</span><span>)</span><span>{</span>\n    <span>this</span><span>.</span>apiUlr <span>=</span> <span>'我是构造函数里的apiurl'</span>\n  <span>}</span>\n  <span>getData</span><span>(</span><span>)</span><span>{</span><span>}</span>\n<span>}</span>\n<span>let</span> person<span>:</span><span>any</span>  <span>=</span> <span>new</span> <span>Web</span><span>(</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span>apiUlr<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"三、属性装饰器\" tabindex=\"-1\"> 三、属性装饰器</h2>\n<blockquote>\n<p><strong>内容正在创建中……</strong></p>\n</blockquote>\n",
      "date_published": "2022-07-31T09:25:53.000Z",
      "date_modified": "2022-07-31T09:25:53.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "TypeScript函数",
      "url": "https://brysonlin.github.io/blog/blog/code/language/typescript/fn.html",
      "id": "https://brysonlin.github.io/blog/blog/code/language/typescript/fn.html",
      "content_html": "<h2 id=\"一、typescript函数\" tabindex=\"-1\"> 一、TypeScript函数</h2>\n<ol>\n<li>\n<p>es5中定义方法</p>\n<div><pre><code><span>// 函数声明式</span>\n<span>function</span> <span>sun</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>;</span>\n<span>// 匿名函数</span>\n<span>let</span> <span>person</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span><span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div></li>\n<li>\n<p>TypeScript中定义方法</p>\n<div><pre><code><span>// 函数声明式</span>\n<span>function</span> <span>sun</span><span>(</span><span>)</span><span>:</span>viod<span>{</span><span>}</span><span>;</span>\n<span>// 匿名函数</span>\n<span>let</span> person <span>=</span> <span>funciton</span><span>(</span><span>)</span><span>:</span><span>string</span><span>{</span> <span>return</span>  <span>''</span><span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div></li>\n</ol>\n<h2 id=\"二、函数方法传参\" tabindex=\"-1\"> 二、函数方法传参</h2>\n<ol>\n<li>\n<p>函数声明</p>\n<div><pre><code><span>function</span> <span>getInfo</span><span>(</span>name<span>:</span> <span>string</span><span>,</span> age<span>:</span> <span>number</span><span>)</span><span>:</span> <span>string</span><span>{</span> \n\t<span>return</span> <span><span>`</span><span>我的名字叫</span><span><span>${</span>name<span>}</span></span><span>,今年</span><span><span>${</span>age<span>}</span></span><span>岁</span><span>`</span></span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div></li>\n<li>\n<p>匿名函数</p>\n<div><pre><code><span>let</span> <span>getInfo</span> <span>=</span> <span>function</span><span>(</span>name<span>:</span> <span>string</span><span>,</span> age<span>:</span> <span>number</span><span>)</span><span>:</span> viod<span>{</span> \n\t<span>console</span><span>.</span><span>log</span><span>(</span><span><span>`</span><span>我的名字叫</span><span><span>${</span>name<span>}</span></span><span>,今年</span><span><span>${</span>age<span>}</span></span><span>岁</span><span>`</span></span><span>)</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div></li>\n</ol>\n<h2 id=\"三、方法的可选参数\" tabindex=\"-1\"> 三、方法的可选参数</h2>\n<ol>\n<li>\n<p>es5 里面方法的实参和形参可以不一样，但是 ts 中必须一样，如果不一样就需要配置可选参数</p>\n</li>\n<li>\n<p>注意！可选参数必须配到参数的最后面</p>\n<div><pre><code><span>let</span> <span>getInfo</span> <span>=</span> <span>function</span><span>(</span>name<span>:</span> <span>string</span><span>,</span> age<span>?</span><span>:</span> <span>number</span><span>)</span><span>:</span> viod<span>{</span> \n\t<span>if</span><span>(</span>age<span>)</span><span>{</span>\n\t\t<span>console</span><span>.</span><span>log</span><span>(</span><span><span>`</span><span>我的名字叫</span><span><span>${</span>name<span>}</span></span><span>,今年</span><span><span>${</span>age<span>}</span></span><span>岁</span><span>`</span></span><span>)</span>\n\t<span>}</span><span>else</span><span>{</span>\n\t\t<span>console</span><span>.</span><span>log</span><span>(</span><span>'哈哈哈'</span><span>)</span>\n\t<span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n</ol>\n<h2 id=\"四、方法的默认参数\" tabindex=\"-1\"> 四、方法的默认参数</h2>\n<ol>\n<li>\n<p>es5 中是不能配置默认传参的，es6 和 ts 可配置默认参数</p>\n<div><pre><code>\n<span>let</span> <span>getInfo</span> <span>=</span> <span>function</span><span>(</span>name<span>:</span> <span>string</span><span>,</span> age<span>:</span> <span>number</span> <span>=</span> <span>23</span><span>)</span><span>:</span> viod<span>{</span> \n\t<span>if</span><span>(</span>age<span>)</span><span>{</span>\n\t\t<span>console</span><span>.</span><span>log</span><span>(</span><span><span>`</span><span>我的名字叫</span><span><span>${</span>name<span>}</span></span><span>,今年</span><span><span>${</span>age<span>}</span></span><span>岁</span><span>`</span></span><span>)</span>\n\t<span>}</span><span>else</span><span>{</span>\n\t\t<span>console</span><span>.</span><span>log</span><span>(</span><span>'哈哈哈'</span><span>)</span>\n\t<span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n</ol>\n<h2 id=\"五、函数剩余参数\" tabindex=\"-1\"> 五、函数剩余参数</h2>\n<ol>\n<li>\n<p>三点运算符 接收传递过来的所有参数</p>\n<div><pre><code><span>function</span> <span>sum</span><span>(</span>a<span>:</span><span>number</span><span>,</span> <span>...</span>result<span>:</span> <span>number</span><span>[</span><span>]</span><span>)</span><span>:</span> <span>number</span><span>{</span>\n\t<span>var</span> sum <span>=</span> <span>0</span><span>;</span>\n\t<span>for</span><span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i<span>&lt;</span>result<span>.</span>lenght<span>;</span>i<span>++</span><span>)</span><span>{</span>\n\t\tsum<span>+=</span>result<span>[</span>i<span>]</span><span>;</span>\n\t<span>}</span>\n\t<span>return</span> sum\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n</ol>\n<h2 id=\"六、函数重载\" tabindex=\"-1\"> 六、函数重载</h2>\n<ol>\n<li>\n<p>java 中方法的重载：重载指的是两个或者两个以上同名函数，但它们的参数不一样，这时会出现函数重载的情况。</p>\n</li>\n<li>\n<p>typescript 中的重载：通过为同一个函数提供多个函数类型定义来试下各种功能的目的。</p>\n</li>\n<li>\n<p>为了兼容es5，以及es6中重载的写法和java有区别</p>\n<div><pre><code><span>function</span> <span>getInfo</span><span>(</span>names<span>:</span> <span>string</span><span>)</span><span>:</span> <span>string</span><span>;</span>\n<span>function</span> <span>getInfo</span><span>(</span>age<span>:</span><span>number</span> <span>)</span><span>:</span> <span>string</span><span>;</span>\n<span>function</span> <span>getInfo</span><span>(</span>str<span>:</span><span>any</span><span>)</span><span>:</span><span>any</span> <span>{</span>\n\t<span>if</span><span>(</span><span>typeof</span> str <span>===</span> <span>'string'</span><span>)</span><span>{</span>\n\t\t<span>return</span> <span><span>`</span><span>我叫：</span><span><span>${</span>str<span>}</span></span><span>`</span></span>\n\t<span>}</span><span>else</span><span>{</span>\n\t\t<span>return</span> <span><span>`</span><span>我的年龄是</span><span><span>${</span>str<span>}</span></span><span>`</span></span>\n\t<span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n</ol>\n",
      "date_published": "2022-07-31T09:25:53.000Z",
      "date_modified": "2022-07-31T09:25:53.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "泛型",
      "url": "https://brysonlin.github.io/blog/blog/code/language/typescript/genericity.html",
      "id": "https://brysonlin.github.io/blog/blog/code/language/typescript/genericity.html",
      "content_html": "<p>一、泛型的概念：</p>\n<div><p>提示</p>\n<ul>\n<li>\n<p>软件工程中，我们不仅要创建一致的定义良好的 API，同时也要考虑可重用性。组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。</p>\n</li>\n<li>\n<p>在像 C# 和 Java 这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类的数据。这样用户就可以以自己的数据类型来使用组件。</p>\n</li>\n<li>\n<p>通俗理解：<strong>泛型就是解决 类 接口 方法的复用性、以及对不特定数据类型的支持。</strong></p>\n</li>\n</ul>\n</div>\n<h2 id=\"二、泛型函数\" tabindex=\"-1\"> 二、泛型函数</h2>\n<ol>\n<li>\n<div><pre><code><span>// 泛型：可以支持不特定的数据类型  要求：传入的参数和返回的的参数一致</span>\n<span>// T表示泛型，具体什么类型是调用这个方法的时候决定的</span>\n\t<span>function</span> <span><span>getData</span><span><span>&lt;</span><span>T</span><span>></span></span></span><span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>T</span><span>{</span>\n\t\t<span>return</span> value<span>;</span>\n\t<span>}</span>\n\t<span><span>getData</span><span><span>&lt;</span><span>number</span><span>></span></span></span><span>(</span><span>123</span><span>)</span>\n\n\t<span>function</span> <span><span>getData</span><span><span>&lt;</span><span>T</span><span>></span></span></span><span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>any</span><span>{</span>\n\t\t<span>return</span> value<span>;</span>\n\t<span>}</span>\n\t<span><span>getData</span><span><span>&lt;</span><span>number</span><span>></span></span></span><span>(</span><span>123</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n</ol>\n<h2 id=\"三、泛型类\" tabindex=\"-1\"> 三、泛型类</h2>\n<ol>\n<li>\n<p>泛型类：比如有个最小堆算法，需要同时支持返回数字和字符串你两种类型。通过类的泛型来实现</p>\n<div><pre><code><span>class</span> <span>MinClass<span>&lt;</span><span>T</span><span>></span></span> <span>{</span>\n  <span>public</span> list<span>:</span> <span>T</span><span>[</span><span>]</span> <span>=</span> <span>[</span><span>]</span><span>;</span>\n  <span>add</span><span>(</span>num<span>:</span> <span>T</span><span>)</span><span>:</span> <span>T</span><span>[</span><span>]</span><span>{</span>\n    <span>this</span><span>.</span>list<span>.</span><span>push</span><span>(</span>num<span>)</span>\n    <span>return</span> <span>this</span><span>.</span>list\n  <span>}</span>\n  <span>minNum</span><span>(</span><span>)</span><span>:</span><span>T</span><span>{</span>\n    <span>let</span> min <span>=</span> <span>this</span><span>.</span>list<span>[</span><span>0</span><span>]</span><span>;</span>\n    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>this</span><span>.</span>list<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n      <span>const</span> element <span>=</span> <span>this</span><span>.</span>list<span>[</span>i<span>]</span><span>;</span>\n      <span>if</span> <span>(</span>min <span>></span> element<span>)</span> <span>{</span>\n        min <span>=</span> element\n      <span>}</span>\n    <span>}</span>\n    <span>return</span> min\n  <span>}</span>\n<span>}</span>\n<span>let</span> person <span>=</span> <span>new</span> <span>MinClass<span>&lt;</span><span>string</span><span>></span></span><span>(</span><span>)</span><span>;</span>\t\t<span>// 实例化类，并且证明类的泛型是number </span>\n<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span><span>add</span><span>(</span><span>'a'</span><span>)</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span><span>add</span><span>(</span><span>'c'</span><span>)</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span><span>add</span><span>(</span><span>'e'</span><span>)</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span><span>minNum</span><span>(</span><span>)</span><span>)</span><span>;</span>\t\t\t\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n</ol>\n<h2 id=\"四、泛型接口\" tabindex=\"-1\"> 四、泛型接口</h2>\n<ol>\n<li>\n<div><pre><code><span>// 泛型接口</span>\n<span>interface</span> <span>ConfigFn</span><span>{</span>\n\t<span>&lt;</span><span>T</span><span>></span><span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>T</span><span>;</span>\n<span>}</span>\n<span>let</span> getData<span>:</span><span>ConfigFn</span> <span>=</span> <span>function</span><span>&lt;</span><span>T</span><span>></span><span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>T</span><span>{</span>\n\t<span>return</span> value<span>;</span>\n<span>}</span>\n<span><span>getData</span><span><span>&lt;</span><span>string</span><span>></span></span></span><span>(</span><span>'张三'</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n<li>\n<div><pre><code><span>// 泛型接口</span>\n<span>interface</span> <span>ConfigFn<span>&lt;</span><span>T</span><span>></span></span><span>{</span>\n\t<span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>T</span><span>;</span>\n<span>}</span>\n<span>function</span> <span><span>getData</span><span><span>&lt;</span><span>T</span><span>></span></span></span><span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>T</span><span>{</span>\n\t<span>return</span> value<span>;</span>\n<span>}</span>\n<span>let</span> myGetData<span>:</span>ConfigFn<span>&lt;</span><span>string</span><span>></span> <span>=</span> getData<span>;</span>\n<span>myGetData</span><span>(</span><span>'张三'</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>\n</ol>\n<h2 id=\"五、typescript-泛型类-把类作为参数类型的泛型类\" tabindex=\"-1\"> 五、TypeScript 泛型类 把类作为参数类型的泛型类</h2>\n<div><pre><code><span>// 操作数据库的泛型类</span>\ncalss MysqlDb<span>&lt;</span><span>T</span><span>></span><span>{</span>\n\t<span>add</span><span>(</span>info<span>:</span><span>T</span><span>)</span><span>:</span><span>boolean</span><span>{</span>\n\t\t<span>console</span><span>.</span><span>log</span><span>(</span>info<span>)</span><span>;</span>\n\t\t<span>return</span> <span>true</span>\n\t<span>}</span>\n<span>}</span>\n\n<span>//1、定义一个User类和数据库进行映射</span>\n\n<span>class</span> <span>User</span><span>{</span>\n    username<span>:</span><span>string</span> <span>|</span> <span>undefined</span><span>;</span>\n    pasword<span>:</span><span>string</span> <span>|</span> <span>undefined</span><span>;</span>\n<span>}</span>\n<span>var</span> u <span>=</span> <span>new</span> <span>User</span><span>(</span><span>)</span><span>;</span>\nu<span>.</span>username <span>=</span> <span>'张三'</span>；\nu<span>.</span>password <span>=</span> <span>'123456'</span><span>;</span>\n<span>var</span> Db <span>=</span> <span>new</span> <span>MysqlDb<span>&lt;</span>User<span>></span></span><span>(</span><span>)</span><span>;</span>\nDb<span>.</span><span>add</span><span>(</span>u<span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"六、统一封装-mysql、mssql、mongodb\" tabindex=\"-1\"> 六、统一封装 Mysql、Mssql、mongodb</h2>\n<ol>\n<li>功能：定义一个操作数据库的库  支持 Mysql Mssql MongoDb</li>\n<li>要求：Mysql Mssql MongoDb 功能一样 都有 add  update delete get方法</li>\n<li>注意：约束统一的规范、以及代码重用</li>\n<li>解决方案：需要约束规范所以要定义接口，需要代码重用所以用到泛型\n<ol>\n<li>接口：在面向对象的编程中，接口时一种规范的定义，它定义了行为和动作的归覅能否</li>\n<li>泛型 通俗理解：泛型就是解决 类 接口 方法的复用性。</li>\n</ol>\n</li>\n</ol>\n<div><pre><code><span>interface</span> <span><span>DBI</span><span>&lt;</span><span>T</span><span>></span></span><span>{</span>\n    <span>add</span><span>(</span>info<span>:</span><span>T</span><span>)</span><span>:</span><span>boolean</span><span>;</span>\n    <span>update</span><span>(</span>info<span>:</span><span>T</span><span>,</span>di<span>:</span><span>number</span><span>)</span><span>:</span><span>boolean</span><span>;</span>\n    <span>delete</span><span>(</span>id<span>:</span><span>number</span><span>)</span><span>:</span><span>boolean</span><span>;</span>\n    <span>get</span><span>(</span>id<span>:</span><span>number</span><span>)</span><span>:</span><span>any</span><span>[</span><span>]</span><span>;</span>\n<span>}</span>\n<span>// 定义一个操作mysql数据库的类     注意：要实现泛型接口 这个类也应该是一个泛型类</span>\n<span>class</span> <span>MysqlDb<span>&lt;</span><span>T</span><span>></span></span> <span>implements</span> <span><span>DBI</span><span>&lt;</span><span>T</span><span>></span></span><span>{</span>\n  <span>add</span><span>(</span>info<span>:</span> <span>T</span><span>)</span><span>:</span> <span>boolean</span> <span>{</span>\n    <span>console</span><span>.</span><span>log</span><span>(</span>info<span>)</span>\n    <span>return</span> <span>true</span>\n  <span>}</span>\n  <span>update</span><span>(</span>info<span>:</span> <span>T</span><span>,</span> di<span>:</span> <span>number</span><span>)</span><span>:</span> <span>boolean</span> <span>{</span>\n    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>\"Method not implemented.\"</span><span>)</span><span>;</span>\n  <span>}</span>\n  <span>delete</span><span>(</span>id<span>:</span> <span>number</span><span>)</span><span>:</span> <span>boolean</span> <span>{</span>\n    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>\"Method not implemented.\"</span><span>)</span><span>;</span>\n  <span>}</span>\n  <span>get</span><span>(</span>id<span>:</span> <span>number</span><span>)</span><span>:</span> <span>any</span><span>[</span><span>]</span> <span>{</span>\n    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>\"Method not implemented.\"</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n<span>class</span> <span>User</span><span>{</span>\n    userName<span>:</span> <span>string</span> <span>|</span> <span>undefined</span><span>;</span>\n    password<span>:</span> <span>string</span> <span>|</span> <span>undefined</span><span>;</span>\n<span>}</span>\n<span>let</span> person <span>=</span> <span>new</span> <span>User</span><span>(</span><span>)</span><span>;</span>\nperson<span>.</span>userName <span>=</span> <span>'linxing'</span><span>;</span>\nperson<span>.</span>password <span>=</span> <span>'123456'</span>\n\n<span>let</span> OMysqlDb <span>=</span> <span>new</span> <span>MysqlDb<span>&lt;</span>User<span>></span></span><span>(</span><span>)</span>\nOMysqlDb<span>.</span><span>add</span><span>(</span>person<span>)</span><span>;</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-07-31T09:25:53.000Z",
      "date_modified": "2022-07-31T09:25:53.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "接口",
      "url": "https://brysonlin.github.io/blog/blog/code/language/typescript/interface.html",
      "id": "https://brysonlin.github.io/blog/blog/code/language/typescript/interface.html",
      "content_html": "<h2 id=\"一、typescrip中的接口\" tabindex=\"-1\"> 一、TypeScrip中的接口</h2>\n<div><p>提示</p>\n<ul>\n<li>\n<ol>\n<li>接口的作用：<code>在面向对象的编程中，接口时一种规范的定义，它定义了行为和动作的规范，在程序设计里面，接口起到一种限制和规范的作用。</code>接口定义了某一批类所需要遵守的规范，接口不关心这些类的内部状态数据，也不关心这些类里方法的实现细节，它只规定这批类里必须提供某些方法，提供这些方法的类就可以满足实际需要。typescript 中的接口类似于 java ，同时还增加了更灵活的接口类型，包括 <strong>属性、函数、可索引、和类</strong> 等。</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>定义行为和动作的规范。对批量方法进行约束  interface</li>\n</ol>\n</li>\n</ul>\n</div>\n<h2 id=\"二、属性类接口\" tabindex=\"-1\"> 二、属性类接口</h2>\n<h3 id=\"_1-就是传入对象的约束-属性接口\" tabindex=\"-1\"> 1. 就是传入对象的约束  属性接口</h3>\n<div><pre><code><span>interface</span> <span>FullName</span><span>{</span>\n\tfirstName<span>:</span> <span>string</span><span>;</span>\t\t<span>// 注意，分号结束</span>\n\tsecondName<span>:</span> <span>string</span><span>;</span>\n<span>}</span>\n<span>function</span> <span>printName</span><span>(</span>name<span>:</span>FullName<span>)</span><span>{</span>\n\t<span>// 必须传入firstName  secondName</span>\n    <span>console</span><span>.</span><span>log</span><span>(</span>name<span>.</span>firstName <span>+</span> name<span>.</span>secondName<span>)</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"_2-可选接口\" tabindex=\"-1\"> 2. 可选接口</h3>\n<div><pre><code><span>interface</span> <span>FullName</span><span>(</span><span>)</span><span>{</span>\n\tfirstName<span>:</span> <span>string</span><span>;</span>\n\tsecondName<span>?</span><span>:</span><span>string</span>\n<span>}</span>\n<span>function</span> <span>getName</span><span>(</span>name<span>:</span>FullName<span>)</span><span>{</span>\n\t<span>console</span><span>.</span><span>log</span><span>(</span>name<span>)</span>\n<span>}</span>\n<span>// 参数的顺序可以不一样</span>\n<span>getName</span><span>(</span><span>{</span>\n\tfirstName<span>:</span><span>'linxing'</span><span>;</span>\n\tsecondName<span>:</span><span>'liner'</span>\n<span>}</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"_3-示例\" tabindex=\"-1\"> 3. 示例</h3>\n<div><pre><code><span>interface</span> <span>Config</span><span>{</span>\n\ttype<span>:</span> <span>string</span><span>;</span>\n\turl<span>:</span> <span>string</span><span>;</span>\n\tdata<span>?</span><span>:</span> <span>string</span><span>;</span>\n\tdataType<span>:</span> <span>string</span>\n<span>}</span>\n<span>function</span> <span>ajax</span><span>(</span> config<span>:</span> Config <span>)</span><span>{</span>\n    <span>var</span> xhr <span>=</span> <span>new</span> <span>XMLHttpRequest</span><span>(</span><span>)</span><span>;</span>\n    xhr<span>.</span><span>open</span><span>(</span> config<span>.</span>get<span>,</span> config<span>.</span>url<span>,</span> <span>true</span><span>)</span><span>;</span>\n    xhr<span>.</span><span>send</span><span>(</span>config<span>.</span>data<span>)</span><span>;</span>\n    xhr<span>.</span><span>onreadystatechange</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span>\n        <span>if</span><span>(</span>xhr<span>.</span>readyState <span>===</span> <span>4</span> <span>&amp;&amp;</span> xhr<span>.</span>status <span>==</span> <span>200</span><span>)</span><span>{</span>\n            <span>if</span><span>(</span>confiig<span>.</span>dataType <span>==</span> <span>'json'</span><span>)</span><span>{</span>\n                <span>JSON</span><span>.</span><span>perse</span><span>(</span>xhr<span>.</span>responseText<span>)</span>\n            <span>}</span><span>else</span><span>{</span>\n                <span>console</span><span>.</span><span>log</span><span>(</span>xhr<span>.</span>reponseText<span>)</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n<span>ajax</span><span>(</span><span>{</span>\n    type<span>:</span><span>'get'</span><span>,</span>\n    data<span>:</span><span>'name:zhang'</span><span>,</span>\n    url<span>:</span> <span>'http://www.baidu.com'</span><span>,</span>\n    dataType<span>:</span><span>'json'</span>\n<span>}</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"三、函数类接口\" tabindex=\"-1\"> 三、函数类接口</h2>\n<h3 id=\"_1-函数类型接口-对方法传入的参数-以及返回值进行约束-批量约束\" tabindex=\"-1\"> 1. 函数类型接口：对方法传入的参数 以及返回值进行约束  批量约束</h3>\n<h3 id=\"_2-加密的函数类型接口\" tabindex=\"-1\"> 2. 加密的函数类型接口</h3>\n<div><pre><code><span>interface</span> <span>encrypt</span><span>{</span>\n\t<span>(</span>key<span>:</span><span>string</span><span>,</span>value<span>:</span><span>string</span><span>)</span><span>:</span><span>string</span><span>;</span>\n<span>}</span>\n<span>var</span> md5<span>:</span><span>encrypt</span> <span>=</span> <span>function</span> <span>(</span>key<span>:</span><span>string</span><span>,</span>value<span>:</span><span>string</span><span>)</span><span>:</span> <span>string</span><span>{</span>\n\t<span>// 模拟操作</span>\n\t<span>return</span> key <span>+</span> name\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"四、可索引接口\" tabindex=\"-1\"> 四、可索引接口</h2>\n<h3 id=\"_1-可索引接口-对数组、对象的约束-不常用\" tabindex=\"-1\"> 1. 可索引接口：对数组、对象的约束（不常用）</h3>\n<h3 id=\"_2-数组的约束\" tabindex=\"-1\"> 2. 数组的约束</h3>\n<div><pre><code><span>interface</span> <span>UserArr</span><span>{</span>\n\t<span>[</span>index<span>:</span><span>number</span><span>]</span><span>:</span><span>string</span>\n<span>}</span>\n<span>let</span> arr<span>:</span>UserArr <span>=</span> <span>[</span><span>'lixing'</span><span>]</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><h3 id=\"_3-对象的约束\" tabindex=\"-1\"> 3. 对象的约束</h3>\n<div><pre><code><span>interface</span> <span>UserArr</span><span>{</span>\n\t<span>[</span>index<span>:</span><span>string</span><span>]</span><span>:</span><span>any</span>\n<span>}</span>\n<span>let</span> arr<span>:</span>UserArr <span>=</span> <span>{</span>\n\tname<span>:</span> <span>'张三'</span>，\n\tage<span>:</span> <span>23</span>\t\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"五、类类型接口\" tabindex=\"-1\"> 五、类类型接口</h2>\n<h3 id=\"_1-类类型接口-对类的约束-和-抽象类比较相似\" tabindex=\"-1\"> 1. 类类型接口：对类的约束 和 抽象类比较相似</h3>\n<div><pre><code><span>interface</span> <span>Animal</span><span>{</span>\n  name<span>:</span><span>string</span><span>;</span>\n  <span>eat</span><span>(</span>str<span>:</span><span>string</span><span>)</span><span>:</span><span>void</span>\n<span>}</span>\n\n<span>class</span> <span>Dog</span> <span>implements</span> <span>Animal</span><span>{</span>\n  name<span>:</span><span>string</span><span>;</span>\n  <span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>\n    <span>this</span><span>.</span>name <span>=</span> name\n  <span>}</span>\n  <span>eat</span><span>(</span><span>)</span><span>{</span>\n    <span>console</span><span>.</span><span>log</span><span>(</span><span>'小黑吃粮食！'</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n<span>let</span> p <span>=</span> <span>new</span> <span>Dog</span><span>(</span><span>'小黑'</span><span>)</span><span>;</span>\np<span>.</span><span>eat</span><span>(</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"六、接口扩展-接口可继承接口\" tabindex=\"-1\"> 六、接口扩展 接口可继承接口</h2>\n<div><pre><code><span>interface</span> <span>Animal</span><span>{</span>\n  <span>eat</span><span>(</span>foot<span>:</span><span>string</span><span>)</span><span>:</span><span>string</span><span>;</span>\n<span>}</span>\n<span>interface</span> <span>Web</span> <span>extends</span> <span>Animal</span><span>{</span>\n  <span>work</span><span>(</span><span>)</span><span>:</span><span>void</span><span>;</span>\n<span>}</span>\n\n<span>class</span> <span>Person</span> <span>implements</span> <span>Web</span><span>{</span>\n  <span>public</span> name<span>:</span><span>string</span><span>;</span>\n  <span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>\n    <span>this</span><span>.</span>name <span>=</span> name\n  <span>}</span>\n  <span>eat</span><span>(</span>foot<span>:</span><span>string</span><span>)</span><span>{</span>\n    <span>return</span> <span><span>`</span><span><span>${</span><span>this</span><span>.</span>name<span>}</span></span><span>吃</span><span><span>${</span>foot<span>}</span></span><span>`</span></span>\n  <span>}</span>\n  <span>work</span><span>(</span><span>)</span><span>{</span>\n    <span>console</span><span>.</span><span>log</span><span>(</span><span><span>`</span><span><span>${</span><span>this</span><span>.</span>name<span>}</span></span><span>敲代码</span><span>`</span></span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n<span>let</span> p <span>=</span> <span>new</span> <span>Person</span><span>(</span><span>'小林'</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>p<span>.</span><span>eat</span><span>(</span><span>'粮食'</span><span>)</span><span>)</span><span>;</span>\np<span>.</span><span>work</span><span>(</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-07-31T09:25:53.000Z",
      "date_modified": "2022-07-31T09:25:53.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Markdown",
      "url": "https://brysonlin.github.io/blog/blog/code/language/markdown/",
      "id": "https://brysonlin.github.io/blog/blog/code/language/markdown/",
      "summary": "Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。\n",
      "content_html": "<p>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>\n\n<h2 id=\"一、什么是-markdown\" tabindex=\"-1\"> 一、什么是 Markdown</h2>\n<div><p>提示</p>\n<ul>\n<li>\n<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，将格式元素添加到纯文本文档</p>\n</li>\n<li>\n<p>Markdown 允许您使用易于阅读、易于编写的纯文本格式进行编写，然后将其转换为结构上有效的 XHTML（或 HTML）</p>\n</li>\n<li>\n<p>Markdown 是由 <code>约翰·格鲁伯（John Gruber） </code>于 <strong>2004</strong> 年创建，现在是世界上最受欢迎的标记语言之一</p>\n</li>\n<li>\n<p>Markdown 编写的文档可以导出 HTML、word、图像、PDF、Epub 等多种格式的文档</p>\n</li>\n<li>\n<p>Markdown 编写的文档后缀为 <code>.md</code> 、 <code>.Markdown</code></p>\n</li>\n<li>\n<p>你可以使用文本编辑器应用程序将 Markdown 格式元素添加到纯文本文件中。活着，您可以使用 macOS、Windows、Linux、iOS 和安卓操作系统的众多 Markdown 应用程序之一。还有一些基于 web 的应用程序专门设计用于以 Markdown 方式编写</p>\n</li>\n</ul>\n</div>\n<h2 id=\"二、为什么要用-markdown\" tabindex=\"-1\"> 二、为什么要用 Markdown ?</h2>\n<div><p>提示</p>\n<ul>\n<li>\n<p>Markdown 是可移植的。包含 Markdown 格式文本的文件几乎可以使用任何应用程序打开。如果您决定不喜欢当前使用的 Markdown y 应用程序，可以将 Markdown 文件导入另一个 Markdown 应用程序。这与 Microsoft Word 等文字处理应用程序形成鲜明对比，后者将您的内容锁定为专有文件格式.</p>\n</li>\n<li>\n<p>Markdown 与平台无关。您可以再运行任何操作系统的任何设备上创建 Markdown 格式的文本.</p>\n</li>\n<li>\n<p>Markdown 无处不在： Reddit 和 GitHub 等网站支持 Markdown，许多桌面和基于 web 的应用程序都支持 Markdown.</p>\n</li>\n</ul>\n<p><strong>Markdown 可以用于任何事情，通过简单的标记语法，它可以使普通内容具有一定的格式</strong></p>\n<ul>\n<li>\n<p>整理知识，学习必记</p>\n</li>\n<li>\n<p>发布日记，杂文，所见所想</p>\n</li>\n<li>\n<p>撰写发布技术文稿（代码支持）</p>\n</li>\n<li>\n<p>撰写发布学术论文（LaTeX 公式支持）</p>\n</li>\n<li>\n<p>使用它创建网站、文档、书籍、演示、电子邮件和技术文档</p>\n</li>\n<li>\n<p>Markdown 能被使用来撰写带你字数，如：Gitbook</p>\n</li>\n<li>\n<p>当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。列如：GigHub、Gitee、GitLab 简书、掘金、reddit、Diaspora、Stack Exchange、OpenStreeMap、SourceForge 等</p>\n</li>\n</ul>\n</div>\n<h2 id=\"三、支持-markdown-的应用程序和组件-工具\" tabindex=\"-1\"> 三、支持 Markdown 的应用程序和组件，工具</h2>\n<blockquote>\n<p>支持 Markdown 的工具有很多，链接地址：<a href=\"https://www.markdownguide.org/tools/\" target=\"_blank\" rel=\"noopener noreferrer\">Markdown 工具地址</a></p>\n</blockquote>\n",
      "date_published": "2022-07-31T03:23:32.000Z",
      "date_modified": "2022-08-01T09:33:13.000Z",
      "authors": [],
      "tags": [
        "Markdown"
      ]
    },
    {
      "title": "Markdown Emoji 列表",
      "url": "https://brysonlin.github.io/blog/blog/code/language/markdown/emoji/",
      "id": "https://brysonlin.github.io/blog/blog/code/language/markdown/emoji/",
      "content_html": "<h2 id=\"人物\" tabindex=\"-1\"> 人物</h2>\n<ul>\n<li><a href=\"/code/language/markdown/emoji/people.html\">点击前往</a></li>\n</ul>\n<h2 id=\"自然\" tabindex=\"-1\"> 自然</h2>\n<ul>\n<li><a href=\"/code/language/markdown/emoji/nature.html\">点击前往</a></li>\n</ul>\n<h2 id=\"对象\" tabindex=\"-1\"> 对象</h2>\n<ul>\n<li><a href=\"/code/language/markdown/emoji/object.html\">点击前往</a></li>\n</ul>\n<h2 id=\"地点\" tabindex=\"-1\"> 地点</h2>\n<ul>\n<li><a href=\"/code/language/markdown/emoji/place.html\">点击前往</a></li>\n</ul>\n<h2 id=\"符号\" tabindex=\"-1\"> 符号</h2>\n<ul>\n<li><a href=\"/code/language/markdown/emoji/symbol.html\">点击前往</a></li>\n</ul>\n",
      "date_published": "2022-07-31T03:23:32.000Z",
      "date_modified": "2022-07-31T03:44:49.000Z",
      "authors": [],
      "tags": [
        "Markdown"
      ]
    },
    {
      "title": "跨端开发",
      "url": "https://brysonlin.github.io/blog/blog/code/",
      "id": "https://brysonlin.github.io/blog/blog/code/",
      "summary": "此处是 Mr.BrysonLin 存放的一些代码笔记。\n",
      "content_html": "<p>此处是 Mr.BrysonLin 存放的一些代码笔记。</p>\n\n<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<h3 id=\"基础\" tabindex=\"-1\"> 基础</h3>\n<ul>\n<li>\n<p><a href=\"/code/basic/\">基础知识</a></p>\n</li>\n<li>\n<p><a href=\"/code/github/\">GitHub 介绍</a></p>\n</li>\n</ul>\n<h3 id=\"前端开发\" tabindex=\"-1\"> 前端开发</h3>\n<ul>\n<li>\n<p><a href=\"/code/vue/\">Vue 相关</a></p>\n</li>\n<li>\n<p><a href=\"/code/react/\">React</a></p>\n</li>\n<li>\n<p><a href=\"/code/nodejs/\">NodeJS</a></p>\n</li>\n</ul>\n<h3 id=\"代码学习\" tabindex=\"-1\"> 代码学习</h3>\n<ul>\n<li>\n<p><a href=\"/code/language/js/\">JavaScript 教程</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/typescript/\">TypeScript 教程</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/markdown/\">Markdown 教程</a></p>\n</li>\n</ul>\n<h3 id=\"代码学习网站\" tabindex=\"-1\"> 代码学习网站</h3>\n<h3 id=\"优质网站\" tabindex=\"-1\"> 优质网站</h3>\n<ul>\n<li>\n<p><a href=\"https://www.code-nav.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">编程导航</a></p>\n</li>\n<li>\n<p><a href=\"http://nav.poetries.top/\" target=\"_blank\" rel=\"noopener noreferrer\">前端导航</a></p>\n</li>\n<li>\n<p><a href=\"https://www.frontendjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">前站导航</a></p>\n</li>\n<li>\n<p><a href=\"https://www.cxy521.com/\" target=\"_blank\" rel=\"noopener noreferrer\">CXY521</a></p>\n</li>\n<li>\n<p><a href=\"http://www.atguigu.com/download.shtml\" target=\"_blank\" rel=\"noopener noreferrer\">尚硅谷</a></p>\n</li>\n<li>\n<p><a href=\"https://wangdoc.com/\" target=\"_blank\" rel=\"noopener noreferrer\">网道</a></p>\n</li>\n<li>\n<p><a href=\"https://www.liaoxuefeng.com/\" target=\"_blank\" rel=\"noopener noreferrer\">廖雪峰的网站</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/zh-CN/\" target=\"_blank\" rel=\"noopener noreferrer\">MDN</a></p>\n</li>\n</ul>\n",
      "date_published": "2022-07-22T07:01:38.000Z",
      "date_modified": "2022-08-02T13:08:47.000Z",
      "authors": [],
      "tags": []
    }
  ]
}