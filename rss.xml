<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://brysonlin.github.io/blog/blog/rss.xml" rel="self" type="application/rss+xml"/>
    <title>林初笔墨</title>
    <link>https://brysonlin.github.io/blog/blog/</link>
    <description>林初笔墨,林初笔墨的博客,Web前端博客,前端博客,Web全栈技术博客,前端工程师博客</description>
    <language>zh-CN</language>
    <pubDate>Wed, 03 Aug 2022 01:38:24 GMT</pubDate>
    <lastBuildDate>Wed, 03 Aug 2022 01:38:24 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>书籍</category>
    <category>Markdown</category>
    <item>
      <title>学习笔记</title>
      <link>https://brysonlin.github.io/blog/blog/learning/</link>
      <guid>https://brysonlin.github.io/blog/blog/learning/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">学习笔记</source>
      <pubDate>Tue, 02 Aug 2022 13:26:11 GMT</pubDate>
      <content:encoded><![CDATA[
<h2 id="该内容正在努力建设中" tabindex="-1"> 该内容正在努力建设中 ......</h2>
<blockquote>
<p>That's a Four-Oh-Four.</p>
</blockquote>
<p><a href="/">Take me home.</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>书籍文档</title>
      <link>https://brysonlin.github.io/blog/blog/learning/books/</link>
      <guid>https://brysonlin.github.io/blog/blog/learning/books/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">书籍文档</source>
      <description>前端程序员必看书籍
</description>
      <category>书籍</category>
      <pubDate>Mon, 05 Oct 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>前端程序员必看书籍</p>

<h2 id="书籍列表" tabindex="-1"> 书籍列表</h2>
<h3 id="javascript" tabindex="-1"> JavaScript</h3>
<ul>
<li>
<p><a href="/learning/books/little-red-book(v4).html">JavaScript高级程序设计（第4版）</a></p>
</li>
<li>
<p><a href="/learning/books/js-object-oriented.html">JavaScrip面向对象编程指南（第二版）</a></p>
</li>
<li>
<p><a href="/learning/books/js-dom-programming-art.html">JavaScript DOM编程艺术(第2版)</a></p>
</li>
<li>
<p><a href="/learning/books/js-definitive-guide.html">JavaScript 权威指南（第四版）</a></p>
</li>
</ul>
<h3 id="css" tabindex="-1"> CSS</h3>
<ul>
<li><a href="/learning/books/css-definitive-guide.html">CSS权威指南 （第3版）</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Web 前端</title>
      <link>https://brysonlin.github.io/blog/blog/learning/web/</link>
      <guid>https://brysonlin.github.io/blog/blog/learning/web/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">Web 前端</source>
      <pubDate>Tue, 02 Aug 2022 13:26:11 GMT</pubDate>
      <content:encoded><![CDATA[
<h2 id="该内容正在努力建设中" tabindex="-1"> 该内容正在努力建设中 ......</h2>
<blockquote>
<p>That's a Four-Oh-Four.</p>
</blockquote>
<p><a href="/">Take me home.</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>泛应用</title>
      <link>https://brysonlin.github.io/blog/blog/generic-application/</link>
      <guid>https://brysonlin.github.io/blog/blog/generic-application/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">泛应用</source>
      <description>
主要介绍目前前端技术在主流的互联网应用形式上的开发，其中包括小程序、快应用、H5、移动 App，甚至是桌面应用，同时我们也会介绍 uni-app 这种多端统一开发框架，一份代码解决多端需求。帮你快速掌握多端开发，从容应对不同的客户端载体，向一名多端前端开发者进阶。

</description>
      <pubDate>Tue, 02 Aug 2022 13:08:47 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>主要介绍目前前端技术在主流的互联网应用形式上的开发，其中包括小程序、快应用、H5、移动 App，甚至是桌面应用，同时我们也会介绍 uni-app 这种多端统一开发框架，一份代码解决多端需求。帮你快速掌握多端开发，从容应对不同的客户端载体，向一名多端前端开发者进阶。</p>
</blockquote>

<ul>
<li>
<p>小程序</p>
</li>
<li>
<p>React Native</p>
</li>
<li>
<p>Flutter 原生 App 开发</p>
</li>
<li>
<p>Electron 桌面应用开发</p>
</li>
<li>
<p>Hybrid App 开发</p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>全栈开发</title>
      <link>https://brysonlin.github.io/blog/blog/whole-stack/</link>
      <guid>https://brysonlin.github.io/blog/blog/whole-stack/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">全栈开发</source>
      <pubDate>Tue, 02 Aug 2022 13:08:47 GMT</pubDate>
      <content:encoded><![CDATA[
<h2 id="该内容正在努力建设中" tabindex="-1"> 该内容正在努力建设中 ......</h2>
<blockquote>
<p>That's a Four-Oh-Four.</p>
</blockquote>
<p><a href="/">Take me home.</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>语言</title>
      <link>https://brysonlin.github.io/blog/blog/code/language/</link>
      <guid>https://brysonlin.github.io/blog/blog/code/language/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">语言</source>
      <description>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。
</description>
      <pubDate>Tue, 02 Aug 2022 13:08:47 GMT</pubDate>
      <content:encoded><![CDATA[<p>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>

<ul>
<li>
<p>TypeScript</p>
</li>
<li>
<p>Markdown</p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>前端进阶</title>
      <link>https://brysonlin.github.io/blog/blog/core-foundation/advanced/</link>
      <guid>https://brysonlin.github.io/blog/blog/core-foundation/advanced/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">前端进阶</source>
      <pubDate>Tue, 02 Aug 2022 13:08:47 GMT</pubDate>
      <content:encoded><![CDATA[
<h2 id="该内容正在努力建设中" tabindex="-1"> 该内容正在努力建设中 ......</h2>
<blockquote>
<p>That's a Four-Oh-Four.</p>
</blockquote>
<p><a href="/">Take me home.</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>项目实战</title>
      <link>https://brysonlin.github.io/blog/blog/core-foundation/project-training/</link>
      <guid>https://brysonlin.github.io/blog/blog/core-foundation/project-training/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">项目实战</source>
      <pubDate>Tue, 02 Aug 2022 13:08:47 GMT</pubDate>
      <content:encoded><![CDATA[
<h2 id="该内容正在努力建设中" tabindex="-1"> 该内容正在努力建设中 ......</h2>
<blockquote>
<p>That's a Four-Oh-Four.</p>
</blockquote>
<p><a href="/">Take me home.</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Electron 桌面应用开发</title>
      <link>https://brysonlin.github.io/blog/blog/generic-application/electron/</link>
      <guid>https://brysonlin.github.io/blog/blog/generic-application/electron/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">Electron 桌面应用开发</source>
      <pubDate>Tue, 02 Aug 2022 13:08:47 GMT</pubDate>
      <content:encoded><![CDATA[
<h2 id="该内容正在努力建设中" tabindex="-1"> 该内容正在努力建设中 ......</h2>
<blockquote>
<p>That's a Four-Oh-Four.</p>
</blockquote>
<p><a href="/">Take me home.</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Flutter 原生 App 开发</title>
      <link>https://brysonlin.github.io/blog/blog/generic-application/flutter/</link>
      <guid>https://brysonlin.github.io/blog/blog/generic-application/flutter/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">Flutter 原生 App 开发</source>
      <pubDate>Tue, 02 Aug 2022 13:08:47 GMT</pubDate>
      <content:encoded><![CDATA[
<h2 id="该内容正在努力建设中" tabindex="-1"> 该内容正在努力建设中 ......</h2>
<blockquote>
<p>That's a Four-Oh-Four.</p>
</blockquote>
<p><a href="/">Take me home.</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Hybrid App 开发</title>
      <link>https://brysonlin.github.io/blog/blog/generic-application/hybrid-app/</link>
      <guid>https://brysonlin.github.io/blog/blog/generic-application/hybrid-app/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">Hybrid App 开发</source>
      <pubDate>Tue, 02 Aug 2022 13:08:47 GMT</pubDate>
      <content:encoded><![CDATA[
<h2 id="该内容正在努力建设中" tabindex="-1"> 该内容正在努力建设中 ......</h2>
<blockquote>
<p>That's a Four-Oh-Four.</p>
</blockquote>
<p><a href="/">Take me home.</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>React Native</title>
      <link>https://brysonlin.github.io/blog/blog/generic-application/react-native/</link>
      <guid>https://brysonlin.github.io/blog/blog/generic-application/react-native/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">React Native</source>
      <pubDate>Tue, 02 Aug 2022 13:08:47 GMT</pubDate>
      <content:encoded><![CDATA[
<h2 id="该内容正在努力建设中" tabindex="-1"> 该内容正在努力建设中 ......</h2>
<blockquote>
<p>That's a Four-Oh-Four.</p>
</blockquote>
<p><a href="/">Take me home.</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>小程序开发</title>
      <link>https://brysonlin.github.io/blog/blog/generic-application/small-program/</link>
      <guid>https://brysonlin.github.io/blog/blog/generic-application/small-program/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">小程序开发</source>
      <pubDate>Tue, 02 Aug 2022 13:08:47 GMT</pubDate>
      <content:encoded><![CDATA[
<h2 id="该内容正在努力建设中" tabindex="-1"> 该内容正在努力建设中 ......</h2>
<blockquote>
<p>That's a Four-Oh-Four.</p>
</blockquote>
<p><a href="/">Take me home.</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>React</title>
      <link>https://brysonlin.github.io/blog/blog/code/react-family-meals/react/</link>
      <guid>https://brysonlin.github.io/blog/blog/code/react-family-meals/react/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">React</source>
      <pubDate>Tue, 02 Aug 2022 13:08:47 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="我是-react-笔记" tabindex="-1"> 我是 React 笔记</h2>
]]></content:encoded>
    </item>
    <item>
      <title>React</title>
      <link>https://brysonlin.github.io/blog/blog/code/react-family-meals/redux/</link>
      <guid>https://brysonlin.github.io/blog/blog/code/react-family-meals/redux/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">React</source>
      <pubDate>Tue, 02 Aug 2022 13:08:47 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="我是-react-笔记" tabindex="-1"> 我是 React 笔记</h2>
]]></content:encoded>
    </item>
    <item>
      <title>Vue-Route 路由</title>
      <link>https://brysonlin.github.io/blog/blog/code/vue-family-meals/vue-router/</link>
      <guid>https://brysonlin.github.io/blog/blog/code/vue-family-meals/vue-router/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">Vue-Route 路由</source>
      <pubDate>Tue, 02 Aug 2022 13:08:47 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="vue-route-路由" tabindex="-1"> Vue-Route 路由</h2>
]]></content:encoded>
    </item>
    <item>
      <title>CSS布局</title>
      <link>https://brysonlin.github.io/blog/blog/core-foundation/advanced/css-layout/</link>
      <guid>https://brysonlin.github.io/blog/blog/core-foundation/advanced/css-layout/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">CSS布局</source>
      <pubDate>Tue, 02 Aug 2022 13:08:47 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="我是-css-布局-笔记" tabindex="-1"> 我是 CSS 布局 笔记</h2>
]]></content:encoded>
    </item>
    <item>
      <title>JavaScript高级</title>
      <link>https://brysonlin.github.io/blog/blog/core-foundation/advanced/js-senior/</link>
      <guid>https://brysonlin.github.io/blog/blog/core-foundation/advanced/js-senior/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">JavaScript高级</source>
      <pubDate>Tue, 02 Aug 2022 13:08:47 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="我是-javascript-笔记" tabindex="-1"> 我是 JavaScript 笔记</h2>
]]></content:encoded>
    </item>
    <item>
      <title>CSS/CSS3 基础</title>
      <link>https://brysonlin.github.io/blog/blog/core-foundation/basic/css/</link>
      <guid>https://brysonlin.github.io/blog/blog/core-foundation/basic/css/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">CSS/CSS3 基础</source>
      <pubDate>Tue, 02 Aug 2022 13:08:47 GMT</pubDate>
      <content:encoded><![CDATA[
<h2 id="该内容正在努力建设中" tabindex="-1"> 该内容正在努力建设中 ......</h2>
<blockquote>
<p>That's a Four-Oh-Four.</p>
</blockquote>
<p><a href="/">Take me home.</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>HTML/HTML5基础介绍</title>
      <link>https://brysonlin.github.io/blog/blog/core-foundation/basic/html/</link>
      <guid>https://brysonlin.github.io/blog/blog/core-foundation/basic/html/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">HTML/HTML5基础介绍</source>
      <pubDate>Tue, 02 Aug 2022 13:08:47 GMT</pubDate>
      <content:encoded><![CDATA[
<h2 id="该内容正在努力建设中" tabindex="-1"> 该内容正在努力建设中 ......</h2>
<blockquote>
<p>That's a Four-Oh-Four.</p>
</blockquote>
<p><a href="/">Take me home.</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>JavaScript</title>
      <link>https://brysonlin.github.io/blog/blog/core-foundation/basic/js/</link>
      <guid>https://brysonlin.github.io/blog/blog/core-foundation/basic/js/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">JavaScript</source>
      <pubDate>Tue, 02 Aug 2022 13:08:47 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="我是-javascript-笔记" tabindex="-1"> 我是 JavaScript 笔记</h2>
]]></content:encoded>
    </item>
    <item>
      <title>CSS实战案例</title>
      <link>https://brysonlin.github.io/blog/blog/core-foundation/project-training/css-actual-combat/</link>
      <guid>https://brysonlin.github.io/blog/blog/core-foundation/project-training/css-actual-combat/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">CSS实战案例</source>
      <pubDate>Tue, 02 Aug 2022 13:08:47 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="javascript-实战案例" tabindex="-1"> JavaScript 实战案例</h2>
]]></content:encoded>
    </item>
    <item>
      <title>HTML实战案例</title>
      <link>https://brysonlin.github.io/blog/blog/core-foundation/project-training/html-actual-combat/</link>
      <guid>https://brysonlin.github.io/blog/blog/core-foundation/project-training/html-actual-combat/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">HTML实战案例</source>
      <pubDate>Tue, 02 Aug 2022 13:08:47 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="html-实战案例" tabindex="-1"> HTML 实战案例</h2>
]]></content:encoded>
    </item>
    <item>
      <title>JavaScript 实战案例</title>
      <link>https://brysonlin.github.io/blog/blog/core-foundation/project-training/js-actual-combat/</link>
      <guid>https://brysonlin.github.io/blog/blog/core-foundation/project-training/js-actual-combat/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">JavaScript 实战案例</source>
      <pubDate>Tue, 02 Aug 2022 13:08:47 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="javascript-实战案例" tabindex="-1"> JavaScript 实战案例</h2>
]]></content:encoded>
    </item>
    <item>
      <title>Markdown扩展语法</title>
      <link>https://brysonlin.github.io/blog/blog/code/language/markdown/extension.html</link>
      <guid>https://brysonlin.github.io/blog/blog/code/language/markdown/extension.html</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">Markdown扩展语法</source>
      <category>Markdown</category>
      <pubDate>Mon, 01 Aug 2022 14:50:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="表格" tabindex="-1"> 表格</h2>
<blockquote>
<p>要添加表格，请使用三个或更多连字符 ( <code>---</code>) 来创建每一列的标题，并使用竖线 ( <code>|</code>) 分隔每一列。为了兼容性，您还应该在行的任一端添加一个管道。</p>
</blockquote>
<div><pre><code><span><span><span>|</span><span> Syntax    </span><span>|</span><span> Description </span><span>|</span>
</span><span><span>|</span> <span>---------</span> <span>|</span> <span>-----------</span> <span>|</span>
</span><span><span>|</span><span> Header    </span><span>|</span><span> Title       </span><span>|</span>
<span>|</span><span> Paragraph </span><span>|</span><span> Text        </span><span>|</span>
</span></span></code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><p>渲染的输出如下所示:</p>
<table>
<thead>
<tr>
<th>Syntax</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Header</td>
<td>Title</td>
</tr>
<tr>
<td>Paragraph</td>
<td>Text</td>
</tr>
</tbody>
</table>
<blockquote>
<p>单元格宽度可以变化，如下所示。渲染的输出看起来是一样的。</p>
</blockquote>
<div><pre><code><span><span><span>|</span><span> Syntax    </span><span>|</span><span> Description </span><span>|</span>
</span><span><span>|</span> <span>---------</span> <span>|</span> <span>-----------</span> <span>|</span>
</span><span><span>|</span><span> Header    </span><span>|</span><span> Title       </span><span>|</span>
<span>|</span><span> Paragraph </span><span>|</span><span> Text        </span><span>|</span>
</span></span></code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><h3 id="表格内的对齐方式用" tabindex="-1"> 表格内的对齐方式用</h3>
<blockquote>
<p>您可以通过在标题行内连字符的<code>左侧、右侧或两侧添加冒号 (:) 来将列中的文本向左、向右或居中对齐</code>。</p>
</blockquote>
<div><pre><code><span><span><span>|</span><span> 左对齐    </span><span>|</span><span> 居中对齐 </span><span>|</span><span>      右对齐 </span><span>|</span>
</span><span><span>|</span> <span>:--------</span> <span>|</span> <span>:------:</span> <span>|</span> <span>----------:</span> <span>|</span>
</span><span><span>|</span><span> Header    </span><span>|</span><span>  Title   </span><span>|</span><span> Here's this </span><span>|</span>
<span>|</span><span> Paragraph </span><span>|</span><span>   Text   </span><span>|</span><span>    And more </span><span>|</span>
</span></span></code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><p>渲染的输出如下所示:</p>
<table>
<thead>
<tr>
<th style="text-align:left">左对齐</th>
<th style="text-align:center">居中对齐</th>
<th style="text-align:right">右对齐</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Header</td>
<td style="text-align:center">Title</td>
<td style="text-align:right">Here's this</td>
</tr>
<tr>
<td style="text-align:left">Paragraph</td>
<td style="text-align:center">Text</td>
<td style="text-align:right">And more</td>
</tr>
</tbody>
</table>
<h3 id="格式化表格中的文本" tabindex="-1"> 格式化表格中的文本</h3>
<blockquote>
<p>您可以格式化表格中的文本。例如，您可以添加<code>链接</code>、<code>代码</code>（仅在反引号 ( `) 中的单词或短语，而不是<strong>代码块</strong>）和<code>强调</code>。</p>
<blockquote>
<p>您不能使用标题、块引用、列表、水平线、图像或大多数 HTML 标记。</p>
</blockquote>
</blockquote>
<h2 id="围栏代码块" tabindex="-1"> 围栏代码块</h2>
<blockquote>
<p>基本的 Markdown 语法允许您通过将行<code>缩进四个空格</code>或<code>一个制表符</code>来创建代码块。如果您觉得不方便，请尝试使用围栏代码块。根据您的 Markdown 处理器或编辑器，您将在代码块前后的行上使用三个反引号 ( ```) 或三个波浪号 ( )。~~~最好的部分？您不必缩进任何行！</p>
</blockquote>
<div><pre><code>{
"firstName": "John",
"lastName": "Smith",
"age": 25
}
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><p>渲染的输出如下所示:</p>
<p>{
&quot;firstName&quot;: &quot;John&quot;,
&quot;lastName&quot;: &quot;Smith&quot;,
&quot;age&quot;: 25
}</p>
<h3 id="语法高亮" tabindex="-1"> 语法高亮</h3>
<blockquote>
<p>许多 Markdown 处理器支持对受保护的代码块进行语法高亮显示。此功能允许您为编写代码的任何语言添加颜色突出显示。要添加语法突出显示，请在受保护的代码块之前的反引号旁边指定一种语言。</p>
</blockquote>
<div><pre><code><span><span>```</span><span>json</span>
<span>{
  "firstName": "John",
  "lastName": "Smith",
  "age": 25
}</span>
<span>```</span></span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>渲染的输出如下所示:</p>
<div><pre><code><span>{</span>
  <span>"firstName"</span><span>:</span> <span>"John"</span><span>,</span>
  <span>"lastName"</span><span>:</span> <span>"Smith"</span><span>,</span>
  <span>"age"</span><span>:</span> <span>25</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="脚注" tabindex="-1"> 脚注</h2>
<blockquote>
<ul>
<li>
<p>脚注允许您添加注释和参考，而不会弄乱文档的正文。当您创建脚注时，带有链接的上标编号会出现在您添加脚注引用的位置。读者可以点击链接跳转到页面底部脚注的内容。</p>
</li>
<li>
<p><sup></sup>要创建脚注引用，请在方括号 ( )内添加插入符号和标识符。标识符可以是数字或单词，但不能包含空格或制表符。标识符仅将脚注引用与脚注本身相关联——在输出中，脚注按顺序编号。</p>
</li>
<li>
<p>在带有冒号和文本 ( <strong><sup></sup>:</strong> My footnote.) 的括号内使用另一个插入符号和数字添加脚注。您不必在文档末尾添加脚注。除了列表、块引号和表格等其他元素之外，您可以将它们放在任何地方。</p>
</li>
</ul>
</blockquote>
<div><pre><code>这是一个简单的脚注[^1]，这是一个更长的脚注。[^bignote]

<span><span>[</span><span>^1</span><span>]</span><span>:</span> 这是第一个脚注。</span> ↩
<span><span>[</span><span>^bignote</span><span>]</span><span>:</span> 这是一个有多个段落和代码的。缩进段落以将它们包含在脚注中。{</span> my code }添加尽可能多的段落。 ↩
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><p>渲染的输出如下所示:</p>
<p>这是一个简单的脚注<sup></sup>，这是一个更长的脚注。<sup></sup></p>
<h2 id="标题-id" tabindex="-1"> 标题 ID</h2>
<blockquote>
<p>许多 Markdown 处理器支持<strong>标题</strong>的自定义 ID——一些 Markdown 处理器会自动添加它们。添加自定义 ID 允许您直接链接到标题并使用 CSS 修改它们。要添加自定义标题 ID，请将自定义 ID 括在与标题相同的行上的花括号中。</p>
<blockquote>
<p>Markdown 官网自定义标题设置锚点是错误的(Typor 亲测)
正确的写法两种 name 只能为英文,中文不能跳转:</p>
<blockquote>
<p><a name="divtop">表</a></p>
<h3 id="custom-id">我是自定义标题</h3>
</blockquote>
</blockquote>
</blockquote>
<div><pre><code><span><span>###</span> 我是自定义标题 {#custom-id}</span>
</code></pre><div aria-hidden="true"><div></div></div></div><p>渲染的输出如下所示:</p>
<h3 id="custom-id">我是自定义标题</h3>
<h3 id="链接到标题-id" tabindex="-1"> 链接到标题 ID</h3>
<blockquote>
<p>您可以通过创建带有<code>数字符号</code> ( ) 后跟自<code>定义标题 ID的标准链接</code>来链接到文件中具有<code>自定义 ID 的标题</code>。#这些通常称为<code>锚链接</code>。</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">Markdown 写法</th>
<th style="text-align:center">HTML</th>
<th style="text-align:right">渲染输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>[标题 ID](#divtop)</code></td>
<td style="text-align:center"><code>&lt;a href=&quot;#divtop&quot;&gt;标题 ID&lt;/a&gt;</code></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left"><code>## contom</code></td>
<td style="text-align:center"><code>&lt;h2 id='contom'&gt;contom&lt;/h2&gt;</code></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left"><code>## custom-id</code></td>
<td style="text-align:center"><code>&lt;h2 id='custom-id'&gt;custom-id&lt;/h2&gt;</code></td>
<td style="text-align:right"></td>
</tr>
</tbody>
</table>
<h2 id="定义列表" tabindex="-1"> 定义列表</h2>
<blockquote>
<p>一些 Markdown 处理器允许您创建术语的定义列表及其相应的定义。要创建定义列表，请在第一行键入术语。在下一行，键入一个冒号，后跟一个空格和定义。</p>
</blockquote>
<div><pre><code>第一学期
: 这是第一项的定义。
第二期
: 这是第二个术语的一个定义。
: 这是第二个术语的另一个定义。
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code><span><span><span>&lt;</span>dl</span><span>></span></span>
  <span><span><span>&lt;</span>dt</span><span>></span></span>第一学期<span><span><span>&lt;/</span>dt</span><span>></span></span>
    <span><span><span>&lt;</span>dd</span><span>></span></span>这是第一项的定义。<span><span><span>&lt;/</span>dd</span><span>></span></span>
  <span><span><span>&lt;</span>dt</span><span>></span></span>第二期<span><span><span>&lt;/</span>dt</span><span>></span></span>
    <span><span><span>&lt;</span>dd</span><span>></span></span>这是第二个术语的一个定义。<span><span><span>&lt;/</span>dd</span><span>></span></span>
    <span><span><span>&lt;</span>dd</span><span>></span></span>这是第二个术语的另一个定义。<span><span><span>&lt;/</span>dd</span><span>></span></span>
<span><span><span>&lt;</span>dl</span><span>></span></span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>渲染的输出如下所示:</p>
<dl>
  <dt>第一学期</dt>
  <dd>这是第一项的定义。</dd>
  <dt>第二期</dt>
  <dd>这是第二个术语的一个定义。</dd>
  <dd>这是第二个术语的另一个定义。</dd>
  <dl></dl>
</dl>
<h2 id="删除线" tabindex="-1"> 删除线</h2>
<blockquote>
<p>您可以通过在单词中心放置一条水平线来删除单词。结果看起来**<s>像这样.</s>** 此功能允许您指出某些单词是错误的，不应包含在文档中。~~要删除单词，请在单词前后使用两个波浪号 (<code>~~</code> )。</p>
</blockquote>
<div><pre><code><span><span>~~</span><span>世界是平的</span><span>~~</span></span>。我们现在知道世界是圆的。
</code></pre><div aria-hidden="true"><div></div></div></div><p>渲染的输出如下所示:</p>
<p><s>世界是平的</s>。我们现在知道世界是圆的。</p>
<h2 id="任务列表" tabindex="-1"> 任务列表</h2>
<blockquote>
<p>任务列表（也称为清单和待办事项列表）允许您创建带有复选框的项目列表。在支持任务列表的 Markdown 应用程序中，复选框会显示在内容旁边。<code>要创建任务列表，请在任务列表项前添加破折号 ( -) 和带空格 ( ) 的括号。[ ]要选择复选框，x请在括号 ( [x]) 之间添加一个</code>。</p>
</blockquote>
<div><pre><code><span>-</span> [x] JavaScript
<span>-</span> [ ] Java
<span>-</span> [ ] GoLang
<span>-</span> [x] C++
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><p>渲染的输出如下所示:</p>
<ul>
<li><input type="checkbox" id="task-item-0" checked="checked" disabled="disabled"><label for="task-item-0"> JavaScript</label></li>
<li><input type="checkbox" id="task-item-1" disabled="disabled"><label for="task-item-1"> Java</label></li>
<li><input type="checkbox" id="task-item-2" disabled="disabled"><label for="task-item-2"> GoLang</label></li>
<li><input type="checkbox" id="task-item-3" checked="checked" disabled="disabled"><label for="task-item-3"> C++</label></li>
</ul>
<h2 id="表情符号" tabindex="-1"> 表情符号😂</h2>
<blockquote>
<p>将表情符号添加到 Markdown 文件有两种方法：<code>将表情符号复制并粘贴到 Markdown 格式的文本中</code>，或<code>键入emoji 短代码</code>。</p>
</blockquote>
<h3 id="复制和粘贴表情符号" tabindex="-1"> 复制和粘贴表情符号</h3>
<blockquote>
<p><a href="https://emojipedia.org/" target="_blank" rel="noopener noreferrer">在大多数情况下，您可以简单地从 Emojipedia</a>等来源复制表情符号并将其粘贴到您的文档中。许多 Markdown 应用程序会自动以 Markdown 格式的文本显示表情符号。您从 Markdown 应用程序导出的 HTML 和 PDF 文件应显示表情符号。</p>
<blockquote>
<p>提示：如果您使用的是静态网站生成器，请确保将 HTML 页面编码为 UTF-8。</p>
</blockquote>
</blockquote>
<h3 id="使用表情符号简码" tabindex="-1"> 使用表情符号简码</h3>
<blockquote>
<p>一些 Markdown 应用程序允许您通过输入<code>表情符号短代码</code>来插入表情符号。这些以冒号开头和结尾，并包含表情符号的名称。</p>
</blockquote>
<div><pre><code>去露营了！:tent: 快回来。

太搞笑了！:joy:
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p>渲染的输出如下所示:</p>
<p>去露营了！⛺ 快回来。</p>
<p>太搞笑了！😂</p>
<h2 id="强调" tabindex="-1"> 强调</h2>
<blockquote>
<p>这并不常见，但一些 Markdown 处理器允许您突出<mark>显示文本</mark>。结果看起来像这样. 要突出显示单词，请在<code>单词前后使用两个等号(==)</code>。</p>
</blockquote>
<div><pre><code>我需要强调这些==很重要的话.==
</code></pre><div aria-hidden="true"><div></div></div></div><p>渲染的输出如下所示:</p>
<p>我需要强调这些<mark>很重要的话.</mark></p>
<h2 id="下标" tabindex="-1"> 下标</h2>
<blockquote>
<p>这并不常见，但一些 Markdown 处理器允许您使用下标将一个或多个字符定位在略低于正常类型行的位置。要创建下标，请在字符前后使用一个波浪号<code>(~)</code>。</p>
</blockquote>
<div><pre><code>H<span><span>~</span><span>2</span><span>~</span></span>O
</code></pre><div aria-hidden="true"><div></div></div></div><p>渲染的输出如下所示:</p>
<p>H<sub>2</sub>O</p>
<p>HTML 语法</p>
<div><pre><code>H&lt;sub&gt;2&lt;/sub&gt;O
</code></pre><div aria-hidden="true"><div></div></div></div><h2 id="上标" tabindex="-1"> 上标</h2>
<blockquote>
<p>这并不常见，但一些 Markdown 处理器允许您使用上标将一个或多个字符定位在略高于正常类型行的位置。要创建上标，请在字符前后使用一个插入符号 <code>(^)</code>。</p>
</blockquote>
<div><pre><code>X^2^
</code></pre><div aria-hidden="true"><div></div></div></div><p>渲染的输出如下所示:</p>
<p>X<sup>2</sup></p>
<p>HTML 语法</p>
<div><pre><code>X&lt;sup&gt;2&lt;/sup&gt;
</code></pre><div aria-hidden="true"><div></div></div></div><h2 id="自动-url-链接" tabindex="-1"> 自动 URL 链接</h2>
<blockquote>
<p>许多 Markdown 处理器会<code>自动将 URL 转换为链接。</code>这意味着如果您键入 http://www.example.com，即使您没有使用括号，您的 Markdown 处理器也会自动将其转换为链接。</p>
</blockquote>
<div><pre><code>http://www.example.com
</code></pre><div aria-hidden="true"><div></div></div></div><p>渲染的输出如下所示:</p>
<p>http://www.example.com</p>
<h2 id="禁用自动-url-链接" tabindex="-1"> 禁用自动 URL 链接</h2>
<blockquote>
<p>如果您不希望自动链接 URL，可以通过将 URL 表示为带有<code>反引号</code>的代码来删除链接。</p>
</blockquote>
<div><pre><code><span>`http://www.example.com`</span>
</code></pre><div aria-hidden="true"><div></div></div></div><p>渲染的输出如下所示：</p>
<p><code>http://www.example.com</code></p>
<hr>
<section>
<ol>
<li id="footnote1"><p>这是第一个脚注。   </p>
</li>
<li id="footnote2"><p>这是一个有多个段落和代码的。缩进段落以将它们包含在脚注中。{ my code }添加尽可能多的段落。 </p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    <item>
      <title>Markdown 基本语法</title>
      <link>https://brysonlin.github.io/blog/blog/code/language/markdown/basic.html</link>
      <guid>https://brysonlin.github.io/blog/blog/code/language/markdown/basic.html</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">Markdown 基本语法</source>
      <description>Mardown 语法提示


几乎所有 Markdown 应用程序都支持原始 Markdown 设计文档中概述的基本语法


Markdown 处理器之间存在微小的区别和差异



</description>
      <category>Markdown</category>
      <pubDate>Mon, 01 Aug 2022 09:33:13 GMT</pubDate>
      <content:encoded><![CDATA[<div><p>Mardown 语法提示</p>
<ul>
<li>
<p>几乎所有 Markdown 应用程序都支持原始 Markdown 设计文档中概述的基本语法</p>
</li>
<li>
<p>Markdown 处理器之间存在微小的区别和差异</p>
</li>
</ul>
</div>

<h2 id="标题" tabindex="-1"> 标题</h2>
<div><p>标题语法</p>
<ul>
<li>
<p>要创建标题，请在单词或短语前添加数字符号（<code>#</code>），您使用的数字符号的数量应与标题的级别想对应，最高到<code>六级</code>。</p>
</li>
<li>
<p>例如：要创建标题级别三（<code>&lt;h3&gt;</code>）,请使用三个字符符号加空格 （列如 <code>### 我是三级标题</code>）</p>
</li>
</ul>
</div>
<table>
<thead>
<tr>
<th>Markdown</th>
<th>HTML</th>
<th>渲染输出</th>
</tr>
</thead>
<tbody>
<tr>
<td># 一级标题</td>
<td><code>&lt;h1&gt;一级标题&lt;/h1&gt;</code></td>
<td><h1>一级标题</h1></td>
</tr>
<tr>
<td>## 二级标题</td>
<td><code>&lt;h2&gt;二级标题&lt;/h2&gt;</code></td>
<td><h2>二级标题</h2></td>
</tr>
<tr>
<td>### 三级标题</td>
<td><code>&lt;h3&gt;三级标题&lt;/h3&gt;</code></td>
<td><h3>三级标题</h3></td>
</tr>
<tr>
<td>#### 四级标题</td>
<td><code>&lt;h4&gt;四级标题&lt;/h4&gt;</code></td>
<td><h4>四级标题</h4></td>
</tr>
<tr>
<td>##### 五级标题</td>
<td><code>&lt;h5&gt;五级标题&lt;/h5&gt;</code></td>
<td><h5>五级标题</h5></td>
</tr>
<tr>
<td>###### 六级标题</td>
<td><code>&lt;h6&gt;六级标题&lt;/h6&gt;</code></td>
<td><h6>六级标题</h6></td>
</tr>
</tbody>
</table>
<h2 id="段落" tabindex="-1"> 段落</h2>
<div><p>段落语法</p>
<ul>
<li>
<p>要创建段落，请使用空行分隔一行或多行文本。</p>
</li>
<li>
<p>段落中添加<code>&lt;br&gt;</code>可以换行。</p>
</li>
</ul>
</div>
<table>
<thead>
<tr>
<th>Markdown</th>
<th>HTML</th>
<th>渲染输出</th>
</tr>
</thead>
<tbody>
<tr>
<td>我真的很喜欢使用 Markdown。我想从现在开始我会用它来格式化我的所有文档。</td>
<td><code>&lt;p&gt;我真的很喜欢使用 Markdown。我想从现在开始我会用它来格式化我的所有文档。&lt;/p&gt;</code></td>
<td>我真的很喜欢使用 Markdown。我想从现在开始我会用它来格式化我的所有文档。</td>
</tr>
</tbody>
</table>
<h2 id="换行符" tabindex="-1"> 换行符</h2>
<div><p>换行符语法</p>
<ul>
<li>要创建换行符或换行符（<code>&lt;br&gt;</code>）,请以两个或多个空格结束一行，然后键入 return。</li>
</ul>
</div>
<table>
<thead>
<tr>
<th>Markdown</th>
<th>HTML</th>
<th>渲染输出</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>这是第一行。&lt;br&gt;这是第二行。</code></td>
<td><code>&lt;p&gt;这是第二行。&lt;br&gt;这是第二行。&lt;/p&gt;</code></td>
<td>这是第二行。<br>这是第二行。</td>
</tr>
</tbody>
</table>
<h2 id="强调-加粗" tabindex="-1"> 强调（加粗）</h2>
<div><p>语法</p>
<ul>
<li>
<p>您可以通过将文本设置为 <strong>粗体</strong> 或 <strong>斜体</strong> 来增加重点。</p>
</li>
<li>
<p>要加粗文本，请在单词或短语 <code>前后</code>添加<code>**</code>或下<code>__</code>。为了强调单词的中间部分，请在字母周围添加两个<code>不带空格</code>的星号。</p>
</li>
</ul>
</div>
<table>
<thead>
<tr>
<th>Markdown</th>
<th>HTML</th>
<th>渲染输出</th>
</tr>
</thead>
<tbody>
<tr>
<td>我只是喜欢 <code>**粗体字。**</code></td>
<td>我只是喜欢 <code>&lt;strong&gt;粗体字。&lt;/strong&gt;</code></td>
<td>我只是喜欢<strong>粗体字。</strong></td>
</tr>
<tr>
<td>我只是喜欢 <code>__粗体字。__</code></td>
<td>我只是喜欢 <code>&lt;strong&gt;粗体字。&lt;/strong&gt;</code></td>
<td>我只是喜欢<strong>粗体字。</strong></td>
</tr>
<tr>
<td>爱<code>**是**</code>大胆的</td>
<td>爱<code>&lt;strong&gt;是&lt;/strong&gt;</code>大胆的</td>
<td>爱<strong>是</strong>大胆的</td>
</tr>
</tbody>
</table>
<h2 id="斜体" tabindex="-1"> 斜体</h2>
<div><p>斜体</p>
<ul>
<li>
<p>要使文本变为斜体，请在单词或短语前后添加<code>*</code>或<code>_</code></p>
</li>
<li>
<p>为了强调单词中间的斜体，请在字母周围添加一个<code>不带空格</code>的星号(*)</p>
</li>
</ul>
</div>
<div><pre><code>我是<span><span>*</span><span>斜体</span><span>*</span></span>字
</code></pre><div aria-hidden="true"><div></div></div></div><p>渲染的输出如下所示:<br></p>
<p>我是<em>斜体</em>字</p>
<h2 id="块引用" tabindex="-1"> 块引用</h2>
<div><p>语法</p>
<ul>
<li>要创建块引用，请在段落前添加一个大于符号（<code>&gt;</code>）。</li>
</ul>
</div>
<div><pre><code><span>></span> 我是一个块引用
</code></pre><div aria-hidden="true"><div></div></div></div><p>渲染的输出如下所示：<br></p>
<blockquote>
<p>我是一个块引用</p>
</blockquote>
<h3 id="带有多个段落的块引用" tabindex="-1"> 带有多个段落的块引用</h3>
<blockquote>
<p>块引用可以包含多个段落。<code>&gt;</code>在段落之间的空白行上添加一个。</p>
</blockquote>
<div><pre><code><span>></span> 我是第一个块引用
<span>></span>
<span>></span> 我是多个段落的块引用
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p>渲染的输出如下显示：</p>
<blockquote>
<p>我是第一个块引用</p>
</blockquote>
<blockquote>
<p>我是多个段落的块引用</p>
</blockquote>
<h3 id="嵌套块引用" tabindex="-1"> 嵌套块引用</h3>
<blockquote>
<p>块引用可以嵌套。在要嵌套的段落前面添加一个<code>&gt;&gt;</code>。</p>
</blockquote>
<div><pre><code><span>></span> 我是外层块引用
<span>></span>
<span>> ></span> 我是内层块引用
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p>渲染的输出如下所示</p>
<blockquote>
<p>我是外层块引用</p>
<blockquote>
<p>我是内层块引用</p>
</blockquote>
</blockquote>
<h3 id="带有其他元素的块引用" tabindex="-1"> 带有其他元素的块引用</h3>
<blockquote>
<p>块引用可以包含其他 Markdown 格式的元素。</p>
</blockquote>
<div><pre><code><span>></span> <span><span>####</span> 我这是四级标题的块引用</span>
<span>></span>
<span>></span> <span>-</span> 列表的块引用
<span>></span> <span>-</span> 列表的块引用
<span>></span>
<span>></span> 我是<span><span>*</span><span>斜体</span><span>*</span></span>和<span><span>**</span><span>加粗</span><span>**</span></span>的块引用
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>渲染的输出如下所示</p>
<blockquote>
<h4 id="我这是四级标题的块引用" tabindex="-1"> 我这是四级标题的块引用</h4>
<ul>
<li>列表的块引用</li>
<li>列表的块引用</li>
</ul>
<p>我是<em>斜体</em>和<strong>加粗</strong>的块引用</p>
</blockquote>
<h2 id="列表" tabindex="-1"> 列表</h2>
<blockquote>
<p>您可以将项目组织成 <code>有序列表</code>和 <code>无序列表</code>。</p>
</blockquote>
<h3 id="有序列表" tabindex="-1"> 有序列表</h3>
<blockquote>
<p>要创建有序列表，请添加带有<code>数字后跟句点</code>的行项目。数字不必按数字顺序排列，但列表应以<code>数字一开头</code>。</p>
</blockquote>
<table>
<thead>
<tr>
<th>Markdown</th>
<th>HTML</th>
<th>渲染输出</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.  第一项<br>2.  第二项<br>3.  第三项<br>4.  第四项</td>
<td><code>&lt;ol&gt;</code><br><code>&lt;li&gt;第一项&lt;/li&gt;</code><br><code>&lt;li&gt;第二项&lt;/li&gt;</code><br><code>&lt;li&gt;第三项&lt;/li&gt;</code><br> <code>&lt;li&gt;第四项&lt;/li&gt;</code><br><code>&lt;/ol&gt;</code></td>
<td><ol><li>第一项</li><li>第二项</li><li>第三项</li><li>第四项</li></ol></td>
</tr>
</tbody>
</table>
<p>渲染的输出如下所示：</p>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
<li>第四项</li>
</ol>
<h3 id="无序列表" tabindex="-1"> 无序列表</h3>
<blockquote>
<p>要创建无序列表，请在行项目前添加破折号 ( <code>-</code>)、星号 ( <code>*</code>) 或加号 ( <code>+</code>)。·缩进一项或多项·以创建<code>嵌套列表</code>。</p>
</blockquote>
<table>
<thead>
<tr>
<th>Markdown</th>
<th>HTML</th>
<th>渲染输出</th>
</tr>
</thead>
<tbody>
<tr>
<td>- 第一项<br>- 第二项<br>- 第三项<br>- 第四项</td>
<td><code>&lt;ul&gt;</code><br><code>&lt;li&gt;第一项&lt;/li&gt;</code><br><code>&lt;li&gt;第二项&lt;/li&gt;</code><br><code>&lt;li&gt;第三项&lt;/li&gt;</code><br><code>&lt;li&gt;第四项&lt;/li&gt;</code><br><code>&lt;/ul&gt;</code></td>
<td><ul><li>第一项</li><li>第二项</li><li>第三项</li><li>第四项</li></ul></td>
</tr>
</tbody>
</table>
<p>渲染的输出如下所示</p>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
<li>第四项</li>
</ul>
<h3 id="在列表中添加元素" tabindex="-1"> 在列表中添加元素</h3>
<div><pre><code><span>-</span> 第一项
<span>-</span> 第二项
<span>-</span> 第三项
  > w 我是无序列表中的块引用
<span>-</span> 第四项
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><p>渲染的输出如下所示</p>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项
<blockquote>
<p>w 我是无序列表中的块引用</p>
</blockquote>
</li>
<li>第四项</li>
</ul>
<h2 id="代码" tabindex="-1"> 代码</h2>
<blockquote>
<p>要将单词或短语表示为代码，请将其括在反引号 <strong>`</strong> 中。</p>
</blockquote>
<table>
<thead>
<tr>
<th>Markdown</th>
<th>HTML</th>
<th>渲染输出</th>
</tr>
</thead>
<tbody>
<tr>
<td>在命令提示符处，键入 ` nano `.</td>
<td>在命令提示符处，键入<code>&lt;code&gt;nano&lt;/code&gt;</code>.</td>
<td>在命令提示符处，键入 <code>nano</code>.</td>
</tr>
</tbody>
</table>
<h3 id="代码块" tabindex="-1"> 代码块</h3>
<blockquote>
<p>要创建代码块，请将块的<code>每一行缩进至少四个空格或一个制表符|</code>。</p>
</blockquote>
<div><pre><code>    <span><span><span>&lt;</span>html</span><span>></span></span>
      <span><span><span>&lt;</span>head</span><span>></span></span>
      <span><span><span>&lt;/</span>head</span><span>></span></span>
    <span><span><span>&lt;/</span>html</span><span>></span></span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><p>渲染的输出如下所示</p>
<div><pre><code><span><span><span>&lt;</span>html</span><span>></span></span>
  <span><span><span>&lt;</span>head</span><span>></span></span> <span><span><span>&lt;/</span>head</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><h2 id="链接" tabindex="-1"> 链接</h2>
<blockquote>
<p>要创建链接，请将链接文本括在中括号中（例如，<code>[Duck Duck Go]</code>），然后紧跟在括号中的 URL（例如，<code>(https://duckduckgo.com)</code>）。</p>
</blockquote>
<div><pre><code>我最喜欢的搜索引擎是<span>[<span>Duck Duck Go</span>](<span>https://duckduckgo.com</span>)</span>。
</code></pre><div aria-hidden="true"><div></div></div></div><p>渲染的输出如下所示</p>
<p>我最喜欢的搜索引擎是<a href="https://duckduckgo.com" target="_blank" rel="noopener noreferrer">Duck Duck Go</a>。</p>
<h3 id="添加标题" tabindex="-1"> 添加标题</h3>
<div><pre><code>我最喜欢的搜索引擎是<span>[<span>Duck Duck Go</span>](<span>https://duckduckgo.com</span> <span>"我是描述性文字"</span>)</span>。
</code></pre><div aria-hidden="true"><div></div></div></div><p>渲染的输出如下所示</p>
<p>我最喜欢的搜索引擎是<a href="https://duckduckgo.com" title="我是描述性文字" target="_blank" rel="noopener noreferrer">Duck Duck Go</a>。</p>
<h3 id="url-和电子邮件地址" tabindex="-1"> URL 和电子邮件地址</h3>
<blockquote>
<p>要将 URL 或电子邮件地址快速转换为链接，请将其括在<code>尖括号中&lt;&gt;</code>。</p>
</blockquote>
<div><pre><code>&lt;https://www.markdownguide.org>
<span><span><span>&lt;</span>fake@example.com</span><span>></span></span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>渲染的输出如下所示</p>
<p><a href="https://www.markdownguide.org" target="_blank" rel="noopener noreferrer">https://www.markdownguide.org</a>
<a href="mailto:fake@example.com">fake@example.com</a></p>
<h3 id="格式化链接" tabindex="-1"> 格式化链接</h3>
<blockquote>
<p>要<strong>强调</strong>链接，请在<code>方括号和圆括号前后添加星号</code>。要将链接表示为<strong>code</strong>，请在括号中添加<code>反引号</code>。</p>
</blockquote>
<div><pre><code>我喜欢支持<span><span>**</span><span><span>[<span>EFF</span>](<span>https://eff.org</span>)</span></span><span>**</span></span>。
这是<span><span>*</span><span><span>[<span>Markdown</span>](<span>https://www.markdownguide.org/basic-syntax/#adding-titles</span>)</span></span><span>*</span></span>。
请参阅关于的部分<span>[<span><span>`code`</span></span>](<span>#code</span>)</span>。
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p>渲染的输出如下所示</p>
<p>我喜欢支持**<a href="https://eff.org" target="_blank" rel="noopener noreferrer">EFF</a>**。
这是*<a href="https://www.markdownguide.org/basic-syntax/#adding-titles" target="_blank" rel="noopener noreferrer">Markdown</a>*。
请参阅关于的部分。</p>
<h2 id="图片" tabindex="-1"> 图片</h2>
<blockquote>
<p>要添加图像，请添加感叹号 (<code>!</code>)，后跟<code>括号中的替代文本</code>，以及括号中的图像资源的<code>路径或 URL</code>。您可以选择在路径或 URL 后添加<code>引号中的标题</code>。</p>
</blockquote>
<div><pre><code><span><span>!</span>[<span>文中添加图片</span>](<span>/img/typor/image-20220714202411426.png</span> <span>"我是标题"</span>)</span>
</code></pre><div aria-hidden="true"><div></div></div></div><p>渲染的输出如下所示</p>
<p><img src="/img/typor/image-20220714202411426.png" alt="文中添加图片" title="我是标题"></p>
<h3 id="链接图像" tabindex="-1"> 链接图像</h3>
<blockquote>
<p>要添加指向图像的链接，请将图像的 Markdown 括在括号中，然后将链接添加到括号中。</p>
</blockquote>
<div><pre><code><span>[<span>![image-20220714202922210</span>](<span>/img/typor/image-20220714202922210.png</span> <span>"按住ctrl+左键跳转百度"</span>)</span>](http://baidu.com)
</code></pre><div aria-hidden="true"><div></div></div></div><p><a href="http://baidu.com" target="_blank" rel="noopener noreferrer"><img src="/img/typor/image-20220714202922210.png" alt="image-20220714202922210" title="按住ctrl+左键跳转百度"></a></p>
<h2 id="转义字符" tabindex="-1"> 转义字符</h2>
<blockquote>
<p>要显示原本用于在 Markdown 文档中格式化文本的文字字符，请在字符前面添加反斜杠 (<code>\</code>)。</p>
</blockquote>
<div><pre><code>\* 演示转义符文字\*
</code></pre><div aria-hidden="true"><div></div></div></div><p>渲染的输出如下所示</p>
<p>* 演示转义符文字*</p>
<h2 id="html" tabindex="-1"> HTML</h2>
<blockquote>
<p>许多 Markdown 应用程序允许您在 Markdown 格式的文本中使用 HTML 标签。如果您更喜欢某些 HTML 标记而不是 Markdown 语法，这将很有帮助。例如，有些人发现对图像使用 HTML 标记更容易。当您需要更改元素的属性（例如指定文本的颜色或更改图像的宽度）时，使用 HTML 也很有帮助。</p>
<p>要使用 HTML，请将标签放在 Markdown 格式文件的文本中。</p>
</blockquote>
<div><pre><code>我是<span><span>**</span><span>粗体</span><span>**</span></span>. 我是<span><span><span>&lt;</span>em</span><span>></span></span>斜体<span><span><span>&lt;/</span>em</span><span>></span></span>
</code></pre><div aria-hidden="true"><div></div></div></div><p>渲染的输出如下所示</p>
<p>我是<strong>粗体</strong>. 我是<em>斜体</em></p>
]]></content:encoded>
      <enclosure url="https://brysonlin.github.io/blog/blog/img/typor/image-20220714202411426.png &quot;我是标题&quot;" type="image/"/>
    </item>
    <item>
      <title>TypeScirpt中的类</title>
      <link>https://brysonlin.github.io/blog/blog/code/language/typescript/class.html</link>
      <guid>https://brysonlin.github.io/blog/blog/code/language/typescript/class.html</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">TypeScirpt中的类</source>
      <pubDate>Sun, 31 Jul 2022 09:25:53 GMT</pubDate>
      <content:encoded><![CDATA[<div><pre><code> // 构造函数

  function Person(name,age){

   this.name = name;

    this.age = age;*

   this.sayHei=function(){

    console.log(`我的名字叫${this.name}，今年：${this.age}`);

   }*

  }

 // 原型上增加方法

   Person.prototype.sex = function(){

    console.log('我正在被共享！');

   }

   // 静态方法

  Person.printName = function(){*

    console.log(this.name);*

   }

  // let person1 = new Person('linxing',18);



  // 对象冒充继承  可以继承属性和方法传参 没法继承原型链和静态方法

   function Web(){

   Person.call(this，传参)

   }

   // 原型链继承 可以继承属性和方法也可以继承原型链上的属性和方法  没法传参

   Web.prototype = new Person();*

   let v = new Web();

   v.sayHei();

  // 原型链和对象冒充函数继承属性和方法

   function Web(name,age){

    Person.call(this,name,age)

  }

  // Webj.prototype = Person.prototype;

  

   // 用对象冒充（盗用构造函数）去继承父类的属性和方法 Person.call(thsi, params)

   // 用原型链去继承父类的原型上的方法  web.prototype = new Person    web.prototype = Person.prototype
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="一、typescript-中的类" tabindex="-1"> 一、TypeScript 中的类</h2>
<div><pre><code><span>class</span> <span>Person</span><span>{</span>
	name<span>:</span><span>string</span><span>;</span>
	<span>constructor</span><span>(</span>name<span>:</span> <span>string</span><span>)</span><span>{</span>			<span>// 构造函数  实例化类的时候触发的方法</span>
		<span>this</span><span>.</span>name <span>=</span> name<span>;</span>
	<span>}</span>
    <span>getName</span><span>(</span><span>)</span><span>:</span> <span>string</span><span>{</span>
        <span>return</span> <span>this</span><span>.</span>name
    <span>}</span>
    <span>setName</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>:</span>viod <span>{</span>
        <span>this</span><span>.</span>name <span>=</span> name<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="二、typescript-中类继承-extends、super" tabindex="-1"> 二、TypeScript 中类继承：extends、super</h2>
<div><pre><code><span>class</span> <span>Person</span><span>{</span>
	name<span>:</span><span>string</span><span>;</span>
	<span>constructor</span><span>(</span>name<span>:</span> <span>string</span><span>)</span><span>{</span>			<span>// 构造函数  实例化类的时候触发的方法</span>
		<span>this</span><span>.</span>name <span>=</span> name<span>;</span>
	<span>}</span>
    <span>getName</span><span>(</span><span>)</span><span>:</span> <span>string</span><span>{</span>
        <span>return</span> <span>this</span><span>.</span>name
    <span>}</span>
    <span>setName</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>:</span>viod <span>{</span>
        <span>this</span><span>.</span>name <span>=</span> name<span>;</span>
    <span>}</span>
<span>}</span>
定义 web 类来继承 Person 类
<span>class</span> <span>Web</span> <span>extends</span> <span>Person</span><span>{</span>
	<span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>
		<span>super</span><span>(</span>name<span>)</span>						<span>// 初始化父类的构造函数				</span>
	<span>}</span>
<span>}</span>
<span>let</span> w <span>=</span> <span>new</span> <span>Web</span><span>(</span><span>'李四'</span><span>)</span>；
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="三、typescript类里面的修饰符" tabindex="-1"> 三、TypeScript类里面的修饰符</h2>
<ol>
<li>TypeScript 里面定义了属性的时候给我们提供了三种修饰符
<ol>
<li>public：公有         											在类里面、子类、类外都可以访问</li>
<li>protected：保护类型  									在类里面、子类里面可以访问，在类外部没法访问</li>
<li>private：私有		                                           在类里面可以访问，子类、类外部都没法访问</li>
</ol>
</li>
<li>属性不加修饰符：默认代表共有属性，public</li>
</ol>
<div><pre><code>class Person{
	public name:string;
	constructor(name: string){			// 构造函数  实例化类的时候触发的方法
		this.name = name;
	}
    getName(): string{
        return this.name
    }
    setName(name:string):viod {
        this.name = name;
    }
}
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="一、typescript中类的静态属性、静态方法、抽象类、多态" tabindex="-1"> 一、TypeScript中类的静态属性、静态方法、抽象类、多态</h2>
<ol>
<li>
<p>es5中的静态属性、静态方法</p>
<div><pre><code><span>function</span> <span>Person</span><span>(</span><span>)</span><span>{</span><span>}</span>
Person<span>.</span>name <span>=</span> <span>'linxing'</span><span>;</span>		<span>// 静态属性</span>
Person<span>.</span><span>sayName</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span> console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>name<span>)</span> <span>}</span>  <span>// 静态方法</span>


Jquery
<span>$</span><span>(</span><span>.</span>box<span>)</span><span>.</span><span>css</span><span>(</span><span>)</span><span>;</span>
<span>function</span> <span>$</span><span>(</span><span>el</span><span>)</span><span>{</span>    <span>return</span> <span>Base</span><span>(</span>el<span>)</span><span>}</span>
<span>Base</span><span>(</span><span>)</span><span>{</span>   <span>this</span><span>.</span>css <span>=</span> <span>'获取DOM节点'</span><span>}</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
<li>
<p>TypeScript中静态属性、静态方法</p>
<div><pre><code><span>class</span> <span>Person</span><span>{</span>
	<span>public</span> name<span>:</span> <span>string</span>
	<span>static</span> age<span>:</span> <span>number</span>
	<span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>
		<span>this</span><span>.</span>name <span>=</span> name
	<span>}</span>
	<span>sayName</span><span>(</span><span>)</span><span>{</span>		<span>// 实例方法</span>
		
	<span>}</span>
	<span>static</span> <span>print</span><span>(</span><span>)</span><span>{</span>		<span>// 在静态方法里面不能使用this</span>
		<span>console</span><span>.</span><span>log</span><span>(</span><span>'我这是静态方法'</span><span>)</span>
	<span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
<li>
<p>多态方法</p>
<ol>
<li>父类定义一个方法不去实现，让继承它的子类去实现  每一个子类有不同的表现</li>
<li>多态属于继承</li>
</ol>
<div><pre><code><span>class</span> <span>Animal</span><span>{</span>
	name<span>:</span> <span>string</span>
	<span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>
		<span>this</span><span>.</span>name <span>=</span> name
	<span>}</span>
	<span>eat</span><span>(</span><span>)</span><span>{</span>							<span>// 定义了一个方法不去实现，让子类去实现</span>
		<span>console</span><span>.</span><span>log</span><span>(</span><span>'我是吃的方法'</span><span>)</span>
	<span>}</span>
<span>}</span>
<span>class</span> <span>Dog</span> <span>extends</span> <span>Animal</span><span>{</span>
	<span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>
		<span>super</span><span>(</span>name<span>)</span>
	<span>}</span>
	<span>eat</span><span>(</span><span>)</span><span>{</span>							<span>// 这就是多态， 继承重写了父类方法</span>
		<span>console</span><span>.</span><span>log</span><span>(</span><span>'小狗吃粮食'</span><span>)</span>
	<span>}</span>
<span>}</span>
<span>class</span> <span>Cat</span> <span>extends</span> <span>Animal</span> <span>{</span>
	<span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>
		<span>super</span><span>(</span>name<span>)</span>
	<span>}</span>
	<span>eat</span><span>(</span><span>)</span><span>{</span>
		<span>console</span><span>.</span><span>log</span><span>(</span><span>'吃老鼠'</span><span>)</span>
	<span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
<li>
<p>抽象方法</p>
<ol>
<li>typeScript 中的抽象类：它是提供其他类继承的基类，不能直接被实例化。</li>
<li>用 abstract 关键字定义抽象类和抽象方法，抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。</li>
<li>abstract 方法只能放在抽象类里面</li>
<li>抽象类和抽象方法用来定义标准，标准：Animal 这个类要求它的子类必须包含 eat 方法</li>
</ol>
<div><pre><code><span>abstract</span> <span>class</span> <span>Animal</span><span>{</span>				<span>// 父类定义，子类必须实现</span>
    <span>public</span> names<span>:</span> <span>string</span>
    <span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span> <span>{</span> 
        <span>this</span><span>.</span>names <span>=</span> name<span>;</span>
    <span>}</span>
	<span>abstract</span> <span>eat</span><span>(</span><span>)</span><span>:</span><span>any</span><span>;</span>
<span>}</span>
<span>// let p = new Animal()  错误：无法定义抽象类</span>

<span>class</span> <span>Dog</span> <span>extends</span> <span>Animal</span><span>{</span>
  <span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>
    <span>super</span><span>(</span>name<span>)</span>
  <span>}</span>
  <span>eat</span><span>(</span><span>)</span><span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>names <span>+</span> <span>'吃'</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>TypeScirpt的数据类型</title>
      <link>https://brysonlin.github.io/blog/blog/code/language/typescript/data-type.html</link>
      <guid>https://brysonlin.github.io/blog/blog/code/language/typescript/data-type.html</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">TypeScirpt的数据类型</source>
      <pubDate>Sun, 31 Jul 2022 09:25:53 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="一、typescript-中为了使编写的代码更规范-更有利于维护-增加了类型校验。" tabindex="-1"> 一、TypeScript 中为了使编写的代码更规范，更有利于维护，增加了类型校验。</h2>
<ul>
<li>
<p>布尔类型（boolean）</p>
</li>
<li>
<p>数字类型（number）</p>
</li>
<li>
<p>字符串类型（string）</p>
</li>
<li>
<p>数组类型（array）</p>
</li>
<li>
<p>元组类型（tuple）</p>
</li>
<li>
<p>枚举类型（enum）</p>
</li>
<li>
<p>任意类型（any）</p>
</li>
<li>
<p>null 和 undefined</p>
</li>
<li>
<p>void 类型</p>
</li>
<li>
<p>never 类型</p>
</li>
<li>
<p>对象</p>
</li>
<li>
<p>unknown(一种保护类型的any)</p>
</li>
<li>
<p>类型的别名</p>
<div><pre><code><span>// 类型的别名</span>
<span>type</span> <span>Mytype</span> <span>=</span> <span>1</span><span>|</span><span>2</span><span>|</span><span>3</span><span>|</span><span>4</span><span>|</span><span>5</span><span>;</span>
<span>let</span> num<span>:</span>Mytype
<span>let</span> num1<span>:</span>Mytype
<span>let</span> num2<span>:</span>Mytype


num <span>=</span> <span>8</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ul>
<h2 id="二、定义类型示例" tabindex="-1"> 二、定义类型示例</h2>
<ol>
<li>
<p>布尔类型（boolean）</p>
<div><pre><code><span>let</span> bool<span>:</span> <span>boolean</span> <span>=</span> <span>true</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div></div></div></li>
<li>
<p>数字类型 （number）</p>
<div><pre><code><span>let</span> num<span>:</span> <span>number</span> <span>=</span> <span>11</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div></div></div></li>
<li>
<p>字符串类型（string）</p>
<div><pre><code><span>let</span> str<span>:</span> <span>string</span> <span>=</span> <span>'lin'</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div></div></div></li>
<li>
<p>数组类型(Array)</p>
<div><pre><code><span>// 第一种定义方式</span>
<span>let</span> arr<span>:</span> <span>string</span><span>[</span><span>]</span> <span>=</span> <span>[</span><span>'lin'</span><span>,</span><span>'xing'</span><span>]</span><span>;</span>
<span>// 第二种定义方式: 泛型</span>
<span>let</span> arr<span>:</span> <span>Array</span><span>&lt;</span><span>string</span><span>></span> <span>=</span> <span>[</span><span>'lin'</span><span>,</span><span>'xing'</span><span>]</span><span>;</span>
<span>// 第三种类型：</span>
<span>let</span> arr<span>:</span> <span>any</span><span>[</span><span>]</span> <span>=</span> <span>[</span><span>'linxing'</span><span>,</span> <span>123</span><span>,</span> <span>false</span><span>]</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
<li>
<p>元组类型 (tuple)</p>
<div><pre><code><span>let</span> tup<span>:</span> <span>[</span><span>string</span><span>,</span> <span>number</span><span>,</span> <span>boolean</span><span>]</span> <span>=</span> <span>[</span><span>'JavaScript'</span><span>,</span> <span>110</span><span>,</span> <span>true</span><span>]</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div></div></div></li>
<li>
<p>枚举类型 (enum)</p>
<div><pre><code><span>enum</span> 枚举名<span>{</span>
	标识符<span>[</span><span>=</span> 整型常数<span>]</span>，
	标识符<span>[</span><span>=</span> 整型常数<span>]</span>，
	<span>...</span><span>.</span>
	标识符<span>[</span><span>=</span> 整型常数<span>]</span>，
<span>}</span>
<span>enum</span> Flag<span>{</span> success <span>=</span> <span>1</span><span>,</span> error <span>=</span> <span>2</span><span>}</span><span>;</span>
<span>let</span> f<span>:</span>Flag <span>=</span> Flag<span>.</span>success<span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span>f<span>)</span><span>;</span>   <span>// 结果1</span>

<span>// 默认是数字 ， 如果修改其中的一个类型不为数字，后面则必须定义，否则报错</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
<li>
<p>任意类型 (any)</p>
<div><pre><code><span>let</span> anyType<span>:</span> <span>any</span> <span>=</span> <span>'string'</span>			<span>// 什么类型都能放</span>
</code></pre><div aria-hidden="true"><div></div></div></div></li>
<li>
<p>null 和 undefined 类型</p>
<div><pre><code><span>let</span> age<span>:</span> <span>number</span> <span>|</span> <span>undefined</span><span>;</span>			<span>// | 或者的意思</span>
<span>let</span> num<span>:</span> <span>number</span> <span>|</span> <span>null</span> <span>|</span> <span>undefined</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div></li>
<li>
<p>void 类型</p>
<div><pre><code><span>// void 表示没有任何类型，一般用于执行方法没有返回值</span>
<span>function</span> <span>sum</span><span>(</span>x<span>,</span> y<span>,</span><span>)</span><span>:</span> <span>void</span><span>{</span>
    <span>let</span> num<span>:</span> <span>number</span> <span>=</span> x<span>+</span>y<span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div></li>
<li>
<p>never 类型</p>
<div><pre><code><span>// never类型：是其他类型（包括 null 和 undefined ）的子类型，代表从不会出现的值。</span>
<span>// 这意味着声明never的变量只能被never类型所赋值。</span>

<span>var</span> a<span>:</span><span>undefined</span><span>;</span>
a<span>=</span><span>undefined</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>装饰器</title>
      <link>https://brysonlin.github.io/blog/blog/code/language/typescript/decorator.html</link>
      <guid>https://brysonlin.github.io/blog/blog/code/language/typescript/decorator.html</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">装饰器</source>
      <pubDate>Sun, 31 Jul 2022 09:25:53 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="一、typescript中的装饰" tabindex="-1"> 一、TypeScript中的装饰</h2>
<div><p>提示</p>
<ol>
<li>装饰器：装饰器是一种特殊类型1的声明，它能够被附加到类声明，方法，属性或传参上，可以修改类的行为。</li>
<li>通俗的讲 装饰器就是一个方法，可以注入到类、方法、属性参数上来扩展类、属性、方法、参数的功能。</li>
<li>常见的装饰器有：类装饰器、属性装饰器、方法装饰器、参数装饰器</li>
<li>装饰器的写法：普通装饰器（无法传参）、装饰器工厂（可传参）</li>
<li>装饰器是过去几年中 JS 最大的成就之一，已是 es7 的标准特性之一</li>
</ol>
</div>
<h2 id="二、类装饰器" tabindex="-1"> 二、类装饰器</h2>
<h3 id="_1-类装饰器-类装饰器在类声明之前被声明-紧靠着类声明-。类装饰器应用于类构造函数-可以用来监视-修改或替换类定义。传入一个参数" tabindex="-1"> 1. 类装饰器：类装饰器在类声明之前被声明（紧靠着类声明）。类装饰器应用于类构造函数，可以用来监视，修改或替换类定义。传入一个参数</h3>
<h3 id="_2-普通装饰器-没有参数" tabindex="-1"> 2. 普通装饰器（没有参数）</h3>
<div><pre><code><span>function</span> <span>logclass</span><span>(</span>parms<span>:</span><span>any</span><span>)</span><span>{</span>
  parms<span>.</span>prototype<span>.</span><span>sayName</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>name<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
<span><span>@</span><span>logclass</span></span>
<span>class</span> <span>Web</span> <span>{</span>
  <span>public</span> name<span>:</span><span>string</span><span>;</span>
  <span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>
    <span>this</span><span>.</span>name <span>=</span> name
  <span>}</span>
<span>}</span>
<span>let</span> person<span>:</span><span>any</span>  <span>=</span> <span>new</span> <span>Web</span><span>(</span><span>'linxing'</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span>person<span>)</span><span>;</span>
person<span>.</span><span>sayName</span><span>(</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="_3-装饰器工厂-带参" tabindex="-1"> 3. 装饰器工厂（带参）</h3>
<div><pre><code><span>// 装饰器</span>
<span>function</span> <span>logclass</span><span>(</span>params<span>:</span><span>string</span><span>)</span><span>{</span>
  <span>return</span> <span>function</span><span>(</span>target<span>:</span><span>any</span><span>)</span><span>{</span>
q    target<span>.</span>prototype<span>.</span>apiUrl <span>=</span> params<span>;</span>
  <span>}</span>
<span>}</span>
<span><span>@</span><span>logclass</span></span><span>(</span><span>'http://www.itying.com/api'</span><span>)</span>
<span>class</span> <span>Web</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span><span>{</span><span>}</span>
<span>}</span>
<span>let</span> person<span>:</span><span>any</span>  <span>=</span> <span>new</span> <span>Web</span><span>(</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span>apiUrl<span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="_4-类装饰器重载-类的构造函数" tabindex="-1"> 4. 类装饰器重载 类的构造函数</h3>
<div><pre><code><span>// 装饰器</span>
<span>function</span> <span>logclass</span><span>(</span>target<span>:</span><span>any</span><span>)</span><span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span>target<span>)</span><span>;</span>
  <span>return</span> <span>class</span> <span><span>extends</span></span> target<span>{</span>
    apiUlr<span>:</span><span>any</span> <span>=</span> <span>'我是修改过后的数据'</span><span>;</span>
    <span>getData</span><span>(</span><span>)</span><span>{</span>
      <span>console</span><span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>apiUlr<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
<span><span>@</span><span>logclass</span></span>
<span>class</span> <span>Web</span> <span>{</span>
  <span>public</span> apiUlr<span>:</span> <span>string</span> <span>|</span> <span>undefined</span><span>;</span>
  <span>constructor</span><span>(</span><span>)</span><span>{</span>
    <span>this</span><span>.</span>apiUlr <span>=</span> <span>'我是构造函数里的apiurl'</span>
  <span>}</span>
  <span>getData</span><span>(</span><span>)</span><span>{</span><span>}</span>
<span>}</span>
<span>let</span> person<span>:</span><span>any</span>  <span>=</span> <span>new</span> <span>Web</span><span>(</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span>apiUlr<span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="三、属性装饰器" tabindex="-1"> 三、属性装饰器</h2>
<blockquote>
<p><strong>内容正在创建中……</strong></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>TypeScript函数</title>
      <link>https://brysonlin.github.io/blog/blog/code/language/typescript/fn.html</link>
      <guid>https://brysonlin.github.io/blog/blog/code/language/typescript/fn.html</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">TypeScript函数</source>
      <pubDate>Sun, 31 Jul 2022 09:25:53 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="一、typescript函数" tabindex="-1"> 一、TypeScript函数</h2>
<ol>
<li>
<p>es5中定义方法</p>
<div><pre><code><span>// 函数声明式</span>
<span>function</span> <span>sun</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>;</span>
<span>// 匿名函数</span>
<span>let</span> <span>person</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span><span>}</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div></li>
<li>
<p>TypeScript中定义方法</p>
<div><pre><code><span>// 函数声明式</span>
<span>function</span> <span>sun</span><span>(</span><span>)</span><span>:</span>viod<span>{</span><span>}</span><span>;</span>
<span>// 匿名函数</span>
<span>let</span> person <span>=</span> <span>funciton</span><span>(</span><span>)</span><span>:</span><span>string</span><span>{</span> <span>return</span>  <span>''</span><span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div></li>
</ol>
<h2 id="二、函数方法传参" tabindex="-1"> 二、函数方法传参</h2>
<ol>
<li>
<p>函数声明</p>
<div><pre><code><span>function</span> <span>getInfo</span><span>(</span>name<span>:</span> <span>string</span><span>,</span> age<span>:</span> <span>number</span><span>)</span><span>:</span> <span>string</span><span>{</span> 
	<span>return</span> <span><span>`</span><span>我的名字叫</span><span><span>${</span>name<span>}</span></span><span>,今年</span><span><span>${</span>age<span>}</span></span><span>岁</span><span>`</span></span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div></li>
<li>
<p>匿名函数</p>
<div><pre><code><span>let</span> <span>getInfo</span> <span>=</span> <span>function</span><span>(</span>name<span>:</span> <span>string</span><span>,</span> age<span>:</span> <span>number</span><span>)</span><span>:</span> viod<span>{</span> 
	<span>console</span><span>.</span><span>log</span><span>(</span><span><span>`</span><span>我的名字叫</span><span><span>${</span>name<span>}</span></span><span>,今年</span><span><span>${</span>age<span>}</span></span><span>岁</span><span>`</span></span><span>)</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div></li>
</ol>
<h2 id="三、方法的可选参数" tabindex="-1"> 三、方法的可选参数</h2>
<ol>
<li>
<p>es5 里面方法的实参和形参可以不一样，但是 ts 中必须一样，如果不一样就需要配置可选参数</p>
</li>
<li>
<p>注意！可选参数必须配到参数的最后面</p>
<div><pre><code><span>let</span> <span>getInfo</span> <span>=</span> <span>function</span><span>(</span>name<span>:</span> <span>string</span><span>,</span> age<span>?</span><span>:</span> <span>number</span><span>)</span><span>:</span> viod<span>{</span> 
	<span>if</span><span>(</span>age<span>)</span><span>{</span>
		<span>console</span><span>.</span><span>log</span><span>(</span><span><span>`</span><span>我的名字叫</span><span><span>${</span>name<span>}</span></span><span>,今年</span><span><span>${</span>age<span>}</span></span><span>岁</span><span>`</span></span><span>)</span>
	<span>}</span><span>else</span><span>{</span>
		<span>console</span><span>.</span><span>log</span><span>(</span><span>'哈哈哈'</span><span>)</span>
	<span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ol>
<h2 id="四、方法的默认参数" tabindex="-1"> 四、方法的默认参数</h2>
<ol>
<li>
<p>es5 中是不能配置默认传参的，es6 和 ts 可配置默认参数</p>
<div><pre><code>
<span>let</span> <span>getInfo</span> <span>=</span> <span>function</span><span>(</span>name<span>:</span> <span>string</span><span>,</span> age<span>:</span> <span>number</span> <span>=</span> <span>23</span><span>)</span><span>:</span> viod<span>{</span> 
	<span>if</span><span>(</span>age<span>)</span><span>{</span>
		<span>console</span><span>.</span><span>log</span><span>(</span><span><span>`</span><span>我的名字叫</span><span><span>${</span>name<span>}</span></span><span>,今年</span><span><span>${</span>age<span>}</span></span><span>岁</span><span>`</span></span><span>)</span>
	<span>}</span><span>else</span><span>{</span>
		<span>console</span><span>.</span><span>log</span><span>(</span><span>'哈哈哈'</span><span>)</span>
	<span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ol>
<h2 id="五、函数剩余参数" tabindex="-1"> 五、函数剩余参数</h2>
<ol>
<li>
<p>三点运算符 接收传递过来的所有参数</p>
<div><pre><code><span>function</span> <span>sum</span><span>(</span>a<span>:</span><span>number</span><span>,</span> <span>...</span>result<span>:</span> <span>number</span><span>[</span><span>]</span><span>)</span><span>:</span> <span>number</span><span>{</span>
	<span>var</span> sum <span>=</span> <span>0</span><span>;</span>
	<span>for</span><span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i<span>&lt;</span>result<span>.</span>lenght<span>;</span>i<span>++</span><span>)</span><span>{</span>
		sum<span>+=</span>result<span>[</span>i<span>]</span><span>;</span>
	<span>}</span>
	<span>return</span> sum
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ol>
<h2 id="六、函数重载" tabindex="-1"> 六、函数重载</h2>
<ol>
<li>
<p>java 中方法的重载：重载指的是两个或者两个以上同名函数，但它们的参数不一样，这时会出现函数重载的情况。</p>
</li>
<li>
<p>typescript 中的重载：通过为同一个函数提供多个函数类型定义来试下各种功能的目的。</p>
</li>
<li>
<p>为了兼容es5，以及es6中重载的写法和java有区别</p>
<div><pre><code><span>function</span> <span>getInfo</span><span>(</span>names<span>:</span> <span>string</span><span>)</span><span>:</span> <span>string</span><span>;</span>
<span>function</span> <span>getInfo</span><span>(</span>age<span>:</span><span>number</span> <span>)</span><span>:</span> <span>string</span><span>;</span>
<span>function</span> <span>getInfo</span><span>(</span>str<span>:</span><span>any</span><span>)</span><span>:</span><span>any</span> <span>{</span>
	<span>if</span><span>(</span><span>typeof</span> str <span>===</span> <span>'string'</span><span>)</span><span>{</span>
		<span>return</span> <span><span>`</span><span>我叫：</span><span><span>${</span>str<span>}</span></span><span>`</span></span>
	<span>}</span><span>else</span><span>{</span>
		<span>return</span> <span><span>`</span><span>我的年龄是</span><span><span>${</span>str<span>}</span></span><span>`</span></span>
	<span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>泛型</title>
      <link>https://brysonlin.github.io/blog/blog/code/language/typescript/genericity.html</link>
      <guid>https://brysonlin.github.io/blog/blog/code/language/typescript/genericity.html</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">泛型</source>
      <pubDate>Sun, 31 Jul 2022 09:25:53 GMT</pubDate>
      <content:encoded><![CDATA[<p>一、泛型的概念：</p>
<div><p>提示</p>
<ul>
<li>
<p>软件工程中，我们不仅要创建一致的定义良好的 API，同时也要考虑可重用性。组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。</p>
</li>
<li>
<p>在像 C# 和 Java 这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类的数据。这样用户就可以以自己的数据类型来使用组件。</p>
</li>
<li>
<p>通俗理解：<strong>泛型就是解决 类 接口 方法的复用性、以及对不特定数据类型的支持。</strong></p>
</li>
</ul>
</div>
<h2 id="二、泛型函数" tabindex="-1"> 二、泛型函数</h2>
<ol>
<li>
<div><pre><code><span>// 泛型：可以支持不特定的数据类型  要求：传入的参数和返回的的参数一致</span>
<span>// T表示泛型，具体什么类型是调用这个方法的时候决定的</span>
	<span>function</span> <span><span>getData</span><span><span>&lt;</span><span>T</span><span>></span></span></span><span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>T</span><span>{</span>
		<span>return</span> value<span>;</span>
	<span>}</span>
	<span><span>getData</span><span><span>&lt;</span><span>number</span><span>></span></span></span><span>(</span><span>123</span><span>)</span>

	<span>function</span> <span><span>getData</span><span><span>&lt;</span><span>T</span><span>></span></span></span><span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>any</span><span>{</span>
		<span>return</span> value<span>;</span>
	<span>}</span>
	<span><span>getData</span><span><span>&lt;</span><span>number</span><span>></span></span></span><span>(</span><span>123</span><span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ol>
<h2 id="三、泛型类" tabindex="-1"> 三、泛型类</h2>
<ol>
<li>
<p>泛型类：比如有个最小堆算法，需要同时支持返回数字和字符串你两种类型。通过类的泛型来实现</p>
<div><pre><code><span>class</span> <span>MinClass<span>&lt;</span><span>T</span><span>></span></span> <span>{</span>
  <span>public</span> list<span>:</span> <span>T</span><span>[</span><span>]</span> <span>=</span> <span>[</span><span>]</span><span>;</span>
  <span>add</span><span>(</span>num<span>:</span> <span>T</span><span>)</span><span>:</span> <span>T</span><span>[</span><span>]</span><span>{</span>
    <span>this</span><span>.</span>list<span>.</span><span>push</span><span>(</span>num<span>)</span>
    <span>return</span> <span>this</span><span>.</span>list
  <span>}</span>
  <span>minNum</span><span>(</span><span>)</span><span>:</span><span>T</span><span>{</span>
    <span>let</span> min <span>=</span> <span>this</span><span>.</span>list<span>[</span><span>0</span><span>]</span><span>;</span>
    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>this</span><span>.</span>list<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      <span>const</span> element <span>=</span> <span>this</span><span>.</span>list<span>[</span>i<span>]</span><span>;</span>
      <span>if</span> <span>(</span>min <span>></span> element<span>)</span> <span>{</span>
        min <span>=</span> element
      <span>}</span>
    <span>}</span>
    <span>return</span> min
  <span>}</span>
<span>}</span>
<span>let</span> person <span>=</span> <span>new</span> <span>MinClass<span>&lt;</span><span>string</span><span>></span></span><span>(</span><span>)</span><span>;</span>		<span>// 实例化类，并且证明类的泛型是number </span>
<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span><span>add</span><span>(</span><span>'a'</span><span>)</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span><span>add</span><span>(</span><span>'c'</span><span>)</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span><span>add</span><span>(</span><span>'e'</span><span>)</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span>person<span>.</span><span>minNum</span><span>(</span><span>)</span><span>)</span><span>;</span>			
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ol>
<h2 id="四、泛型接口" tabindex="-1"> 四、泛型接口</h2>
<ol>
<li>
<div><pre><code><span>// 泛型接口</span>
<span>interface</span> <span>ConfigFn</span><span>{</span>
	<span>&lt;</span><span>T</span><span>></span><span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>T</span><span>;</span>
<span>}</span>
<span>let</span> getData<span>:</span><span>ConfigFn</span> <span>=</span> <span>function</span><span>&lt;</span><span>T</span><span>></span><span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>T</span><span>{</span>
	<span>return</span> value<span>;</span>
<span>}</span>
<span><span>getData</span><span><span>&lt;</span><span>string</span><span>></span></span></span><span>(</span><span>'张三'</span><span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
<li>
<div><pre><code><span>// 泛型接口</span>
<span>interface</span> <span>ConfigFn<span>&lt;</span><span>T</span><span>></span></span><span>{</span>
	<span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>T</span><span>;</span>
<span>}</span>
<span>function</span> <span><span>getData</span><span><span>&lt;</span><span>T</span><span>></span></span></span><span>(</span>value<span>:</span><span>T</span><span>)</span><span>:</span><span>T</span><span>{</span>
	<span>return</span> value<span>;</span>
<span>}</span>
<span>let</span> myGetData<span>:</span>ConfigFn<span>&lt;</span><span>string</span><span>></span> <span>=</span> getData<span>;</span>
<span>myGetData</span><span>(</span><span>'张三'</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ol>
<h2 id="五、typescript-泛型类-把类作为参数类型的泛型类" tabindex="-1"> 五、TypeScript 泛型类 把类作为参数类型的泛型类</h2>
<div><pre><code><span>// 操作数据库的泛型类</span>
calss MysqlDb<span>&lt;</span><span>T</span><span>></span><span>{</span>
	<span>add</span><span>(</span>info<span>:</span><span>T</span><span>)</span><span>:</span><span>boolean</span><span>{</span>
		<span>console</span><span>.</span><span>log</span><span>(</span>info<span>)</span><span>;</span>
		<span>return</span> <span>true</span>
	<span>}</span>
<span>}</span>

<span>//1、定义一个User类和数据库进行映射</span>

<span>class</span> <span>User</span><span>{</span>
    username<span>:</span><span>string</span> <span>|</span> <span>undefined</span><span>;</span>
    pasword<span>:</span><span>string</span> <span>|</span> <span>undefined</span><span>;</span>
<span>}</span>
<span>var</span> u <span>=</span> <span>new</span> <span>User</span><span>(</span><span>)</span><span>;</span>
u<span>.</span>username <span>=</span> <span>'张三'</span>；
u<span>.</span>password <span>=</span> <span>'123456'</span><span>;</span>
<span>var</span> Db <span>=</span> <span>new</span> <span>MysqlDb<span>&lt;</span>User<span>></span></span><span>(</span><span>)</span><span>;</span>
Db<span>.</span><span>add</span><span>(</span>u<span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="六、统一封装-mysql、mssql、mongodb" tabindex="-1"> 六、统一封装 Mysql、Mssql、mongodb</h2>
<ol>
<li>功能：定义一个操作数据库的库  支持 Mysql Mssql MongoDb</li>
<li>要求：Mysql Mssql MongoDb 功能一样 都有 add  update delete get方法</li>
<li>注意：约束统一的规范、以及代码重用</li>
<li>解决方案：需要约束规范所以要定义接口，需要代码重用所以用到泛型
<ol>
<li>接口：在面向对象的编程中，接口时一种规范的定义，它定义了行为和动作的归覅能否</li>
<li>泛型 通俗理解：泛型就是解决 类 接口 方法的复用性。</li>
</ol>
</li>
</ol>
<div><pre><code><span>interface</span> <span><span>DBI</span><span>&lt;</span><span>T</span><span>></span></span><span>{</span>
    <span>add</span><span>(</span>info<span>:</span><span>T</span><span>)</span><span>:</span><span>boolean</span><span>;</span>
    <span>update</span><span>(</span>info<span>:</span><span>T</span><span>,</span>di<span>:</span><span>number</span><span>)</span><span>:</span><span>boolean</span><span>;</span>
    <span>delete</span><span>(</span>id<span>:</span><span>number</span><span>)</span><span>:</span><span>boolean</span><span>;</span>
    <span>get</span><span>(</span>id<span>:</span><span>number</span><span>)</span><span>:</span><span>any</span><span>[</span><span>]</span><span>;</span>
<span>}</span>
<span>// 定义一个操作mysql数据库的类     注意：要实现泛型接口 这个类也应该是一个泛型类</span>
<span>class</span> <span>MysqlDb<span>&lt;</span><span>T</span><span>></span></span> <span>implements</span> <span><span>DBI</span><span>&lt;</span><span>T</span><span>></span></span><span>{</span>
  <span>add</span><span>(</span>info<span>:</span> <span>T</span><span>)</span><span>:</span> <span>boolean</span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span>info<span>)</span>
    <span>return</span> <span>true</span>
  <span>}</span>
  <span>update</span><span>(</span>info<span>:</span> <span>T</span><span>,</span> di<span>:</span> <span>number</span><span>)</span><span>:</span> <span>boolean</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>"Method not implemented."</span><span>)</span><span>;</span>
  <span>}</span>
  <span>delete</span><span>(</span>id<span>:</span> <span>number</span><span>)</span><span>:</span> <span>boolean</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>"Method not implemented."</span><span>)</span><span>;</span>
  <span>}</span>
  <span>get</span><span>(</span>id<span>:</span> <span>number</span><span>)</span><span>:</span> <span>any</span><span>[</span><span>]</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>"Method not implemented."</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
<span>class</span> <span>User</span><span>{</span>
    userName<span>:</span> <span>string</span> <span>|</span> <span>undefined</span><span>;</span>
    password<span>:</span> <span>string</span> <span>|</span> <span>undefined</span><span>;</span>
<span>}</span>
<span>let</span> person <span>=</span> <span>new</span> <span>User</span><span>(</span><span>)</span><span>;</span>
person<span>.</span>userName <span>=</span> <span>'linxing'</span><span>;</span>
person<span>.</span>password <span>=</span> <span>'123456'</span>

<span>let</span> OMysqlDb <span>=</span> <span>new</span> <span>MysqlDb<span>&lt;</span>User<span>></span></span><span>(</span><span>)</span>
OMysqlDb<span>.</span><span>add</span><span>(</span>person<span>)</span><span>;</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>接口</title>
      <link>https://brysonlin.github.io/blog/blog/code/language/typescript/interface.html</link>
      <guid>https://brysonlin.github.io/blog/blog/code/language/typescript/interface.html</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">接口</source>
      <pubDate>Sun, 31 Jul 2022 09:25:53 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="一、typescrip中的接口" tabindex="-1"> 一、TypeScrip中的接口</h2>
<div><p>提示</p>
<ul>
<li>
<ol>
<li>接口的作用：<code>在面向对象的编程中，接口时一种规范的定义，它定义了行为和动作的规范，在程序设计里面，接口起到一种限制和规范的作用。</code>接口定义了某一批类所需要遵守的规范，接口不关心这些类的内部状态数据，也不关心这些类里方法的实现细节，它只规定这批类里必须提供某些方法，提供这些方法的类就可以满足实际需要。typescript 中的接口类似于 java ，同时还增加了更灵活的接口类型，包括 <strong>属性、函数、可索引、和类</strong> 等。</li>
</ol>
</li>
<li>
<ol start="2">
<li>定义行为和动作的规范。对批量方法进行约束  interface</li>
</ol>
</li>
</ul>
</div>
<h2 id="二、属性类接口" tabindex="-1"> 二、属性类接口</h2>
<h3 id="_1-就是传入对象的约束-属性接口" tabindex="-1"> 1. 就是传入对象的约束  属性接口</h3>
<div><pre><code><span>interface</span> <span>FullName</span><span>{</span>
	firstName<span>:</span> <span>string</span><span>;</span>		<span>// 注意，分号结束</span>
	secondName<span>:</span> <span>string</span><span>;</span>
<span>}</span>
<span>function</span> <span>printName</span><span>(</span>name<span>:</span>FullName<span>)</span><span>{</span>
	<span>// 必须传入firstName  secondName</span>
    <span>console</span><span>.</span><span>log</span><span>(</span>name<span>.</span>firstName <span>+</span> name<span>.</span>secondName<span>)</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="_2-可选接口" tabindex="-1"> 2. 可选接口</h3>
<div><pre><code><span>interface</span> <span>FullName</span><span>(</span><span>)</span><span>{</span>
	firstName<span>:</span> <span>string</span><span>;</span>
	secondName<span>?</span><span>:</span><span>string</span>
<span>}</span>
<span>function</span> <span>getName</span><span>(</span>name<span>:</span>FullName<span>)</span><span>{</span>
	<span>console</span><span>.</span><span>log</span><span>(</span>name<span>)</span>
<span>}</span>
<span>// 参数的顺序可以不一样</span>
<span>getName</span><span>(</span><span>{</span>
	firstName<span>:</span><span>'linxing'</span><span>;</span>
	secondName<span>:</span><span>'liner'</span>
<span>}</span><span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="_3-示例" tabindex="-1"> 3. 示例</h3>
<div><pre><code><span>interface</span> <span>Config</span><span>{</span>
	type<span>:</span> <span>string</span><span>;</span>
	url<span>:</span> <span>string</span><span>;</span>
	data<span>?</span><span>:</span> <span>string</span><span>;</span>
	dataType<span>:</span> <span>string</span>
<span>}</span>
<span>function</span> <span>ajax</span><span>(</span> config<span>:</span> Config <span>)</span><span>{</span>
    <span>var</span> xhr <span>=</span> <span>new</span> <span>XMLHttpRequest</span><span>(</span><span>)</span><span>;</span>
    xhr<span>.</span><span>open</span><span>(</span> config<span>.</span>get<span>,</span> config<span>.</span>url<span>,</span> <span>true</span><span>)</span><span>;</span>
    xhr<span>.</span><span>send</span><span>(</span>config<span>.</span>data<span>)</span><span>;</span>
    xhr<span>.</span><span>onreadystatechange</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span>
        <span>if</span><span>(</span>xhr<span>.</span>readyState <span>===</span> <span>4</span> <span>&amp;&amp;</span> xhr<span>.</span>status <span>==</span> <span>200</span><span>)</span><span>{</span>
            <span>if</span><span>(</span>confiig<span>.</span>dataType <span>==</span> <span>'json'</span><span>)</span><span>{</span>
                <span>JSON</span><span>.</span><span>perse</span><span>(</span>xhr<span>.</span>responseText<span>)</span>
            <span>}</span><span>else</span><span>{</span>
                <span>console</span><span>.</span><span>log</span><span>(</span>xhr<span>.</span>reponseText<span>)</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
<span>ajax</span><span>(</span><span>{</span>
    type<span>:</span><span>'get'</span><span>,</span>
    data<span>:</span><span>'name:zhang'</span><span>,</span>
    url<span>:</span> <span>'http://www.baidu.com'</span><span>,</span>
    dataType<span>:</span><span>'json'</span>
<span>}</span><span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="三、函数类接口" tabindex="-1"> 三、函数类接口</h2>
<h3 id="_1-函数类型接口-对方法传入的参数-以及返回值进行约束-批量约束" tabindex="-1"> 1. 函数类型接口：对方法传入的参数 以及返回值进行约束  批量约束</h3>
<h3 id="_2-加密的函数类型接口" tabindex="-1"> 2. 加密的函数类型接口</h3>
<div><pre><code><span>interface</span> <span>encrypt</span><span>{</span>
	<span>(</span>key<span>:</span><span>string</span><span>,</span>value<span>:</span><span>string</span><span>)</span><span>:</span><span>string</span><span>;</span>
<span>}</span>
<span>var</span> md5<span>:</span><span>encrypt</span> <span>=</span> <span>function</span> <span>(</span>key<span>:</span><span>string</span><span>,</span>value<span>:</span><span>string</span><span>)</span><span>:</span> <span>string</span><span>{</span>
	<span>// 模拟操作</span>
	<span>return</span> key <span>+</span> name
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="四、可索引接口" tabindex="-1"> 四、可索引接口</h2>
<h3 id="_1-可索引接口-对数组、对象的约束-不常用" tabindex="-1"> 1. 可索引接口：对数组、对象的约束（不常用）</h3>
<h3 id="_2-数组的约束" tabindex="-1"> 2. 数组的约束</h3>
<div><pre><code><span>interface</span> <span>UserArr</span><span>{</span>
	<span>[</span>index<span>:</span><span>number</span><span>]</span><span>:</span><span>string</span>
<span>}</span>
<span>let</span> arr<span>:</span>UserArr <span>=</span> <span>[</span><span>'lixing'</span><span>]</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><h3 id="_3-对象的约束" tabindex="-1"> 3. 对象的约束</h3>
<div><pre><code><span>interface</span> <span>UserArr</span><span>{</span>
	<span>[</span>index<span>:</span><span>string</span><span>]</span><span>:</span><span>any</span>
<span>}</span>
<span>let</span> arr<span>:</span>UserArr <span>=</span> <span>{</span>
	name<span>:</span> <span>'张三'</span>，
	age<span>:</span> <span>23</span>	
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="五、类类型接口" tabindex="-1"> 五、类类型接口</h2>
<h3 id="_1-类类型接口-对类的约束-和-抽象类比较相似" tabindex="-1"> 1. 类类型接口：对类的约束 和 抽象类比较相似</h3>
<div><pre><code><span>interface</span> <span>Animal</span><span>{</span>
  name<span>:</span><span>string</span><span>;</span>
  <span>eat</span><span>(</span>str<span>:</span><span>string</span><span>)</span><span>:</span><span>void</span>
<span>}</span>

<span>class</span> <span>Dog</span> <span>implements</span> <span>Animal</span><span>{</span>
  name<span>:</span><span>string</span><span>;</span>
  <span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>
    <span>this</span><span>.</span>name <span>=</span> name
  <span>}</span>
  <span>eat</span><span>(</span><span>)</span><span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>'小黑吃粮食！'</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
<span>let</span> p <span>=</span> <span>new</span> <span>Dog</span><span>(</span><span>'小黑'</span><span>)</span><span>;</span>
p<span>.</span><span>eat</span><span>(</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="六、接口扩展-接口可继承接口" tabindex="-1"> 六、接口扩展 接口可继承接口</h2>
<div><pre><code><span>interface</span> <span>Animal</span><span>{</span>
  <span>eat</span><span>(</span>foot<span>:</span><span>string</span><span>)</span><span>:</span><span>string</span><span>;</span>
<span>}</span>
<span>interface</span> <span>Web</span> <span>extends</span> <span>Animal</span><span>{</span>
  <span>work</span><span>(</span><span>)</span><span>:</span><span>void</span><span>;</span>
<span>}</span>

<span>class</span> <span>Person</span> <span>implements</span> <span>Web</span><span>{</span>
  <span>public</span> name<span>:</span><span>string</span><span>;</span>
  <span>constructor</span><span>(</span>name<span>:</span><span>string</span><span>)</span><span>{</span>
    <span>this</span><span>.</span>name <span>=</span> name
  <span>}</span>
  <span>eat</span><span>(</span>foot<span>:</span><span>string</span><span>)</span><span>{</span>
    <span>return</span> <span><span>`</span><span><span>${</span><span>this</span><span>.</span>name<span>}</span></span><span>吃</span><span><span>${</span>foot<span>}</span></span><span>`</span></span>
  <span>}</span>
  <span>work</span><span>(</span><span>)</span><span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span><span>`</span><span><span>${</span><span>this</span><span>.</span>name<span>}</span></span><span>敲代码</span><span>`</span></span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
<span>let</span> p <span>=</span> <span>new</span> <span>Person</span><span>(</span><span>'小林'</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span>p<span>.</span><span>eat</span><span>(</span><span>'粮食'</span><span>)</span><span>)</span><span>;</span>
p<span>.</span><span>work</span><span>(</span><span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Markdown</title>
      <link>https://brysonlin.github.io/blog/blog/code/language/markdown/</link>
      <guid>https://brysonlin.github.io/blog/blog/code/language/markdown/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">Markdown</source>
      <description>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。
</description>
      <category>Markdown</category>
      <pubDate>Sun, 31 Jul 2022 03:23:32 GMT</pubDate>
      <content:encoded><![CDATA[<p>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>

<h2 id="一、什么是-markdown" tabindex="-1"> 一、什么是 Markdown</h2>
<div><p>提示</p>
<ul>
<li>
<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，将格式元素添加到纯文本文档</p>
</li>
<li>
<p>Markdown 允许您使用易于阅读、易于编写的纯文本格式进行编写，然后将其转换为结构上有效的 XHTML（或 HTML）</p>
</li>
<li>
<p>Markdown 是由 <code>约翰·格鲁伯（John Gruber） </code>于 <strong>2004</strong> 年创建，现在是世界上最受欢迎的标记语言之一</p>
</li>
<li>
<p>Markdown 编写的文档可以导出 HTML、word、图像、PDF、Epub 等多种格式的文档</p>
</li>
<li>
<p>Markdown 编写的文档后缀为 <code>.md</code> 、 <code>.Markdown</code></p>
</li>
<li>
<p>你可以使用文本编辑器应用程序将 Markdown 格式元素添加到纯文本文件中。活着，您可以使用 macOS、Windows、Linux、iOS 和安卓操作系统的众多 Markdown 应用程序之一。还有一些基于 web 的应用程序专门设计用于以 Markdown 方式编写</p>
</li>
</ul>
</div>
<h2 id="二、为什么要用-markdown" tabindex="-1"> 二、为什么要用 Markdown ?</h2>
<div><p>提示</p>
<ul>
<li>
<p>Markdown 是可移植的。包含 Markdown 格式文本的文件几乎可以使用任何应用程序打开。如果您决定不喜欢当前使用的 Markdown y 应用程序，可以将 Markdown 文件导入另一个 Markdown 应用程序。这与 Microsoft Word 等文字处理应用程序形成鲜明对比，后者将您的内容锁定为专有文件格式.</p>
</li>
<li>
<p>Markdown 与平台无关。您可以再运行任何操作系统的任何设备上创建 Markdown 格式的文本.</p>
</li>
<li>
<p>Markdown 无处不在： Reddit 和 GitHub 等网站支持 Markdown，许多桌面和基于 web 的应用程序都支持 Markdown.</p>
</li>
</ul>
<p><strong>Markdown 可以用于任何事情，通过简单的标记语法，它可以使普通内容具有一定的格式</strong></p>
<ul>
<li>
<p>整理知识，学习必记</p>
</li>
<li>
<p>发布日记，杂文，所见所想</p>
</li>
<li>
<p>撰写发布技术文稿（代码支持）</p>
</li>
<li>
<p>撰写发布学术论文（LaTeX 公式支持）</p>
</li>
<li>
<p>使用它创建网站、文档、书籍、演示、电子邮件和技术文档</p>
</li>
<li>
<p>Markdown 能被使用来撰写带你字数，如：Gitbook</p>
</li>
<li>
<p>当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。列如：GigHub、Gitee、GitLab 简书、掘金、reddit、Diaspora、Stack Exchange、OpenStreeMap、SourceForge 等</p>
</li>
</ul>
</div>
<h2 id="三、支持-markdown-的应用程序和组件-工具" tabindex="-1"> 三、支持 Markdown 的应用程序和组件，工具</h2>
<blockquote>
<p>支持 Markdown 的工具有很多，链接地址：<a href="https://www.markdownguide.org/tools/" target="_blank" rel="noopener noreferrer">Markdown 工具地址</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>Markdown Emoji 列表</title>
      <link>https://brysonlin.github.io/blog/blog/code/language/markdown/emoji/</link>
      <guid>https://brysonlin.github.io/blog/blog/code/language/markdown/emoji/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">Markdown Emoji 列表</source>
      <category>Markdown</category>
      <pubDate>Sun, 31 Jul 2022 03:23:32 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="人物" tabindex="-1"> 人物</h2>
<ul>
<li><a href="/code/language/markdown/emoji/people.html">点击前往</a></li>
</ul>
<h2 id="自然" tabindex="-1"> 自然</h2>
<ul>
<li><a href="/code/language/markdown/emoji/nature.html">点击前往</a></li>
</ul>
<h2 id="对象" tabindex="-1"> 对象</h2>
<ul>
<li><a href="/code/language/markdown/emoji/object.html">点击前往</a></li>
</ul>
<h2 id="地点" tabindex="-1"> 地点</h2>
<ul>
<li><a href="/code/language/markdown/emoji/place.html">点击前往</a></li>
</ul>
<h2 id="符号" tabindex="-1"> 符号</h2>
<ul>
<li><a href="/code/language/markdown/emoji/symbol.html">点击前往</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>跨端开发</title>
      <link>https://brysonlin.github.io/blog/blog/code/</link>
      <guid>https://brysonlin.github.io/blog/blog/code/</guid>
      <source url="https://brysonlin.github.io/blog/blog/rss.xml">跨端开发</source>
      <description>此处是 Mr.BrysonLin 存放的一些代码笔记。
</description>
      <pubDate>Fri, 22 Jul 2022 07:01:38 GMT</pubDate>
      <content:encoded><![CDATA[<p>此处是 Mr.BrysonLin 存放的一些代码笔记。</p>

<h2 id="目录" tabindex="-1"> 目录</h2>
<h3 id="基础" tabindex="-1"> 基础</h3>
<ul>
<li>
<p><a href="/code/basic/">基础知识</a></p>
</li>
<li>
<p><a href="/code/github/">GitHub 介绍</a></p>
</li>
</ul>
<h3 id="前端开发" tabindex="-1"> 前端开发</h3>
<ul>
<li>
<p><a href="/code/vue/">Vue 相关</a></p>
</li>
<li>
<p><a href="/code/react/">React</a></p>
</li>
<li>
<p><a href="/code/nodejs/">NodeJS</a></p>
</li>
</ul>
<h3 id="代码学习" tabindex="-1"> 代码学习</h3>
<ul>
<li>
<p><a href="/code/language/js/">JavaScript 教程</a></p>
</li>
<li>
<p><a href="/code/language/typescript/">TypeScript 教程</a></p>
</li>
<li>
<p><a href="/code/language/markdown/">Markdown 教程</a></p>
</li>
</ul>
<h3 id="代码学习网站" tabindex="-1"> 代码学习网站</h3>
<h3 id="优质网站" tabindex="-1"> 优质网站</h3>
<ul>
<li>
<p><a href="https://www.code-nav.cn/" target="_blank" rel="noopener noreferrer">编程导航</a></p>
</li>
<li>
<p><a href="http://nav.poetries.top/" target="_blank" rel="noopener noreferrer">前端导航</a></p>
</li>
<li>
<p><a href="https://www.frontendjs.com/" target="_blank" rel="noopener noreferrer">前站导航</a></p>
</li>
<li>
<p><a href="https://www.cxy521.com/" target="_blank" rel="noopener noreferrer">CXY521</a></p>
</li>
<li>
<p><a href="http://www.atguigu.com/download.shtml" target="_blank" rel="noopener noreferrer">尚硅谷</a></p>
</li>
<li>
<p><a href="https://wangdoc.com/" target="_blank" rel="noopener noreferrer">网道</a></p>
</li>
<li>
<p><a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener noreferrer">廖雪峰的网站</a></p>
</li>
<li>
<p><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener noreferrer">MDN</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>